
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.mycompany.p2c1.ReglasGram.DB;

import com.mycompany.p2c1.ReglasGram.Token;
import java_cup.runtime.*;
import com.mycompany.p2c1.ReglasGram.Funciones.*;
import com.mycompany.p2c1.ReglasGram.DB.symDB.*;
import com.mycompany.p2c1.objetos.*;
import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.util.Set;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserDB extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return symDB.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserDB() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserDB(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserDB(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\046\000\002\002\004\000\002\002\004\000\002\003" +
    "\006\000\002\003\003\000\002\004\004\000\002\004\003" +
    "\000\002\005\004\000\002\006\006\000\002\006\003\000" +
    "\002\007\013\000\002\010\003\000\002\010\003\000\002" +
    "\011\006\000\002\012\006\000\002\013\006\000\002\014" +
    "\006\000\002\015\006\000\002\016\006\000\002\017\006" +
    "\000\002\020\006\000\002\021\007\000\002\021\003\000" +
    "\002\022\003\000\002\022\002\000\002\023\004\000\002" +
    "\023\003\000\002\024\005\000\002\024\003\000\002\025" +
    "\013\000\002\026\006\000\002\027\006\000\002\030\006" +
    "\000\002\031\006\000\002\032\006\000\002\033\006\000" +
    "\002\034\006\000\002\035\006\000\002\036\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\170\000\004\004\004\001\002\000\006\003\007\005" +
    "\011\001\002\000\004\002\006\001\002\000\004\002\000" +
    "\001\002\000\004\002\ufffe\001\002\000\004\002\001\001" +
    "\002\000\004\006\012\001\002\000\004\010\015\001\002" +
    "\000\006\007\172\010\015\001\002\000\006\007\ufffc\010" +
    "\ufffc\001\002\000\006\003\017\005\020\001\002\000\006" +
    "\007\ufffb\010\ufffb\001\002\000\006\007\ufff9\010\ufff9\001" +
    "\002\000\004\011\021\001\002\000\004\013\022\001\002" +
    "\000\004\014\166\001\002\000\004\012\165\001\002\000" +
    "\004\017\025\001\002\000\004\014\162\001\002\000\004" +
    "\020\027\001\002\000\004\014\157\001\002\000\004\021" +
    "\031\001\002\000\004\014\154\001\002\000\004\022\033" +
    "\001\002\000\004\014\151\001\002\000\004\023\036\001" +
    "\002\000\004\024\044\001\002\000\004\014\037\001\002" +
    "\000\004\015\040\001\002\000\006\003\041\016\043\001" +
    "\002\000\046\003\ufff6\012\ufff6\017\ufff6\020\ufff6\021\ufff6" +
    "\022\ufff6\023\ufff6\024\ufff6\025\ufff6\026\ufff6\030\ufff6\031" +
    "\ufff6\032\ufff6\033\ufff6\034\ufff6\035\ufff6\036\ufff6\037\ufff6" +
    "\001\002\000\004\024\ufff0\001\002\000\046\003\ufff7\012" +
    "\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7" +
    "\025\ufff7\026\ufff7\030\ufff7\031\ufff7\032\ufff7\033\ufff7\034" +
    "\ufff7\035\ufff7\036\ufff7\037\ufff7\001\002\000\004\014\146" +
    "\001\002\000\004\025\047\001\002\000\006\003\053\026" +
    "\054\001\002\000\004\014\050\001\002\000\004\015\051" +
    "\001\002\000\006\003\041\016\043\001\002\000\006\003" +
    "\uffee\026\uffee\001\002\000\004\012\uffec\001\002\000\004" +
    "\014\056\001\002\000\004\012\ufff8\001\002\000\004\006" +
    "\057\001\002\000\010\003\060\007\uffea\011\061\001\002" +
    "\000\010\003\uffe6\007\uffe6\011\uffe6\001\002\000\004\027" +
    "\067\001\002\000\010\003\uffe8\007\uffe8\011\uffe8\001\002" +
    "\000\004\007\066\001\002\000\010\003\060\007\uffeb\011" +
    "\061\001\002\000\010\003\uffe9\007\uffe9\011\uffe9\001\002" +
    "\000\004\012\uffed\001\002\000\004\014\143\001\002\000" +
    "\004\030\074\001\002\000\004\012\072\001\002\000\010" +
    "\003\uffe7\007\uffe7\011\uffe7\001\002\000\004\031\101\001" +
    "\002\000\004\014\075\001\002\000\004\015\076\001\002" +
    "\000\006\003\041\016\043\001\002\000\004\031\uffe3\001" +
    "\002\000\004\032\106\001\002\000\004\014\102\001\002" +
    "\000\004\015\103\001\002\000\006\003\041\016\043\001" +
    "\002\000\004\032\uffe2\001\002\000\004\033\112\001\002" +
    "\000\004\014\107\001\002\000\004\015\110\001\002\000" +
    "\006\003\041\016\043\001\002\000\004\033\uffe1\001\002" +
    "\000\004\014\140\001\002\000\004\034\114\001\002\000" +
    "\004\014\135\001\002\000\004\035\117\001\002\000\004" +
    "\036\124\001\002\000\004\014\120\001\002\000\004\015" +
    "\121\001\002\000\006\003\041\016\043\001\002\000\004" +
    "\036\uffde\001\002\000\004\037\131\001\002\000\004\014" +
    "\125\001\002\000\004\015\126\001\002\000\006\003\041" +
    "\016\043\001\002\000\004\037\uffdd\001\002\000\004\012" +
    "\uffe5\001\002\000\004\014\132\001\002\000\004\015\133" +
    "\001\002\000\006\003\041\016\043\001\002\000\004\012" +
    "\uffdc\001\002\000\004\015\136\001\002\000\006\003\041" +
    "\016\043\001\002\000\004\035\uffdf\001\002\000\004\015" +
    "\141\001\002\000\006\003\041\016\043\001\002\000\004" +
    "\034\uffe0\001\002\000\004\015\144\001\002\000\006\003" +
    "\041\016\043\001\002\000\004\030\uffe4\001\002\000\004" +
    "\015\147\001\002\000\006\003\041\016\043\001\002\000" +
    "\004\025\uffef\001\002\000\004\015\152\001\002\000\006" +
    "\003\041\016\043\001\002\000\004\023\ufff1\001\002\000" +
    "\004\015\155\001\002\000\006\003\041\016\043\001\002" +
    "\000\004\022\ufff2\001\002\000\004\015\160\001\002\000" +
    "\006\003\041\016\043\001\002\000\004\021\ufff3\001\002" +
    "\000\004\015\163\001\002\000\006\003\041\016\043\001" +
    "\002\000\004\020\ufff4\001\002\000\006\007\ufffa\010\ufffa" +
    "\001\002\000\004\015\167\001\002\000\006\003\041\016" +
    "\043\001\002\000\004\017\ufff5\001\002\000\006\007\ufffd" +
    "\010\ufffd\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\170\000\004\002\004\001\001\000\004\003\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\012\005" +
    "\013\001\001\000\004\005\170\001\001\000\002\001\001" +
    "\000\004\006\015\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\022\011\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\025\001" +
    "\001\000\002\001\001\000\004\013\027\001\001\000\002" +
    "\001\001\000\004\014\031\001\001\000\002\001\001\000" +
    "\004\015\033\001\001\000\002\001\001\000\004\016\034" +
    "\001\001\000\004\017\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\045\001\001\000\004\021\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\022\062\023\063\024" +
    "\061\001\001\000\002\001\001\000\006\025\070\026\067" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\024" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\077\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\076\001\001\000\002\001" +
    "\001\000\004\031\104\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\103\001\001\000\002\001\001\000" +
    "\004\032\112\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\110\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\114\001\001\000\002\001\001\000\004" +
    "\034\115\001\001\000\004\035\122\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\121\001\001\000\002" +
    "\001\001\000\004\036\127\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\126\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\133\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\136\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\141\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\144\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\147\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\152\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\155\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\160\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\163\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\167\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserDB$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserDB$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserDB$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	private List<ReportError> listaErrores;
	private List<Captcha> listaCaptchas =  new ArrayList<Captcha>();
	private List<Simbolo> listaSimbolo = new ArrayList<Simbolo>();

	public ParserDB(LexerDB lex){
		super(lex);
		listaErrores = new ArrayList<ReportError>();
	}
	 @Override
	public void syntax_error(Symbol cur_token){
			Token token = (Token) cur_token.value;
			String nombreSimbolo = symbl_name_from_id(cur_token.sym);
			if(nombreSimbolo.equals("INVALID")){
				addError("Lexico",token,"No se esperaba: " + token.getLexema(),null);
			}else{
				addError("Sintactico",token,"No se esperaba: " + nombreSimbolo,null);
			}		

	}
	 @Override
	public void report_fatal_error(String message, Object info){
			String Elerror = "Ocurrio un error no recuperable al analizar: " + message + " -> {objeto: " + info + "}";

			if(info instanceof Symbol ){
				Symbol sim = (Symbol) info;
				Token token = (Token) sim.value;
				addError("Sintactico",token,message,null);
			}else{
				System.out.println("Error -- :  " + message);
			}
	}
	 @Override
	public void report_error(String message, Object info){
			System.out.println("Error desde el report_error: " + message);
	}
	 @Override
	public void unrecovered_syntax_error(Symbol cur_token){
		report_fatal_error("No se puede reparar y analizar el Error sintactico", cur_token);
	}

	private void addError(String tipoError, Token token,String descError, String solucion){
			ReportError reporte = new ReportError();
			reporte.setTipoError(tipoError);
			reporte.setColumna(token.getColumna());
			reporte.setLinea(token.getLinea());
			if (solucion == null) {
                reporte.setSolucion(listTokensEsperados());
            }else{
                reporte.setSolucion(solucion);
            }
			reporte.setDescripcion(descError);
			listaErrores.add(reporte);

	}
	private String listTokensEsperados(){
		String tokenEsperados = "";
		for (Integer expected_token_id : expected_token_ids()) {
            	if(!symbl_name_from_id(expected_token_id).equals("error")){
            		//String nameToken = nameTokenEsperado(symbl_name_from_id(expected_token_id));
            		String nameToken = symbl_name_from_id(expected_token_id);
            		if (nameToken == null){
            			tokenEsperados += "<p>"+symbl_name_from_id(expected_token_id) + "</p>";
            		}else{
            			tokenEsperados += "<p>"+nameToken + "</p>";
            		}            		
            	}                
            }
        return tokenEsperados;
	}

	public List getListaErrores(){
		return listaErrores;
	}
	 @Override
	protected int error_sync_size(){
		return 1;
	}

	public List getListCaptchas(){
		return listaCaptchas;
	}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserDB$actions {
  private final ParserDB parser;

  /** Constructor */
  CUP$ParserDB$actions(ParserDB parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserDB$do_action_part00000000(
    int                        CUP$ParserDB$act_num,
    java_cup.runtime.lr_parser CUP$ParserDB$parser,
    java.util.Stack            CUP$ParserDB$stack,
    int                        CUP$ParserDB$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserDB$result;

      /* select the action based on the action number */
      switch (CUP$ParserDB$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inicio ::= CAPTCHAS sig_inicio 
            {
              Token RESULT =null;

              CUP$ParserDB$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDB$stack.peek()), RESULT);
            }
          return CUP$ParserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-1)).right;
		Token start_val = (Token)((java_cup.runtime.Symbol) CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-1)).value;
		RESULT = start_val;
              CUP$ParserDB$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDB$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserDB$parser.done_parsing();
          return CUP$ParserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // sig_inicio ::= DOS_PUNTOS PAI captchas PAD 
            {
              Token RESULT =null;

              CUP$ParserDB$result = parser.getSymbolFactory().newSymbol("sig_inicio",1, ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-3)), ((java_cup.runtime.Symbol)CUP$ParserDB$stack.peek()), RESULT);
            }
          return CUP$ParserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sig_inicio ::= error 
            {
              Token RESULT =null;

              CUP$ParserDB$result = parser.getSymbolFactory().newSymbol("sig_inicio",1, ((java_cup.runtime.Symbol)CUP$ParserDB$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDB$stack.peek()), RESULT);
            }
          return CUP$ParserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // captchas ::= captchas captcha 
            {
              Token RESULT =null;

              CUP$ParserDB$result = parser.getSymbolFactory().newSymbol("captchas",2, ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDB$stack.peek()), RESULT);
            }
          return CUP$ParserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // captchas ::= captcha 
            {
              Token RESULT =null;

              CUP$ParserDB$result = parser.getSymbolFactory().newSymbol("captchas",2, ((java_cup.runtime.Symbol)CUP$ParserDB$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDB$stack.peek()), RESULT);
            }
          return CUP$ParserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // captcha ::= CAPTCHA sig_captcha 
            {
              Token RESULT =null;

              CUP$ParserDB$result = parser.getSymbolFactory().newSymbol("captcha",3, ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDB$stack.peek()), RESULT);
            }
          return CUP$ParserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sig_captcha ::= DOS_PUNTOS LLAI cont_captcha LLAD 
            {
              Token RESULT =null;

              CUP$ParserDB$result = parser.getSymbolFactory().newSymbol("sig_captcha",4, ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-3)), ((java_cup.runtime.Symbol)CUP$ParserDB$stack.peek()), RESULT);
            }
          return CUP$ParserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sig_captcha ::= error 
            {
              Token RESULT =null;

              CUP$ParserDB$result = parser.getSymbolFactory().newSymbol("sig_captcha",4, ((java_cup.runtime.Symbol)CUP$ParserDB$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDB$stack.peek()), RESULT);
            }
          return CUP$ParserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // cont_captcha ::= id html link nombre_captcha cant_u aciertos fallos l_fecha simbolos 
            {
              Token RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-8)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-8)).value;
		int htmlleft = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-7)).left;
		int htmlright = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-7)).right;
		Token html = (Token)((java_cup.runtime.Symbol) CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-7)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-6)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-6)).right;
		Token li = (Token)((java_cup.runtime.Symbol) CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-6)).value;
		int nCleft = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-5)).left;
		int nCright = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-5)).right;
		Token nC = (Token)((java_cup.runtime.Symbol) CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-5)).value;
		int cUleft = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-4)).left;
		int cUright = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-4)).right;
		Token cU = (Token)((java_cup.runtime.Symbol) CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-3)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-2)).right;
		Token f = (Token)((java_cup.runtime.Symbol) CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-2)).value;
		int lFleft = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-1)).left;
		int lFright = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-1)).right;
		Token lF = (Token)((java_cup.runtime.Symbol) CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-1)).value;
		
							String id = i.getLexema();
							String codigoHTML = html.getLexema();
							String link = li.getLexema();
							String nombreCaptcha = nC.getLexema();
							String cant_u = cU.getLexema();
							String aciertos = a.getLexema();
							String fallos = f.getLexema();
							String fecha = lF.getLexema();
							Captcha nuevo = new Captcha(id,codigoHTML,link,nombreCaptcha,listaSimbolo);
							nuevo.setCantUtilizados(Integer.valueOf(cant_u));
							nuevo.setCantAciertos(Integer.valueOf(aciertos));
							nuevo.setCantFallos(Integer.valueOf(fallos));
							nuevo.setLastFecha(fecha);
							listaCaptchas.add(nuevo);
							listaSimbolo = new ArrayList<Simbolo>();
							
						
              CUP$ParserDB$result = parser.getSymbolFactory().newSymbol("cont_captcha",5, ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-8)), ((java_cup.runtime.Symbol)CUP$ParserDB$stack.peek()), RESULT);
            }
          return CUP$ParserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // fin_instruccion ::= SEMI 
            {
              Token RESULT =null;

              CUP$ParserDB$result = parser.getSymbolFactory().newSymbol("fin_instruccion",6, ((java_cup.runtime.Symbol)CUP$ParserDB$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDB$stack.peek()), RESULT);
            }
          return CUP$ParserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // fin_instruccion ::= error 
            {
              Token RESULT =null;

              CUP$ParserDB$result = parser.getSymbolFactory().newSymbol("fin_instruccion",6, ((java_cup.runtime.Symbol)CUP$ParserDB$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDB$stack.peek()), RESULT);
            }
          return CUP$ParserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // id ::= ID IGUAL STRING fin_instruccion 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-1)).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-1)).value;
		RESULT = e;
              CUP$ParserDB$result = parser.getSymbolFactory().newSymbol("id",7, ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-3)), ((java_cup.runtime.Symbol)CUP$ParserDB$stack.peek()), RESULT);
            }
          return CUP$ParserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // html ::= CODIGO_HTML IGUAL STRING fin_instruccion 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-1)).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-1)).value;
		RESULT = e;
              CUP$ParserDB$result = parser.getSymbolFactory().newSymbol("html",8, ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-3)), ((java_cup.runtime.Symbol)CUP$ParserDB$stack.peek()), RESULT);
            }
          return CUP$ParserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // link ::= LINK IGUAL STRING fin_instruccion 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-1)).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-1)).value;
		RESULT = e;
              CUP$ParserDB$result = parser.getSymbolFactory().newSymbol("link",9, ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-3)), ((java_cup.runtime.Symbol)CUP$ParserDB$stack.peek()), RESULT);
            }
          return CUP$ParserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // nombre_captcha ::= NOMBRE_CAPTCHA IGUAL STRING fin_instruccion 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-1)).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-1)).value;
		RESULT = e;
              CUP$ParserDB$result = parser.getSymbolFactory().newSymbol("nombre_captcha",10, ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-3)), ((java_cup.runtime.Symbol)CUP$ParserDB$stack.peek()), RESULT);
            }
          return CUP$ParserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // cant_u ::= CANT_UTILIZADOS IGUAL STRING fin_instruccion 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-1)).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-1)).value;
		RESULT = e;
              CUP$ParserDB$result = parser.getSymbolFactory().newSymbol("cant_u",11, ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-3)), ((java_cup.runtime.Symbol)CUP$ParserDB$stack.peek()), RESULT);
            }
          return CUP$ParserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // aciertos ::= ACIERTOS IGUAL STRING fin_instruccion 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-1)).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-1)).value;
		RESULT = e;
              CUP$ParserDB$result = parser.getSymbolFactory().newSymbol("aciertos",12, ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-3)), ((java_cup.runtime.Symbol)CUP$ParserDB$stack.peek()), RESULT);
            }
          return CUP$ParserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // fallos ::= FALLOS IGUAL STRING fin_instruccion 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-1)).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-1)).value;
		RESULT = e;
              CUP$ParserDB$result = parser.getSymbolFactory().newSymbol("fallos",13, ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-3)), ((java_cup.runtime.Symbol)CUP$ParserDB$stack.peek()), RESULT);
            }
          return CUP$ParserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // l_fecha ::= LAST_FECHA IGUAL STRING fin_instruccion 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-1)).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-1)).value;
		RESULT = e;
              CUP$ParserDB$result = parser.getSymbolFactory().newSymbol("l_fecha",14, ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-3)), ((java_cup.runtime.Symbol)CUP$ParserDB$stack.peek()), RESULT);
            }
          return CUP$ParserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // simbolos ::= SIMBOLOS IGUAL PAI cont_simbolos_lambda PAD 
            {
              Token RESULT =null;

              CUP$ParserDB$result = parser.getSymbolFactory().newSymbol("simbolos",15, ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-4)), ((java_cup.runtime.Symbol)CUP$ParserDB$stack.peek()), RESULT);
            }
          return CUP$ParserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // simbolos ::= error 
            {
              Token RESULT =null;

              CUP$ParserDB$result = parser.getSymbolFactory().newSymbol("simbolos",15, ((java_cup.runtime.Symbol)CUP$ParserDB$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDB$stack.peek()), RESULT);
            }
          return CUP$ParserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // cont_simbolos_lambda ::= cont_simbolos 
            {
              Token RESULT =null;

              CUP$ParserDB$result = parser.getSymbolFactory().newSymbol("cont_simbolos_lambda",16, ((java_cup.runtime.Symbol)CUP$ParserDB$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDB$stack.peek()), RESULT);
            }
          return CUP$ParserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // cont_simbolos_lambda ::= 
            {
              Token RESULT =null;

              CUP$ParserDB$result = parser.getSymbolFactory().newSymbol("cont_simbolos_lambda",16, ((java_cup.runtime.Symbol)CUP$ParserDB$stack.peek()), RESULT);
            }
          return CUP$ParserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // cont_simbolos ::= cont_simbolos simbolo 
            {
              Token RESULT =null;

              CUP$ParserDB$result = parser.getSymbolFactory().newSymbol("cont_simbolos",17, ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDB$stack.peek()), RESULT);
            }
          return CUP$ParserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // cont_simbolos ::= simbolo 
            {
              Token RESULT =null;

              CUP$ParserDB$result = parser.getSymbolFactory().newSymbol("cont_simbolos",17, ((java_cup.runtime.Symbol)CUP$ParserDB$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDB$stack.peek()), RESULT);
            }
          return CUP$ParserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // simbolo ::= LLAI cont_sim LLAD 
            {
              Token RESULT =null;

              CUP$ParserDB$result = parser.getSymbolFactory().newSymbol("simbolo",18, ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDB$stack.peek()), RESULT);
            }
          return CUP$ParserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // simbolo ::= error 
            {
              Token RESULT =null;

              CUP$ParserDB$result = parser.getSymbolFactory().newSymbol("simbolo",18, ((java_cup.runtime.Symbol)CUP$ParserDB$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDB$stack.peek()), RESULT);
            }
          return CUP$ParserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // cont_sim ::= pos iden tipo valor modo process n_e p_d p_d_e 
            {
              Token RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-8)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-8)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-7)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-6)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-6)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-5)).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-5)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-4)).right;
		Token m = (Token)((java_cup.runtime.Symbol) CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-4)).value;
		int proleft = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-3)).left;
		int proright = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-3)).right;
		Token pro = (Token)((java_cup.runtime.Symbol) CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-3)).value;
		int nEleft = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-2)).left;
		int nEright = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-2)).right;
		Token nE = (Token)((java_cup.runtime.Symbol) CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-2)).value;
		int pDleft = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-1)).left;
		int pDright = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-1)).right;
		Token pD = (Token)((java_cup.runtime.Symbol) CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-1)).value;
		int pDEleft = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.peek()).left;
		int pDEright = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.peek()).right;
		Token pDE = (Token)((java_cup.runtime.Symbol) CUP$ParserDB$stack.peek()).value;
		
					int posicion = Integer.valueOf(p.getLexema());
					String ident = i.getLexema();
					String tipo = t.getLexema();
					String valor = v.getLexema();
					String modo = m.getLexema();
					String procedimiento = pro.getLexema();
					int noEjecucion = Integer.valueOf(nE.getLexema());
					int procesoDeclarado = Integer.valueOf(pD.getLexema());
					int procesoDeclaradoEstruc = Integer.valueOf(pDE.getLexema());
					Simbolo simbol = new Simbolo(ident, tipo,valor,modo);
					simbol.setPosicion(posicion);
					simbol.setProcedimiento(procedimiento);
					simbol.setNoEjecucion(noEjecucion);
					simbol.setProcesoDeclarado(procesoDeclarado);
					simbol.setProcesoDeclaradoEstruc(procesoDeclaradoEstruc);
					listaSimbolo.add(simbol);

				
              CUP$ParserDB$result = parser.getSymbolFactory().newSymbol("cont_sim",19, ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-8)), ((java_cup.runtime.Symbol)CUP$ParserDB$stack.peek()), RESULT);
            }
          return CUP$ParserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // pos ::= POSICION IGUAL STRING fin_instruccion 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-1)).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-1)).value;
		RESULT = e;
              CUP$ParserDB$result = parser.getSymbolFactory().newSymbol("pos",20, ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-3)), ((java_cup.runtime.Symbol)CUP$ParserDB$stack.peek()), RESULT);
            }
          return CUP$ParserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // iden ::= IDENTIFICADOR IGUAL STRING fin_instruccion 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-1)).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-1)).value;
		RESULT = e;
              CUP$ParserDB$result = parser.getSymbolFactory().newSymbol("iden",21, ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-3)), ((java_cup.runtime.Symbol)CUP$ParserDB$stack.peek()), RESULT);
            }
          return CUP$ParserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // tipo ::= TIPO IGUAL STRING fin_instruccion 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-1)).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-1)).value;
		RESULT = e;
              CUP$ParserDB$result = parser.getSymbolFactory().newSymbol("tipo",22, ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-3)), ((java_cup.runtime.Symbol)CUP$ParserDB$stack.peek()), RESULT);
            }
          return CUP$ParserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // valor ::= VALOR IGUAL STRING fin_instruccion 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-1)).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-1)).value;
		RESULT = e;
              CUP$ParserDB$result = parser.getSymbolFactory().newSymbol("valor",23, ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-3)), ((java_cup.runtime.Symbol)CUP$ParserDB$stack.peek()), RESULT);
            }
          return CUP$ParserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // modo ::= MODO IGUAL STRING fin_instruccion 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-1)).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-1)).value;
		RESULT = e;
              CUP$ParserDB$result = parser.getSymbolFactory().newSymbol("modo",24, ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-3)), ((java_cup.runtime.Symbol)CUP$ParserDB$stack.peek()), RESULT);
            }
          return CUP$ParserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // process ::= PROCEDIMIENTO IGUAL STRING fin_instruccion 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-1)).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-1)).value;
		RESULT = e;
              CUP$ParserDB$result = parser.getSymbolFactory().newSymbol("process",25, ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-3)), ((java_cup.runtime.Symbol)CUP$ParserDB$stack.peek()), RESULT);
            }
          return CUP$ParserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // n_e ::= N_E IGUAL STRING fin_instruccion 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-1)).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-1)).value;
		RESULT = e;
              CUP$ParserDB$result = parser.getSymbolFactory().newSymbol("n_e",26, ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-3)), ((java_cup.runtime.Symbol)CUP$ParserDB$stack.peek()), RESULT);
            }
          return CUP$ParserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // p_d ::= P_D IGUAL STRING fin_instruccion 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-1)).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-1)).value;
		RESULT = e;
              CUP$ParserDB$result = parser.getSymbolFactory().newSymbol("p_d",27, ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-3)), ((java_cup.runtime.Symbol)CUP$ParserDB$stack.peek()), RESULT);
            }
          return CUP$ParserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // p_d_e ::= P_D_E IGUAL STRING fin_instruccion 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-1)).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-1)).value;
		RESULT = e;
              CUP$ParserDB$result = parser.getSymbolFactory().newSymbol("p_d_e",28, ((java_cup.runtime.Symbol)CUP$ParserDB$stack.elementAt(CUP$ParserDB$top-3)), ((java_cup.runtime.Symbol)CUP$ParserDB$stack.peek()), RESULT);
            }
          return CUP$ParserDB$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserDB$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserDB$do_action(
    int                        CUP$ParserDB$act_num,
    java_cup.runtime.lr_parser CUP$ParserDB$parser,
    java.util.Stack            CUP$ParserDB$stack,
    int                        CUP$ParserDB$top)
    throws java.lang.Exception
    {
              return CUP$ParserDB$do_action_part00000000(
                               CUP$ParserDB$act_num,
                               CUP$ParserDB$parser,
                               CUP$ParserDB$stack,
                               CUP$ParserDB$top);
    }
}

}

/*codigo de usuario*/
package com.mycompany.p2c1.ReglasGram.gcic;
import com.mycompany.p2c1.ReglasGram.Token;
import java_cup.runtime.*;
import com.mycompany.p2c1.ReglasGram.Funciones.*;
import com.mycompany.p2c1.ReglasGram.gcic.symGCIC.*;
import com.mycompany.p2c1.ReglasGram.insert.*;
import com.mycompany.p2c1.objetos.*;
import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.util.Set;
import java.io.BufferedReader;
import java.nio.charset.StandardCharsets;
import java.io.Reader;
import java.io.StringReader;

parser code {:


	private List<ReportError> listaErrores;
	private String codigoHTML = "";
	private String losEstilos = "";
	private String id = "id";
	private String link_salida = "#";
	private String nombre_captcha = "";
	private boolean isParameterGCIC = true;
	private boolean isParameterLINK = false;
	private HashMap<String,Token> atributos= new HashMap();
	private HashMap<String,Token> listaIdsEtiquetas= new HashMap();
	private FuntionsTablaSimbolos funTablaSim =  new FuntionsTablaSimbolos();	

	//funciones
	private int procesoActual= 0;
	private int procesoActualEstructura= 0;
	private String tipoVariable = null;
	private int posicionVar = 1;
	private List<Token> listaVariablesActuales = new ArrayList<Token>();
	private String procedimientoActual = "";
	private FunctionsOLM funOLM = new FunctionsOLM();
	private FunctionsSpecials funSpecials = new FunctionsSpecials();
	private int cantOnLoad = 0;

	//prueba para el codigoHTML
	private List<String> listaCodigoHTML = new ArrayList<String>();
	private String codigoHTML1 = "";
	private String codigoHTMLVarGlobal = "";
	private boolean isGlobal = false;

	private boolean isEstruc =false;

	public ParserGCIC(LexerGCIC lex){
		super(lex);
		listaErrores = new ArrayList<ReportError>();
	}
	 @Override
	public void syntax_error(Symbol cur_token){
			Token token = (Token) cur_token.value;
			/*			            
            String tokenEsperados = "Tokens esperados: ";
            tokenEsperados += listTokensEsperados();
			String msgError =  "Error: ( "+ token.getLexema() +" ) -> {Linea: "+cur_token.left+", Columna: "+ cur_token.right +" } " + tokenEsperados;
			listaErrores.add(msgError);
			*/

			String nombreSimbolo = symbl_name_from_id(cur_token.sym);
			if(nombreSimbolo.equals("INVALID")){
				addError("Lexico",token,"No se esperaba: " + token.getLexema(),null);
			}else{
				addError("Sintactico",token,"No se esperaba: " + token.getLexema(),null);
			}		

	}
	 @Override
	public void report_fatal_error(String message, Object info){
			String Elerror = "Ocurrio un error no recuperable al analizar: " + message + " -> {objeto: " + info + "}";

			if(info instanceof Symbol ){
				Symbol sim = (Symbol) info;
				Token token = (Token) sim.value;
				/*
				String msgError =  "Error: ( "+ token.getLexema() +" ) -> {Linea: "+sim.left+", Columna: "+ sim.right +" } ";
				listaErrores.add(msgError);
				*/
				addError("Sintactico",token,message,null);
			}else{
				System.out.println("Error -- :  " + message);
			}

			//listaErrores.add(Elerror);	
	}
	 @Override
	public void report_error(String message, Object info){
			System.out.println("Error desde el report_error: " + message);
	}
	 @Override
	public void unrecovered_syntax_error(Symbol cur_token){
		report_fatal_error("No se puede reparar y analizar el Error sintactico", cur_token);
	}

	private void addError(String tipoError, Token token,String descError, String solucion){
			ReportError reporte = new ReportError();
			reporte.setTipoError(tipoError);
			reporte.setColumna(token.getColumna());
			reporte.setLinea(token.getLinea());
			if (solucion == null) {
                reporte.setSolucion(listTokensEsperados());
            }else{
                reporte.setSolucion(solucion);
            }
			reporte.setDescripcion(descError);
			listaErrores.add(reporte);

	}
	private String listTokensEsperados(){
		String tokenEsperados = "";
		for (Integer expected_token_id : expected_token_ids()) {
            	if(!symbl_name_from_id(expected_token_id).equals("error")){
            		String nameToken = nameTokenEsperado(symbl_name_from_id(expected_token_id));
            		if (nameToken == null){
            			tokenEsperados += "<p>"+symbl_name_from_id(expected_token_id) + "</p>";
            		}else{
            			tokenEsperados += "<p>"+nameToken + "</p>";
            		}            		
            	}                
            }
        return tokenEsperados;
	}

	public List getListaErrores(){
		return listaErrores;
	}
	public String getCodigoHTML(){
		if(listaCodigoHTML.size() == 0){
			return codigoHTML;
		}else{
			String allCodeHTML = "";
			for(String code : listaCodigoHTML){
				allCodeHTML += code;
			}
			allCodeHTML += codigoHTML;
			return allCodeHTML;
		}
		
	}
	public String getId(){
		return id;
	}
	public String getLinkSalida(){
		return link_salida;
	}
	public String getNombreCaptcha(){
		return nombre_captcha;
	}
	public List getListaSimbolos(){
		return funTablaSim.getListaSimbolos();
	}
	 @Override
	protected int error_sync_size(){
		return 1;
	}
	private String nameTokenEsperado(String nameToken){
		switch (nameToken){
			case "MENQ" : return "<";
			case "CORI" : return "[";
			case "CORD" : return "]";
			case "IGUAL" : return "=";
			case "STRING" : return "string";
			case "STRING_WS" : return "string sin espacios";
			case "MAQ" : return ">";
			case "DIAG" : return "/";
			case "STRING_TOTAL" : return "cadena de texto";
			case "ID_VARIABLE" : return "nombre de una variable";
			case "NOMBRE_FUNCION" : return "nombre de funcion (PROCESS_(nombre de una funcion con letras a-z o A-Z))";
			case "LLAI" : return "{";
			case "LLAD" : return "}";
			case "DOS_PUNTOS" : return ":";
			case "COMA" : return ",";
			case "ADMIRACION" : return "!";
			case "SEMI" : return ";";
			case "BARRA90" : return "|";
			case "AND_1" : return "&";
			case "SUMA" : return "+";
			case "MENOS" : return "-";
			case "MULT" : return "*";
			case "GET_ELEMENT_BY_ID" : return "getElemenById";
			case "IGUALACION" : return "==";
			case "MEN_QUE" : return "<=";
			case "MAY_QUE" : return ">=";
			case "DIFERENTE" : return "!=";
			case "CHAR" : return "caracter";
			case "DECIMAL" : return "numero decimal";
			case "BOOLEAN" : return "true or false";
			case "INVALID" : return "caracter cualquiera";
			case "ID_ELEMENT" : return "string encerrado entre comillas simples";
			case "ENTERO": return "numero entero";
			case "PAI" : return "(";
			case "PAD": return ")";
			case "PARAMETRO": return "Algun Parametro aceptable Ejemplo:id";
            default: return null;
		}
	}

	private String parametrosCss(String param){
			switch (param){
			case "href" : return "href";
			case "background" : return "background-color";
			case "color" : return "color";
			case "font-size" : return "font-size";
			case "font-family" : return "font-family";
			case "type" : return "type";
			case "id" : return "id";
			case "name" : return "name";
			case "cols" : return "cols";
			//case "rows" : return "";
			//case "class" : return "";
			//case "src" : return "";
			//case "width" : return "";
			//case "height" : return "";
			//case "alt" : return "";
			//case "onclick" : return "";
			case "text-align" : return "text-align";
			 default: return param;
		}
	}
	private boolean isParametrosCss(String param){
		switch (param){
			case "background" : return true;
			case "color" : return true;
			case "font-size" : return true;
			case "font-family" : return true;
			case "text-align" : return true;
			default: return false;
		}
	}
	private void verificarAtributos(String newAtriuto, Token token){
		if(atributos.get(newAtriuto) == null){
			atributos.put(newAtriuto,token);
		}else{
			addError("Semantico",token,"Esta repetido el atributo: " + newAtriuto, "Elimine el atributos repetido");
		}
	}
	private void verificarIds(Token id, Token lexema){
		Token aux = listaIdsEtiquetas.get(lexema.getLexema());
		if(aux == null){
			listaIdsEtiquetas.put(lexema.getLexema(),lexema);
		}else{
			addError("Semantico",lexema,"El id esta repetido en la linea: " + aux.getLinea() +" y columna: " + aux.getColumna() 
			, "Cambie el id de la etiqueta");
		}
	}
	private void verificarAtributosEtiquetas(String etiqueta, Token token){
		switch(etiqueta){
			case "C_GCIC":{
				if(atributos.remove("id") == null){
					addError("Semantico",token,"La Eitqueta C_GCIC no contiene el id", "Agregue la etiqueta 'id' en C_GCIC");
				}
				atributos.remove("name");
				break;
			}
			case "C_LINK":{
				atributos.remove("href");
				break;
			}
			case "C_BODY":{
				atributos.remove("background");
				break;
			}
			case "span":{
				atributos.remove("font-size");
				atributos.remove("font-family");
				atributos.remove("text-align");
				atributos.remove("id");
				atributos.remove("color");
				etiqueta = "C_SPAM";
				break;
			}
			case "input":{
				atributos.remove("type");
				atributos.remove("font-size");
				atributos.remove("font-family");
				atributos.remove("text-align");
				atributos.remove("id");
				atributos.remove("color");
				etiqueta = "C_INPUT";
				break;
			}
			case "textarea":{
				atributos.remove("rows");
				atributos.remove("cols");
				atributos.remove("font-size");
				atributos.remove("font-family");
				atributos.remove("text-align");
				atributos.remove("id");
				etiqueta = "C_TEXTAREA";
				break;
			}
			case "select":{
				atributos.remove("font-size");
				atributos.remove("font-family");
				atributos.remove("text-align");
				atributos.remove("id");
				atributos.remove("color");
				etiqueta = "C_SELECT";
				break;
			}
			case "div":{
				atributos.remove("background");
				atributos.remove("class");
				atributos.remove("font-size");
				atributos.remove("font-family");
				atributos.remove("text-align");
				atributos.remove("id");
				atributos.remove("color");
				etiqueta = "C_DIV";
				break;
			}
			case "img":{
				atributos.remove("src");
				atributos.remove("width");
				atributos.remove("height");
				atributos.remove("id");
				atributos.remove("alt");
				etiqueta = "C_IMG";
				break;
			}
			case "button":{
				atributos.remove("background");
				atributos.remove("onclick");
				atributos.remove("font-size");
				atributos.remove("font-family");
				atributos.remove("text-align");
				atributos.remove("id");
				atributos.remove("color");
				etiqueta = "C_BUTTON";
				break;
			}
			case "h1":{
				atributos.remove("font-size");
				atributos.remove("font-family");
				atributos.remove("text-align");
				atributos.remove("id");
				atributos.remove("color");
				etiqueta = "C_H1";
				break;
			}
			case "p":{
				atributos.remove("font-size");
				atributos.remove("font-family");
				atributos.remove("text-align");
				atributos.remove("id");
				atributos.remove("color");
				etiqueta = "C_P";
				break;
			}
			default:break;
		}
		if (atributos.size() > 0){
            Set<String> keySet = atributos.keySet();
                for (String string : keySet) {
                    addError("Semantico",atributos.get(string),
                      "El Parametro " + string + " No es parte de la etiqueta " + etiqueta
                       , "Elimine el parametro: ' "+ string + " ' en " +etiqueta);
            }
                    
		}
	}
	

:}

/*terminales*/
terminal Token MENQ, C_GCIC, CORI, PARAMETRO, IGUAL;
terminal Token STRING, STRING_WS, CORD,MAQ, DIAG;
terminal Token C_HEAD,C_LINK,C_TITLE,STRING_TOTAL,ID_VARIABLE,C_BODY;
terminal Token C_SPAM, C_INPUT,C_TEXTAREA,C_SELECT,C_OPTION,C_DIV,C_IMG,C_BR,C_BUTTON,C_H1,C_P,C_SCRIPTING;
terminal Token ON_LOAD,NOMBRE_FUNCION,PAI,PAD,LLAI, LLAD;
terminal Token DOS_PUNTOS,COMA,ADMIRACION,SEMI,BARRA90,AND_1;
terminal Token SUMA, MENOS, MULT,INSERT,GET_ELEMENT_BY_ID,IGUALACION,MEN_QUE,MAY_QUE,DIFERENTE;
terminal Token CHAR,ENTERO,DECIMAL,BOOLEAN,INVALID;
terminal Token ASC,DESC,LETPAR_NUM,LETIMPAR_NUM,REVERSE,CARACTER_ALEATORIO,NUM_ALEATORIO;
terminal Token ALERT_INFO,EXIT,GLOBAL,ID_INTEGER,ID_STRING,ID_BOOLEAN,ID_DECIMAL,ID_CHAR;
terminal Token IF,ELSE,THEN,INIT,END,REPEAT,HUNTIL,WHILE;
terminal Token THENWHILE, ID_ELEMENT;


/*no terminales*/
non terminal Token inicio,etiqueta_gcic,inicio_gcic,parametros_etiquetas,varios_parametro_etiqueta;
non terminal Token parametro_etiqueta,inicio_param_etiq,string;
non terminal Token fin_param_etiq,cierre_etiqueta,fin_etiqueta_gcic,pre_fin_etiq,cierre_gcic,head,etiqueta_head,inicio_head;
non terminal Token fin_etiqueta_head,cierre_head,link,etiqueta_link,inicio_link,fin_etiqueta_link,cierre_link,title;
non terminal Token etiqueta_title,inicio_title,fin_etiqueta_title,cierre_title,cont_etiqueta,varios_contenido,todo_contenido,cont_head;
non terminal Token etiquetas_para_head,etiqueta_para_head,body,etiqueta_body,inicio_body;
non terminal Token fin_etiqueta_body,cierre_body,cont_body,etiquetas_para_body,etiqueta_para_body;
non terminal Token c_etiqueta_g,etq_generica;
non terminal Token etiqueta_g,cont_etq_g,varios_contenido_g,un_cont_etq_g,inicio_g, fin_etiqueta_g,cierre_g;
non terminal Token etiqueta_br,inicio_br,scripting,etiqueta_scripting,inicio_scripting,fin_etiqueta_scripting;
non terminal Token cierre_scripting,cont_scripting,funciones,functions,on_load,process_,funcion_on_load,name_on_load,parentesis;
non terminal Token funcion_process_,name_funcion_g,cont_funcion,inicio_funcion,fin_funcion,funcion,tipos_instrucciones,tipo_instruccion;
non terminal Token expr_list, expr,estruc_init,inicio_init,el_init,fin_estruct,ini_estruct;
non terminal Token declaracion_asginacion,fin_instruccion;
non terminal Token declaracion,tipo_dato,modo,nombre_variable,otras_variables,otra_variable,nombre_otra_variable,id_variable;
non terminal Token asignacion,tipos_datos,cont_element_by_id;
non terminal Token estruc_if,if,condicion,condicion_f,cont_estruc_if,estruc_else_if,else_if,un_else_if,inicio_else_if,estruc_else,else,inicio_else;
non terminal Token fin_instruccion_error,funciones_especiales,funciones_especiales_parametros,funciones_especiales_sin_parametros;
non terminal Token funciones_especiales_sin_tipo_return;
non terminal Token estruc_repeat,asig_decla_repeat,declaracion_asginacion_repeat,declaracion_repeat,asignacion_repeat,huntil;
non terminal Token estruc_while,thenwhile;
non terminal Token insert,estruc_cont_insert,cont_insert;
non terminal Token instrucciones,instrucciones_para_if;

/*precedencia*/

precedence left SUMA, MENOS,COMA;
precedence left MULT,DIAG;
precedence left IGUALACION,MEN_QUE,MAY_QUE,DIFERENTE,MAQ,MENQ;
precedence left BARRA90;
precedence left AND_1;
precedence left ADMIRACION;

/*gramatica*/

inicio ::= etiqueta_gcic head body fin_etiqueta_gcic
			;

etiqueta_gcic ::= inicio_gcic:e parametros_etiquetas
							{:
								codigoHTML += "<html>\n";
								isParameterGCIC = false;
								verificarAtributosEtiquetas(e.getNombreToken(),e);
							:}
					;

inicio_gcic ::= MENQ C_GCIC:e
					{:
						e.setNombreToken("C_GCIC");
						RESULT = e;
					:}
				|error
				;

parametros_etiquetas ::= varios_parametro_etiqueta:e MAQ
							{:
								RESULT = e;
							:}
						|MAQ:e
							{:
								e.setNombreToken("");
								RESULT = e;
							:}
						|error
						;

varios_parametro_etiqueta ::=  varios_parametro_etiqueta:e parametro_etiqueta:e1
									{:
										if(e.getNombreToken() == null){
											e.setNombreToken(e1.getNombreToken());
										}else if(e1.getNombreToken() != null){
											e.setNombreToken(e.getNombreToken() + " " + e1.getNombreToken());
										}									
										RESULT = e;
									:}
								|parametro_etiqueta:e
									{:
										RESULT = e;
									:}
								;

parametro_etiqueta ::= inicio_param_etiq:e1 string:e2 fin_param_etiq
							{:
								if(id==null){
									id = e2.getLexema();
								}else if(nombre_captcha == null){
									nombre_captcha = e2.getLexema();
								}
								if(isParameterLINK && link_salida == null){
									link_salida = e2.getLexema();
								}
								if(e1.getLexema().equals("id")){
									verificarIds(e1,e2);
								}
								if(isParametrosCss(e1.getLexema())){
									losEstilos += e2.getLexema() + ";";
								}else{
									e1.setNombreToken(e1.getNombreToken() + e2.getLexema() + "\"");
								}
								RESULT = e1;
							:}
						;

inicio_param_etiq ::=	CORI PARAMETRO:e IGUAL
							{:
								verificarAtributos(e.getLexema(),e);
								if(isParameterGCIC){
									if(e.getLexema().equals("id")){
										id = null;
									} else if(e.getLexema().equals("name")){
										nombre_captcha = null;
									}
								}
								if(isParameterLINK){
									if(e.getLexema().equals("href")){
										link_salida =  null;
									}
								}
								if(isParametrosCss(e.getLexema())){
									losEstilos += parametrosCss(e.getLexema()) + ":";
								}else{
									e.setNombreToken(parametrosCss(e.getLexema()) + "=\"");
								}								
								RESULT = e;
							:}
					  	;

string ::=	STRING:e {: RESULT = e;:}
			|STRING_WS:e {: RESULT = e;:}
			|error
			;

fin_param_etiq ::= 	CORD
					|error
					;

cierre_etiqueta ::= MAQ
					|error
					;

fin_etiqueta_gcic ::= 	pre_fin_etiq cierre_gcic
							{:
								codigoHTML += "</html>";
							:}
						|error
						;
pre_fin_etiq ::= MENQ DIAG 
				;
cierre_gcic ::= C_GCIC MAQ
				|error
				;


head ::= etiqueta_head cont_head fin_etiqueta_head
		;
etiqueta_head ::= 	inicio_head cierre_etiqueta
						{:
							codigoHTML += "<head>\n";
						:}
				 	;
inicio_head ::= MENQ C_HEAD
				|error
				;
fin_etiqueta_head ::= 	pre_fin_etiq cierre_head
							{:
								codigoHTML += "<link rel=\"stylesheet\" href=\"estilos/default.css\">\n";								
								codigoHTML += "</head>\n";
							:}
						|error C_HEAD
						;
cierre_head ::= C_HEAD MAQ
				|error 
				;

cont_head ::= 	cont_head etiqueta_para_head
				|etiqueta_para_head
				;

etiquetas_para_head ::= etiquetas_para_head etiqueta_para_head
					|etiqueta_para_head
					;

etiqueta_para_head ::= link
				  |title
				  |error parametros_etiquetas
				  ;

link ::= etiqueta_link fin_etiqueta_link
		;
etiqueta_link ::= 	inicio_link:e
							{:
								isParameterLINK = true;
								atributos.clear();
							:}
					 parametros_etiquetas
							{:
								verificarAtributosEtiquetas(e.getNombreToken(),e);
								isParameterLINK = false;
							:}
					;
inicio_link ::= MENQ C_LINK:e
					{:
						e.setNombreToken("C_LINK");
						RESULT = e;
					:}
				;
fin_etiqueta_link ::= pre_fin_etiq cierre_link
						|error C_LINK
						;
cierre_link ::= C_LINK MAQ
				|error
				;

title ::= etiqueta_title cont_etiqueta:e
				{:
							codigoHTML += e.getLexema();
				:}
			 fin_etiqueta_title
			;

etiqueta_title ::= inicio_title cierre_etiqueta
						{:
							codigoHTML += "<title>";
						:}
					;
inicio_title ::= MENQ C_TITLE
				;
fin_etiqueta_title ::= pre_fin_etiq cierre_title
							{:
								codigoHTML += "</title>\n";
							:}							
						|error
						;
cierre_title ::= 	C_TITLE MAQ
					|error
					;

cont_etiqueta ::=  	varios_contenido:e
						{:
							RESULT = e;
						:}						
					|
					;

varios_contenido ::= varios_contenido:e todo_contenido:e1
						{:
							if(e.getNombreToken() != null){
								e.setLexema(e.getLexema() + e1.getLexema());
								e.setNombreToken(null);
							}else if( e1.getNombreToken() != null){
								e.setLexema(e.getLexema() + e1.getLexema());
								e.setNombreToken("INVALID");
							}
							else{
								e.setLexema(e.getLexema() + " " + e1.getLexema());
							}														
							RESULT = e;
						:}
					|todo_contenido:e
						{:											
							RESULT = e;
						:}
					;

todo_contenido ::= STRING:e {: RESULT = e;:}
					|STRING_WS:e {: RESULT = e;:}
					|STRING_TOTAL:e {: RESULT = e;:}
					|ID_VARIABLE:e {: RESULT = e;:}
					|ID_ELEMENT:e {: RESULT = e;:}
					|MULT:e {: RESULT = e;:}
					|SUMA :e {: RESULT = e;:}
					|MENOS:e {: RESULT = e;:}
					|BARRA90:e {: RESULT = e;:}
					|DIAG:e {: RESULT = e;:}
					|CORD:e {: RESULT = e;:}
					|CORI:e {: RESULT = e;:}
					|IGUAL:e {: RESULT = e;:}
					|LLAI:e {: RESULT = e;:}
					|LLAD:e {: RESULT = e;:}
					|COMA:e {: RESULT = e;:}
					|SEMI:e {: RESULT = e;:}
					|DOS_PUNTOS:e {: RESULT = e;:}
					|ADMIRACION:e {: RESULT = e;:}
					|AND_1:e {: RESULT = e;:}
					|PAI:e {: RESULT = e;:}
					|PAD:e {: RESULT = e;:}
					|CHAR:e {: RESULT = e;:}
					|ENTERO:e {: RESULT = e;:}
					|DECIMAL:e {: RESULT = e;:}
					|BOOLEAN:e {: RESULT = e;:}
					|INVALID:e {: e.setNombreToken("INVALID"); RESULT = e;:}
					;

body ::= etiqueta_body cont_body fin_etiqueta_body
		;

etiqueta_body ::= inicio_body:e0
						{:
							losEstilos = "";
							atributos.clear();
						:}
				 parametros_etiquetas:e
						{:
							if(e.getNombreToken() == null){
								e.setNombreToken("");
							}
							codigoHTML += "<body "+ e.getNombreToken() +" style=\"" + losEstilos + "\" >\n";
							verificarAtributosEtiquetas(e0.getNombreToken(),e0);
							codigoHTML += "<script>\n";
							codigoHTML += funSpecials.getCharRandom();
							codigoHTML += funSpecials.getLetParNum();
							codigoHTML += funSpecials.getLetImparNum();
							codigoHTML += "</script>\n";
						:}
					;

inicio_body ::= MENQ C_BODY:e
						{:
							e.setNombreToken("C_BODY");
							RESULT = e;
						:}
				|error
				;
fin_etiqueta_body ::= 	pre_fin_etiq cierre_body
							{:
								codigoHTML += "</body>\n";
							:}
						|error C_BODY
						;
cierre_body ::= C_BODY MAQ
				|error
				;
cont_body ::= 	cont_body etiqueta_para_body
				|etiqueta_para_body
				;



etiqueta_para_body ::= 	etq_generica
						|etiqueta_br
						|scripting
						|error parametros_etiquetas
						;
c_etiqueta_g ::=		 C_SPAM:e {:e.setNombreToken("span"); RESULT = e;:}
						|C_INPUT:e {: e.setNombreToken("input"); RESULT = e;:}
						|C_TEXTAREA:e {: e.setNombreToken("textarea"); RESULT = e;:}
						|C_SELECT:e {: e.setNombreToken("select");  RESULT = e;:}
						|C_OPTION:e {:  e.setNombreToken("option");RESULT = e;:}
						|C_DIV:e {:  e.setNombreToken("div");RESULT = e;:}
						|C_IMG:e {: e.setNombreToken("img"); RESULT = e;:}
						|C_BUTTON:e {: e.setNombreToken("button"); RESULT = e;:}
						|C_H1:e {:  e.setNombreToken("h1");RESULT = e;:}
						|C_P:e {: e.setNombreToken("p"); RESULT = e;:}
						;

etq_generica ::= etiqueta_g:e0 cont_etq_g
						{:
							/*if(e != null){
								codigoHTML += e.getLexema();
							}*/							
						:}
				 fin_etiqueta_g:e1
				 		{:
				 			if(!e0.getNombreToken().equals(e1.getNombreToken())){
				 				/*listaErrores.add("Error: ( "+ e1.getLexema() +" ) -> {Linea: "+e1.getLinea()+", Columna: "+e1.getColumna() +" }: Se esperaba la etiqueta: " + e0.getLexema() );*/
				 				addError("Sintactico",e1,e1.getLexema(),"Se esperaba la etiqueta: " + e0.getLexema());
				 			}


				 		:}
			;
etiqueta_g ::= 	inicio_g:e0
					{:
						losEstilos = "";
						atributos.clear();
					:}
				 parametros_etiquetas:e
					{:
						if(e != null){
							if(e.getNombreToken() == null){
								e.setNombreToken("");
							}
							if(e.getNombreToken().equals("input")){
								codigoHTML += "<"+e0.getNombreToken() + " " + e.getNombreToken() +" style=\"" + losEstilos + "\" value=\"";
							}else{
								codigoHTML += "<"+e0.getNombreToken() + " " + e.getNombreToken() +" style=\"" + losEstilos + "\" >";
							}
							verificarAtributosEtiquetas(e0.getNombreToken(),e0);
						}
						 RESULT = e0;
					:}
					;

cont_etq_g ::=  varios_contenido_g
				|varios_contenido:e
					{:
						if(e != null){
							codigoHTML += e.getLexema();
						}
					:}
				|
				;

varios_contenido_g ::= varios_contenido_g un_cont_etq_g
						|un_cont_etq_g
						;

 un_cont_etq_g ::= etq_generica
				|etiqueta_br
				|scripting
				;
inicio_g ::= MENQ c_etiqueta_g:e {: RESULT = e;:}
				;
fin_etiqueta_g ::= 	pre_fin_etiq cierre_g:e
						{:
							if(e.getNombreToken().equals("input")){
								codigoHTML += "\">\n";
							}else{
								codigoHTML += "</"+e.getNombreToken() +">\n";
							}
							 RESULT = e;
						:}
					|error
					;
cierre_g ::= 	c_etiqueta_g:e MAQ {: RESULT = e;:}
				|error
				;

etiqueta_br ::= inicio_br cierre_etiqueta
					{:
						codigoHTML += "<br>\n";
					:}
				;
inicio_br ::= MENQ C_BR
				;

scripting ::= 	etiqueta_scripting cont_scripting 
				;
etiqueta_scripting ::= inicio_scripting cierre_etiqueta
							{:
								cantOnLoad = 0;
								codigoHTML += "<script>\n";
								listaCodigoHTML.add(codigoHTML);
								codigoHTML = "";
								
							:}
						;
inicio_scripting ::= MENQ C_SCRIPTING
						;
fin_etiqueta_scripting ::= pre_fin_etiq cierre_scripting
								{:
									codigoHTML += "</script>\n";
									listaCodigoHTML.add(codigoHTMLVarGlobal);
									listaCodigoHTML.add(codigoHTML);
									codigoHTML = "";
									codigoHTMLVarGlobal = "";
								:}
							|error C_SCRIPTING
							;
cierre_scripting ::= 	C_SCRIPTING MAQ
						|error
						;

cont_scripting ::= funciones fin_etiqueta_scripting
					|fin_etiqueta_scripting
					;
funciones ::= funciones functions
				|functions
				;
functions ::= on_load
			|process_
			|error parentesis
			;

on_load ::= funcion_on_load cont_funcion
			;
process_ ::= funcion_process_ cont_funcion
			;

funcion_on_load ::= name_on_load parentesis
					;

name_on_load ::= ON_LOAD:e
					{:
						cantOnLoad++;
						if (cantOnLoad > 1){
							addError("Semantico",e,"Hay más de 1 proceso ON_LOAD","Elimine el ON_LOAD");
						}
						procedimientoActual = "ON_LOAD()";
					:}
				;
parentesis ::= PAI PAD
				|error
				;

funcion_process_ ::= name_funcion_g:e parentesis
							{:
								codigoHTML += "function " + e.getLexema() + "(){\n";
							:}
						;
name_funcion_g ::= NOMBRE_FUNCION:e
						{:
							procedimientoActual = e.getLexema() +"()";
							RESULT = e;
						:}
					;

cont_funcion ::= inicio_funcion
						{:
							procesoActual++;
						:}
				 funcion fin_funcion
				 			{:
				 				if(!procedimientoActual.equals("ON_LOAD()")){
				 					codigoHTML += "}\n";
				 				}
				 			:}
					;

inicio_funcion ::= CORI 
					|error
					;
fin_funcion ::= CORD
				|error
				;
funcion ::= tipos_instrucciones 
			|
			;
tipos_instrucciones ::= tipos_instrucciones tipo_instruccion
						|tipo_instruccion
						;
tipo_instruccion ::= declaracion_asginacion
					|estruc_if
					|funciones_especiales
					|estruc_repeat
					|estruc_while
					|insert
					;

expr      ::= expr:e1 SUMA {:codigoHTML1 += " + ";:}
							 expr:e2 {:
	             						if(e1 != null && e2 != null){
		             						Token result = funOLM.suma(e1, e2);
		             						if(result == null){
		             							addError("Semantico",e1,
		             							e1.getNombreToken()+" + "+ e2.getNombreToken() +" No esta definido",
		             							e1.getNombreToken()+" + "+ e1.getNombreToken());
		             						}else{
		             							RESULT = result;
		             						}
		             					}
             						:}       
             |expr:e1 MENOS {:codigoHTML1 += " - ";:}
             				expr:e2	{:
	             						if(e1 != null && e2 != null){
		             						Token result = funOLM.resta(e1, e2);
		             						if(result == null){
		             							addError("Semantico",e1,
		             							e1.getNombreToken()+" - "+ e2.getNombreToken() +" No esta definido",
		             							e1.getNombreToken()+" - "+ e1.getNombreToken());
		             						}else{
		             							RESULT = result;
		             						}
		             					}
             						:}       
             |expr:e1 MULT {:codigoHTML1 += " * ";:}
             		 expr:e2	{:
	             						if(e1 != null && e2 != null){
		             						Token result = funOLM.mult(e1, e2);
		             						if(result == null){
		             							addError("Semantico",e1,
		             							e1.getNombreToken()+" * "+ e2.getNombreToken() +" No esta definido",
		             							e1.getNombreToken()+" * "+ e1.getNombreToken());
		             						}else{
		             							RESULT = result;
		             						}
		             					}
             						:}
             |expr:e1 DIAG {:codigoHTML1 += " / ";:} 
             		 expr:e2	{:
	             						if(e1 != null && e2 != null){
		             						Token result = funOLM.div(e1, e2);
		             						if(result == null){
		             							addError("Semantico",e1,
		             							e1.getNombreToken()+" / "+ e2.getNombreToken() +" No esta definido",
		             							e1.getNombreToken()+" / "+ e1.getNombreToken());
		             						}else{
		             							RESULT = result;
		             						}
		             					}
             						:}
             |expr:e1 IGUALACION {:codigoHTML1 += " == ";:} 
             				expr:e2 {:
	             							if(e1 != null && e2 != null){
		             							String result = funOLM.igual(e1, e2);
		             							if(result == null){
		             								addError("Semantico",e1,
		             								e1.getNombreToken()+" == "+ e2.getNombreToken() +" No esta definido",
		             								"Ambos tipos tienen que ser iguales");
		             							}else{
		             								e2.setNombreToken("boolean");
		             								e2.setLexema(result);
		             								RESULT = e2;
		             							}
		             						}
             							:}
             |expr:e1 DIFERENTE {:codigoHTML1 += " !== ";:}
             				 expr:e2 {:
	             							if(e1 != null && e2 != null){
		             							String result = funOLM.diferente(e1, e2);
		             							if(result == null){
		             								addError("Semantico",e1,
		             								e1.getNombreToken()+" != "+ e2.getNombreToken() +" No esta definido",
		             								"Ambos tipos tienen que ser iguales");
		             							}else{
		             								e2.setNombreToken("boolean");
		             								e2.setLexema(result);
		             								RESULT = e2;
		             							}
		             						}
             							:}
             |expr:e1 MEN_QUE {:codigoHTML1 += " <= ";:}
             				 expr:e2	{:
	             							if(e1 != null && e2 != null){
		             							String result = funOLM.menIgual(e1, e2);
		             							if(result == null){
		             								addError("Semantico",e1,
		             								e1.getNombreToken()+" <= "+ e2.getNombreToken() +" No esta definido",
		             								"<p>integer <= integer</p> <p>decimal <= decimal</p>");
		             							}else{
		             								e2.setNombreToken("boolean");
		             								e2.setLexema(result);
		             								RESULT = e2;
		             							}
		             						}
             							:}
             |expr:e1 MAY_QUE {:codigoHTML1 += " >= ";:}
             			 expr:e2 {:
             							if(e1 != null && e2 != null){
	             							String result = funOLM.mayIgual(e1, e2);
	             							if(result == null){
	             								addError("Semantico",e1,
	             								e1.getNombreToken()+" >= "+ e2.getNombreToken() +" No esta definido",
	             								"<p>integer >= integer</p> <p>decimal >= decimal</p>");
	             							}else{
	             								e2.setNombreToken("boolean");
	             								e2.setLexema(result);
	             								RESULT = e2;
	             							}
	             						}
             						:}
             |expr:e1 MAQ {:codigoHTML1 += " > ";:}
             			 expr:e2	{:
             							if(e1 != null && e2 != null){
	             							String result = funOLM.mayQ(e1, e2);
	             							if(result == null){
	             								addError("Semantico",e1,
	             								e1.getNombreToken()+" > "+ e2.getNombreToken() +" No esta definido",
	             								"<p>integer > integer</p> <p>decimal > decimal</p>");
	             							}else{
	             								e2.setNombreToken("boolean");
	             								e2.setLexema(result);
	             								RESULT = e2;
	             							}
	             						}
             						:}
             |expr:e1 MENQ {:codigoHTML1 += " < ";:} 
             			expr:e2 	{:
             							if(e1 != null && e2 != null){
	             							String result = funOLM.menQ(e1, e2);
	             							if(result == null){
	             								addError("Semantico",e1,
	             								e1.getNombreToken()+" < "+ e2.getNombreToken() +" No esta definido",
	             								"<p>integer < integer</p> <p>decimal < decimal</p>");
	             							}else{
	             								e2.setNombreToken("boolean");
	             								e2.setLexema(result);
	             								RESULT = e2;
	             							}
	             						}
             						:}
             |expr:e1 BARRA90 BARRA90 {:codigoHTML1 += " || ";:}
             				 expr:e2 	{:
	             									if(e1 != null && e2 != null){
	             										String tipo = funOLM.or(e1, e2);
	             										if(tipo == null){
	             											addError("Semantico",e1,
	             												e1.getNombreToken()+" || "+ e2.getNombreToken() +" No esta definido",
	             												"boolean || boolean");
	             										}else{
	             											e2.setLexema(tipo);
	             											RESULT = e2;
	             										}
	             									}
             									:}
             |expr:e1 AND_1 AND_1 {:codigoHTML1 += " && ";:}
             				 expr:e2	{:
             									if(e1 != null && e2 != null){
             										String tipo = funOLM.and(e1, e2);
             										if(tipo == null){
             											addError("Semantico",e1,
             												e1.getNombreToken()+" && "+ e2.getNombreToken() +" No esta definido",
             												"boolean && boolean");
             										}else{
             											e2.setLexema(tipo);
             											RESULT = e2;
             										}
             									}
             								:}
             |ADMIRACION {:codigoHTML1 += "!";:}
             		 expr:e1 {:
             						if(e1 != null){
             							if(e1.getNombreToken().equals("boolean")){
             								if(e1.getLexema().equals("true")){
             									e1.setLexema("false");
             								}else{
             									e1.setLexema("true");
             								}
	             							RESULT = e1;
	             						}else{
	             							addError("Semantico",e1, e1.getLexema()+" No es una variable de tipo boolean",
	             								"Use una variable de tipo boolean");
	             						}
             						}
             					:}
	       	 |PAI
	       	 	{:codigoHTML1 += "(";:}
	       	 	 expr:e PAD {:codigoHTML1 += ")"; RESULT = e;:}	        
	         |MENOS ENTERO:e {:e.setNombreToken("integer"); e.setLexema("-" + e.getLexema());codigoHTML1 += e.getLexema(); RESULT = e;:}
	         |MENOS DECIMAL:e {: e.setNombreToken("decimal");e.setLexema("-" + e.getLexema());codigoHTML1 += e.getLexema(); RESULT = e;:}
	         |ENTERO:e {: e.setNombreToken("integer");codigoHTML1 += e.getLexema(); RESULT = e;:}
	         |DECIMAL:e {: e.setNombreToken("decimal");codigoHTML1 += e.getLexema(); RESULT = e;:}
	         |CHAR:e {: e.setNombreToken("char");codigoHTML1 += "\""+e.getLexema()+"\""; RESULT = e;:}
	         |STRING:e {: e.setNombreToken("string");codigoHTML1 += "\""+e.getLexema()+"\""; RESULT = e;:}
	         |STRING_WS:e {: e.setNombreToken("string");codigoHTML1 += "\""+e.getLexema()+"\""; RESULT = e;:}
	         |BOOLEAN:e {: e.setNombreToken("boolean");codigoHTML1 += e.getLexema(); RESULT = e;:}
	         |ID_VARIABLE:e {:
	         					codigoHTML1 += e.getLexema();
	         					e.setNombreToken(funTablaSim.buscarVariableTipo(e.getLexema(),procesoActual,isEstruc,procesoActualEstructura));
	         					if(e.getNombreToken() == null){
	         						addError("Semantico",e,"La variable: " + e.getLexema( )+ " No esta definida",
	         							"Declare la variable");
	         					}else{
	         						funTablaSim.addOneEjecucion(e.getLexema(),procesoActual,isEstruc,procesoActualEstructura);
	         						e.setLexema(funTablaSim.getValorVariable(e.getLexema(),procesoActual,isEstruc,procesoActualEstructura)); 
		         					RESULT = e;
	         					}	         						         					
	         				:}
	         |funciones_especiales_parametros:e {:RESULT = e;:}
			 |funciones_especiales_sin_parametros:e {:RESULT = e;:}
	         |error             
             ;

estruc_init ::= inicio_init funcion fin_estruct
				;
inicio_init ::= el_init ini_estruct
				;
el_init ::= INIT
		|error
		;
ini_estruct ::= LLAI DOS_PUNTOS
				|error
				;
fin_estruct ::= DOS_PUNTOS LLAD END
				|error
				;

declaracion_asginacion ::= declaracion asignacion:e
								{:
									isGlobal = false;
									for(Token variable: listaVariablesActuales){
										String tipo = funTablaSim.buscarVariableTipo(variable.getLexema(),procesoActual,isEstruc,procesoActualEstructura);
										if(tipo != null){
											funTablaSim.addOneEjecucion(variable.getLexema(),procesoActual,isEstruc,procesoActualEstructura);
											if(e != null){
												if(e.getNombreToken().equals(tipo)){
													funTablaSim.addValor(variable.getLexema(),procesoActual,e.getLexema(),isEstruc,procesoActualEstructura);
												}else{
													addError("Semantico",e,
														"Tipo " + e.getNombreToken() + " No es igual al tipo de la variable: " + tipo,
														"cambie el tipo de la variable");
												}
											}else{
												funTablaSim.addValorDefecto(variable.getLexema(),procesoActual,isEstruc,procesoActualEstructura);
											}

										}else{
											addError("Semantico",variable,"La variable: "+ variable.getLexema()+" No esta declarada",
												"Declare la variable");
										}									
									}
								:}
							;
fin_instruccion ::= SEMI
						{:
							if(isGlobal){
								codigoHTMLVarGlobal += " ;\n ";
							}else{
								codigoHTML += " ;\n ";
							}
							
						:}
					;
declaracion ::= tipo_dato:e
					{:
						tipoVariable = e.getLexema();
						listaVariablesActuales.clear();
					:}
				 modo
				|{:listaVariablesActuales.clear();:}
				nombre_variable
				;
tipo_dato ::= ID_INTEGER:e {: RESULT = e;:}
			|ID_DECIMAL:e {: RESULT = e;:}
			|ID_STRING:e {: RESULT = e;:}
			|ID_BOOLEAN:e {: RESULT = e;:}
			|ID_CHAR:e {: RESULT = e;:}
			;
modo ::= GLOBAL {:isGlobal = true; codigoHTMLVarGlobal += "var ";:}
		 nombre_variable
			{:
				for(Token variable: listaVariablesActuales){
					String nameVar = variable.getLexema(); 
					boolean isAdd = funTablaSim.agregarSim(nameVar,tipoVariable,"","GLOBAL",procesoActual,posicionVar,procedimientoActual
															,isEstruc,procesoActualEstructura);
					if(isAdd){
						posicionVar++;
					}else{
						addError("Semantico",variable,"La variable " + variable.getLexema()+" ya esta definida",
							" No declare la variable, solo asignela");
					}
					
				}
			:}
		|nombre_variable
			{:
				for(Token variable: listaVariablesActuales){
					String nameVar = variable.getLexema(); 
					boolean isAdd = funTablaSim.agregarSim(nameVar,tipoVariable,"","-",procesoActual,posicionVar,procedimientoActual
															,isEstruc,procesoActualEstructura);
					if(isAdd){
						posicionVar++;
					}else{
						addError("Semantico",variable,"La variable " + variable.getLexema()+" ya esta definida",
							" No declare la variable, solo asignela");
					}
					
				}
			:}
		|error
		;
nombre_variable ::= ID_VARIABLE:e
						{:
							listaVariablesActuales.add(e);
							if(isGlobal){
								codigoHTMLVarGlobal += e.getLexema()+ " ";
							}else{
								codigoHTML += e.getLexema()+ " ";
							}
							
						:}
					 otras_variables
					;
otras_variables ::= otra_variable
					|
					;
otra_variable ::= otra_variable nombre_otra_variable
				  | nombre_otra_variable
				  ;
nombre_otra_variable ::= COMA id_variable
						;
id_variable ::= ID_VARIABLE:e
					{:
						listaVariablesActuales.add(e);
						if(isGlobal){
							codigoHTMLVarGlobal += ", " + e.getLexema();
						}else{
							codigoHTML += ", " + e.getLexema();
						}						
					:}
				|error
				;
asignacion ::= 	IGUAL {:
						if(isGlobal){
							codigoHTMLVarGlobal += " = ";
						}else{
							codigoHTML += " = ";
						}						
					:}
				 tipos_datos:e fin_instruccion
						{:
							RESULT = e;
						:}
				|fin_instruccion
				|error
				;
tipos_datos ::= expr:e
					{:
						if(isGlobal){
							codigoHTMLVarGlobal +=  codigoHTML1;
						}else{
							codigoHTML += codigoHTML1;
						}
						codigoHTML1 = "";
						RESULT = e;
					:}
				|GET_ELEMENT_BY_ID cont_element_by_id:e
						{:
							if(e != null){
								if(isGlobal){
									codigoHTMLVarGlobal += "document.getElementById(\""+e.getLexema()+"\").value";
								}else{
									codigoHTML += "document.getElementById(\""+e.getLexema()+"\").value";
								}								
								e.setLexema("getElementById(\""+e.getLexema()+"\")");							
								RESULT = e;
							}
						:}
				;
cont_element_by_id ::= PAI ID_ELEMENT:e PAD
								{:
									e.setNombreToken("string");
									RESULT = e;
								:}
					|error
					;
estruc_if ::= 	if estruc_else_if
					{:
						isEstruc = false;
					:}
				;
if ::= IF 
			{:
				isEstruc = true;
				procesoActualEstructura++;
				codigoHTML += "if (";
			:}
		condicion:e
			{:
			if( e != null){
				if(!e.getNombreToken().equals("boolean")){
					addError("Semantico",e,"No da un resultado de tipo boolean, tipo de resultado: " + e.getNombreToken(),"Reescriba la condicion");
				}
			}
				codigoHTML += "){\n";
			:}

		cont_estruc_if
			{:
				codigoHTML += "}\n";
			:}
		;
condicion ::= 	PAI expr:e PAD
					{:
						if(isGlobal){
							codigoHTMLVarGlobal += codigoHTML1;
						}else{
							codigoHTML += codigoHTML1;
						}
						codigoHTML1 = "";
						RESULT = e;
					:}
				|error
				;
condicion_f ::= PAI expr:e PAD
					{:
						RESULT = e;
					:}
				|error
				;

cont_estruc_if ::= 	THEN instrucciones_para_if
					|error
					;

estruc_else_if ::= 	else_if estruc_else
					|estruc_else
					;
else_if ::= else_if un_else_if
			|un_else_if
			;
un_else_if ::= inicio_else_if condicion:e
					{:
					if(e != null){
						if(!e.getNombreToken().equals("boolean")){
							addError("Semantico",e,"No da un resultado de tipo boolean, tipo de resultado: " + e.getNombreToken(),
								"Reescriba la condicion");
						}
					}
						codigoHTML += "){\n";
					:}
				 cont_estruc_if
				 		{:
				 			codigoHTML += "}\n";
				 		:}
				;
inicio_else_if ::= ELSE IF
						{:
							procesoActualEstructura++;
							codigoHTML += "else if (";
						:}				
					;
estruc_else ::= else
				|
				;
else ::= inicio_else instrucciones_para_if
					{:
						codigoHTML += "}\n";
					:}
		;
inicio_else ::= ELSE 
					{:
						procesoActualEstructura++;
						codigoHTML += "else {\n";
					:}
				;
fin_instruccion_error ::= SEMI
							{:
								codigoHTML += ";\n";
							:}
						|error
						;

funciones_especiales ::= 	funciones_especiales_parametros{:codigoHTML += codigoHTML1; codigoHTML1 = "";:}	fin_instruccion_error
							|funciones_especiales_sin_parametros{:codigoHTML += codigoHTML1; codigoHTML1 = "";:} fin_instruccion_error
							|funciones_especiales_sin_tipo_return fin_instruccion_error
							;
funciones_especiales_parametros ::= ASC:e0 {:codigoHTML1 += "(";:}
										condicion_f:e {:
														codigoHTML1 += ").split('').sort().join('')";
														if(e != null){
															e0.setLexema(e0.getLexema() + "( " + e.getLexema() + ")");
															if(!e.getNombreToken().equals("string")){
																addError("Semantico",e,"No es de tipo string, tipo dado: " + e.getNombreToken(),
																	"Cambie a tipo string");
															}
														}													
														e0.setNombreToken("string");														
														RESULT = e0;
													:}
									|DESC:e0  {:codigoHTML1 += "( (";:}
										condicion_f:e
											{:
												codigoHTML1 += ").split('').sort().join('') ).split(\"\").reverse().join(\"\")";
												if(e != null){
														e0.setLexema(e0.getLexema() + "( " + e.getLexema() + ")");
														if(!e.getNombreToken().equals("string")){
															addError("Semantico",e,"No es de tipo string, tipo dado: " + e.getNombreToken(),
																"Cambie a tipo string");
														}
													}													
												e0.setNombreToken("string");														
												RESULT = e0;
											:}
									|LETPAR_NUM:e0 {:codigoHTML1 += "letParNum(";:}
										condicion_f:e
												{:
													codigoHTML1 += ")";
													if(e != null){
															e0.setLexema(e0.getLexema() + "( " + e.getLexema() + ")");
															if(!e.getNombreToken().equals("string")){
																addError("Semantico",e,"No es de tipo string, tipo dado: " + e.getNombreToken(),
																	"Cambie a tipo string");
															}
														}													
													e0.setNombreToken("string");														
													RESULT = e0;
												:}
									|LETIMPAR_NUM:e0 {:codigoHTML1 += "letImparNum(";:}
											condicion_f:e
													{:
														codigoHTML1 += ")";
														if(e != null){
															e0.setLexema(e0.getLexema() + "( " + e.getLexema() + ")");
															if(!e.getNombreToken().equals("string")){
																addError("Semantico",e,"No es de tipo string, tipo dado: " + e.getNombreToken(),
																	"Cambie a tipo string");
															}
														}													
														e0.setNombreToken("string");														
														RESULT = e0;
													:}
									|REVERSE:e0 {:codigoHTML1 += "(";:}
										 condicion_f:e 
										 	{:
										 		codigoHTML1 += ").split(\"\").reverse().join(\"\")";
										 		if(e != null){
															e0.setLexema(e0.getLexema() + "( " + e.getLexema() + ")");
															if(!e.getNombreToken().equals("string")){
																addError("Semantico",e,"No es de tipo string, tipo dado: " + e.getNombreToken(),
																	"Cambie a tipo string");
															}
														}													
												e0.setNombreToken("string");														
												RESULT = e0;
										 	:}
									
									;

funciones_especiales_sin_parametros ::= CARACTER_ALEATORIO:e parentesis 
											{:
												codigoHTML1 += "charRandom()";
												e.setNombreToken("char");
												int valorDado =(int) Math.floor(Math.random()*25+65);
												e.setLexema(Character.toString(valorDado));
												RESULT = e;
											:}
										|NUM_ALEATORIO:e parentesis
											{:
												e.setNombreToken("integer");
												int valorDado =(int) Math.floor(Math.random()*10+1);
												e.setLexema(String.valueOf(valorDado));
												RESULT = e;
												codigoHTML1 += "Math.floor(Math.random() * 10)";
											:}
										
										;
funciones_especiales_sin_tipo_return ::= ALERT_INFO {: codigoHTML += "alert( ";:}
										 	condicion {:codigoHTML += " )";:}
										 |EXIT parentesis
											{:
												codigoHTML += "return";
											:}
										;

estruc_repeat ::= REPEAT
					{:
						isEstruc = true;
						procesoActualEstructura++;
						codigoHTML += "for ( ";
					:} 
				asig_decla_repeat:e
					{:
						codigoHTML += "; " + e.getLexema() +"  <= ";
					:}
				 huntil {:codigoHTML += ";  " + e.getLexema() +"++ ) {\n"; :} 
				 instrucciones_para_if {:codigoHTML += "}\n";isEstruc = false;:}
				;
asig_decla_repeat ::= PAI declaracion_asginacion_repeat:e PAD
						{:
							RESULT = e;
						:}
					 |error
					 ;

declaracion_asginacion_repeat ::= declaracion_repeat:e0 asignacion_repeat:e
									{:
									if(e0 != null && e != null){
										String tipo = funTablaSim.buscarVariableTipo(e0.getLexema(),procesoActual,isEstruc,procesoActualEstructura);
										if(tipo != null){
											funTablaSim.addOneEjecucion(e0.getLexema(),procesoActual,isEstruc,procesoActualEstructura);
											if(e != null){
												if(e.getNombreToken().equals(tipo)){
													if(!e.getNombreToken().equals("integer") && !e.getNombreToken().equals("decimal")){
														addError("Semantico",e,
															"No es de tipo integer o decimal,tipo de resultado: " + e.getNombreToken(),
															"cambie el tipo de asginacion");
												}else{
													funTablaSim.addValor(e0.getLexema(),procesoActual,e.getLexema(),isEstruc,procesoActualEstructura);
												}													
												}else{
													addError("Semantico",e,
														"Tipo " + e.getNombreToken() + " No es igual al tipo de la variable: " + tipo,
														"cambie el tipo de la variable");
												}
											}else{
												funTablaSim.addValorDefecto(e0.getLexema(),procesoActual,isEstruc,procesoActualEstructura);
											}

										}else{
											addError("Semantico",e0,"La variable: "+ e0.getLexema()+" No esta declarada",
												"Declare la variable");
										}
									}
										RESULT = e0;
									:}
									;

declaracion_repeat ::= tipo_dato:e0 ID_VARIABLE:e
				{:
					if(e0 != null){
						if(!e0.getLexema().equals("integer") && !e0.getLexema().equals("decimal")){
							addError("Semantico",e0,"No es de tipo integer o decimal, tipo de resultado: " + e.getLexema(),
								"cambie de variable");
						}
						String nameVar = e.getLexema(); 
						boolean isAdd = funTablaSim.agregarSim(nameVar,e0.getLexema(),"","-",procesoActual,posicionVar,procedimientoActual
																	,isEstruc,procesoActualEstructura);
						if(isAdd){
							posicionVar++;
						}else{
							addError("Semantico",e,"La variable " + e.getLexema()+" ya esta definida",
								" No declare la variable, solo asignela");
						}					
					}
					RESULT = e;
					codigoHTML += "var " + e.getLexema();
				:}
						|ID_VARIABLE:e
							{:
								RESULT = e;
							:}
						|error
						;
asignacion_repeat ::= 	IGUAL
								{:
									codigoHTML +=" = ";
								:}
						 expr:e
								{:
									codigoHTML += codigoHTML1;
									codigoHTML1 = "";
									RESULT = e;
								:}
						|error
						;


huntil ::= HUNTIL condicion:e
				{:
					if(e != null){
						if(!e.getNombreToken().equals("integer") && !e.getNombreToken().equals("decimal")){
								addError("Semantico",e,"No da un resultado de tipo integer o decimal, tipo de resultado: " + e.getNombreToken(),
									"Reescriba la condicion");
							}
					}
				:}
			|error
			;
estruc_while ::= WHILE	{:isEstruc = true;procesoActualEstructura++; codigoHTML += "while ( ";:}					
				 condicion:e 
				 	{:
				 		if(e != null){
				 			if(!e.getNombreToken().equals("boolean")){
								addError("Semantico",e,"No da un resultado de tipo boolean, tipo de resultado: " + e.getNombreToken(),
									"Reescriba la condicion");
							}
				 		}
				 		
				 	:}
				  thenwhile instrucciones_para_if
				 	{:
				 		codigoHTML += "}\n";
				 		isEstruc = false;
				 	:}
				;
thenwhile ::= 	THENWHILE
					{:
						codigoHTML += " ) {\n";
					:}
				|error
				;
insert ::= INSERT
				{:
					codigoHTML += "document.write(";
				:} 
				estruc_cont_insert
					{:
						codigoHTML += ")";
					:}
				 fin_instruccion_error
					}
			;
estruc_cont_insert ::= 	PAI cont_insert PAD
						|error
						;

cont_insert ::=	cont_insert COMA {:codigoHTML += ",";:}
					 cont_insert
				|ID_ELEMENT:e
					{:
						String codeH = "";
						String texto = e.getLexema();
						byte[] bytes = texto.getBytes(StandardCharsets.UTF_8);
        				String utf8EncodedString = new String(bytes, StandardCharsets.UTF_8);
        				try{
        					boolean isParserGood = false;
				            Reader inputString = new StringReader(utf8EncodedString);
				            BufferedReader reader = new BufferedReader(inputString);
				            LexerInsert lexer = new LexerInsert(reader);
				            ParserInsert parser = new ParserInsert(lexer);
				            try{
				                parser.parse();
				                isParserGood= true;
				            }catch(Exception q){
				               //q.printStackTrace();
				            }
				            List<ReportError> listaErrores = parser.getListaErrores();
				           /* for (ReportError listaErrore : listaErrores) {
				                System.out.println(listaErrore.toString());
				            } */
				            if (listaErrores.size()==0 && isParserGood) {
				            	codeH = parser.getCodigoHTML();
				            }else{
				            	codeH = e.getLexema();
				            }
        				}catch(Exception q){
        					//q.printStackTrace();
        					codeH = e.getLexema();
        				}
        				codigoHTML += "\""+codeH+"\"";
					:}
				|ID_VARIABLE:e
					{:
						codigoHTML += e.getLexema();
					:}
				|error
				;
instrucciones_para_if ::= estruc_init
						|insert
						|funciones_especiales
						;

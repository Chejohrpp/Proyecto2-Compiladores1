/*codigo de usuario*/
package com.mycompany.p2c1.ReglasGram.gcic;
import com.mycompany.p2c1.ReglasGram.Token;
import java_cup.runtime.*;
import com.mycompany.p2c1.ReglasGram.gcic.symGCIC.*;
import com.mycompany.p2c1.objetos.*;
import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.util.Set;

parser code {:


	private List<ReportError> listaErrores;
	private String codigoHTML = "";
	private String losEstilos = "";
	private String id = "id";
	private boolean isParameterGCIC = true;
	private HashMap<String,Token> atributos= new HashMap();

	public ParserGCIC(LexerGCIC lex){
		super(lex);
		listaErrores = new ArrayList<ReportError>();
	}
	 @Override
	public void syntax_error(Symbol cur_token){
			Token token = (Token) cur_token.value;
			/*			            
            String tokenEsperados = "Tokens esperados: ";
            tokenEsperados += listTokensEsperados();
			String msgError =  "Error: ( "+ token.getLexema() +" ) -> {Linea: "+cur_token.left+", Columna: "+ cur_token.right +" } " + tokenEsperados;
			listaErrores.add(msgError);
			*/

			String nombreSimbolo = symbl_name_from_id(cur_token.sym);
			if(nombreSimbolo.equals("INVALID")){
				addError("Lexico",token,"No se esperaba: " + token.getLexema(),null);
			}else{
				addError("Sintactico",token,"No se esperaba: " + token.getLexema(),null);
			}		

	}
	 @Override
	public void report_fatal_error(String message, Object info){
			String Elerror = "Ocurrio un error no recuperable al analizar: " + message + " -> {objeto: " + info + "}";

			if(info instanceof Symbol ){
				Symbol sim = (Symbol) info;
				Token token = (Token) sim.value;
				/*
				String msgError =  "Error: ( "+ token.getLexema() +" ) -> {Linea: "+sim.left+", Columna: "+ sim.right +" } ";
				listaErrores.add(msgError);
				*/
				addError("Sintactico",token,message,null);
			}else{
				System.out.println("Error -- :  " + message);
			}

			//listaErrores.add(Elerror);	
	}
	 @Override
	public void report_error(String message, Object info){
			System.out.println("Error desde el report_error: " + message);
	}
	 @Override
	public void unrecovered_syntax_error(Symbol cur_token){
		report_fatal_error("No se puede reparar y analizar el Error sintactico", cur_token);
	}

	private void addError(String tipoError, Token token,String descError, String solucion){
			ReportError reporte = new ReportError();
			reporte.setTipoError(tipoError);
			reporte.setColumna(token.getColumna());
			reporte.setLinea(token.getLinea());
			if (solucion == null) {
                reporte.setSolucion(listTokensEsperados());
            }else{
                reporte.setSolucion(solucion);
            }
			reporte.setDescripcion(descError);
			listaErrores.add(reporte);

	}
	private String listTokensEsperados(){
		String tokenEsperados = "";
		for (Integer expected_token_id : expected_token_ids()) {
            	if(!symbl_name_from_id(expected_token_id).equals("error")){
            		String nameToken = nameTokenEsperado(symbl_name_from_id(expected_token_id));
            		if (nameToken == null){
            			tokenEsperados += "<p>"+symbl_name_from_id(expected_token_id) + "<p>";
            		}else{
            			tokenEsperados += "<p>"+nameToken + "<p>";
            		}            		
            	}                
            }
        return tokenEsperados;
	}

	public List getListaErrores(){
		return listaErrores;
	}
	public String getCodigoHTML(){
		return codigoHTML;
	}
	public String getId(){
		return id;
	}
	 @Override
	protected int error_sync_size(){
		return 1;
	}
	private String nameTokenEsperado(String nameToken){
		switch (nameToken){
			case "MENQ" : return "<";
			case "CORI" : return "[";
			case "CORD" : return "]";
			case "IGUAL" : return "=";
			case "STRING" : return "string";
			case "STRING_WS" : return "string sin espacios";
			case "MAQ" : return ">";
			case "DIAG" : return "/";
			case "STRING_TOTAL" : return "cadena de texto";
			case "ID_VARIABLE" : return "nombre de una variable";
			case "NOMBRE_FUNCION" : return "nombre de funcion (PROCESS_(nombre de una funcion con letras a-z o A-Z))";
			case "LLAI" : return "{";
			case "LLAD" : return "}";
			case "DOS_PUNTOS" : return ":";
			case "COMA" : return ",";
			case "ADMIRACION" : return "!";
			case "SEMI" : return ";";
			case "BARRA90" : return "|";
			case "AND_1" : return "&";
			case "SUMA" : return "+";
			case "MENOS" : return "-";
			case "MULT" : return "*";
			case "GET_ELEMENT_BY_ID" : return "getElemenById";
			case "IGUALACION" : return "==";
			case "MEN_QUE" : return "<=";
			case "MAY_QUE" : return ">=";
			case "DIFERENTE" : return "!=";
			case "CHAR" : return "caracter";
			case "DECIMAL" : return "numero decimal";
			case "BOOLEAN" : return "true or false";
			case "INVALID" : return "caracter cualquiera";
			case "ID_ELEMENT" : return "string encerrado entre comillas simples";
			case "ENTERO": return "numero entero";
			case "PAI" : return "(";
			case "PAD": return ")";
			case "PARAMETRO": return "Algun Parametro aceptable Ejemplo:id";
            default: return null;
		}
	}

	private String parametrosCss(String param){
			switch (param){
			case "href" : return "href";
			case "background" : return "background-color";
			case "color" : return "color";
			case "font-size" : return "font-size";
			case "font-family" : return "font-family";
			case "type" : return "type";
			case "id" : return "id";
			case "name" : return "name";
			case "cols" : return "cols";
			//case "rows" : return "";
			//case "class" : return "";
			//case "src" : return "";
			//case "width" : return "";
			//case "height" : return "";
			//case "alt" : return "";
			//case "onclick" : return "";
			case "text-align" : return "text-align";
			 default: return param;
		}
	}
	private boolean isParametrosCss(String param){
		switch (param){
			case "background" : return true;
			case "color" : return true;
			case "font-size" : return true;
			case "font-family" : return true;
			case "text-align" : return true;
			default: return false;
		}
	}

	private void agregarVariable(Token varNueva){
		String nombreVariable = varNueva.getLexema();
		String tipoVariable = varNueva.getNombreToken();
		switch(tipoVariable){
			case "int" :{

			}
			case "decimal" :{

			}
			case "dobule" :{

			}
			case "char" :{

			}
			case "boolean" :{

			}
			default : break;
		}
	}

	private void agregarVariableGlobal(Token varNueva){

	}

	private void verificarAtributos(String newAtriuto, Token token){
		if(atributos.get(newAtriuto) == null){
			atributos.put(newAtriuto,token);
		}else{
			addError("Semantico",token,"Esta repetido el atributo: " + newAtriuto, "Elimine el atributos repetido");
		}
	}

	private void verificarAtributosEtiquetas(String etiqueta, Token token){
		switch(etiqueta){
			case "C_GCIC":{
				if(atributos.remove("id") == null){
					addError("Semantico",token,"La Eitqueta C_GCIC no contiene el id", "Agregue la etiqueta 'id' en C_GCIC");
				}
				atributos.remove("name");
				break;
			}
			case "C_LINK":{
				atributos.remove("href");
				break;
			}
			case "C_BODY":{
				atributos.remove("background");
				break;
			}
			case "span":{
				atributos.remove("font-size");
				atributos.remove("font-family");
				atributos.remove("text-align");
				atributos.remove("id");
				atributos.remove("color");
				etiqueta = "C_SPAM";
				break;
			}
			case "input":{
				atributos.remove("type");
				atributos.remove("font-size");
				atributos.remove("font-family");
				atributos.remove("text-align");
				atributos.remove("id");
				atributos.remove("color");
				etiqueta = "C_INPUT";
				break;
			}
			case "textarea":{
				atributos.remove("rows");
				atributos.remove("cols");
				atributos.remove("font-size");
				atributos.remove("font-family");
				atributos.remove("text-align");
				atributos.remove("id");
				etiqueta = "C_TEXTAREA";
				break;
			}
			case "select":{
				atributos.remove("font-size");
				atributos.remove("font-family");
				atributos.remove("text-align");
				atributos.remove("id");
				atributos.remove("color");
				etiqueta = "C_SELECT";
				break;
			}
			case "div":{
				atributos.remove("background");
				atributos.remove("class");
				atributos.remove("font-size");
				atributos.remove("font-family");
				atributos.remove("text-align");
				atributos.remove("id");
				atributos.remove("color");
				etiqueta = "C_DIV";
				break;
			}
			case "img":{
				atributos.remove("src");
				atributos.remove("width");
				atributos.remove("height");
				atributos.remove("id");
				atributos.remove("alt");
				etiqueta = "C_IMG";
				break;
			}
			case "button":{
				atributos.remove("background");
				atributos.remove("onclick");
				atributos.remove("font-size");
				atributos.remove("font-family");
				atributos.remove("text-align");
				atributos.remove("id");
				atributos.remove("color");
				etiqueta = "C_BUTTON";
				break;
			}
			case "h1":{
				atributos.remove("font-size");
				atributos.remove("font-family");
				atributos.remove("text-align");
				atributos.remove("id");
				atributos.remove("color");
				etiqueta = "C_H1";
				break;
			}
			case "p":{
				atributos.remove("font-size");
				atributos.remove("font-family");
				atributos.remove("text-align");
				atributos.remove("id");
				atributos.remove("color");
				etiqueta = "C_P";
				break;
			}
			default:break;
		}
		if (atributos.size() > 0){
            Set<String> keySet = atributos.keySet();
                for (String string : keySet) {
                    addError("Semantico",atributos.get(string),
                      "El Parametro " + string + " No es parte de la etiqueta " + etiqueta
                       , "Elimine el parametro: ' "+ string + " ' en " +etiqueta);
            }
                    
		}

	}
:}

/*terminales*/
terminal Token MENQ, C_GCIC, CORI, PARAMETRO, IGUAL;
terminal Token STRING, STRING_WS, CORD,MAQ, DIAG;
terminal Token C_HEAD,C_LINK,C_TITLE,STRING_TOTAL,ID_VARIABLE,C_BODY;
terminal Token C_SPAM, C_INPUT,C_TEXTAREA,C_SELECT,C_OPTION,C_DIV,C_IMG,C_BR,C_BUTTON,C_H1,C_P,C_SCRIPTING;
terminal Token ON_LOAD,NOMBRE_FUNCION,PAI,PAD,LLAI, LLAD;
terminal Token DOS_PUNTOS,COMA,ADMIRACION,SEMI,BARRA90,AND_1;
terminal Token SUMA, MENOS, MULT,INSERT,GET_ELEMENT_BY_ID,IGUALACION,MEN_QUE,MAY_QUE,DIFERENTE;
terminal Token CHAR,ENTERO,DECIMAL,BOOLEAN,INVALID;
terminal Token ASC,DESC,LETPAR_NUM,LETIMPAR_NUM,REVERSE,CARACTER_ALEATORIO,NUM_ALEATORIO;
terminal Token ALERT_INFO,EXIT,GLOBAL,ID_INTEGER,ID_STRING,ID_BOOLEAN,ID_DECIMAL,ID_CHAR;
terminal Token IF,ELSE,THEN,INIT,END,REPEAT,HUNTIL,WHILE;
terminal Token THENWHILE, ID_ELEMENT;


/*no terminales*/
non terminal Token inicio,etiqueta_gcic,inicio_gcic,parametros_etiquetas,varios_parametro_etiqueta;
non terminal Token parametro_etiqueta,inicio_param_etiq,string;
non terminal Token fin_param_etiq,cierre_etiqueta,fin_etiqueta_gcic,pre_fin_etiq,cierre_gcic,head,etiqueta_head,inicio_head;
non terminal Token fin_etiqueta_head,cierre_head,link,etiqueta_link,inicio_link,fin_etiqueta_link,cierre_link,title;
non terminal Token etiqueta_title,inicio_title,fin_etiqueta_title,cierre_title,cont_etiqueta,varios_contenido,todo_contenido,cont_head;
non terminal Token etiquetas_para_head,etiqueta_para_head,body,etiqueta_body,inicio_body;
non terminal Token fin_etiqueta_body,cierre_body,cont_body,etiquetas_para_body,etiqueta_para_body;
non terminal Token c_etiqueta_g,etq_generica;
non terminal Token etiqueta_g,cont_etq_g,varios_contenido_g,un_cont_etq_g,inicio_g, fin_etiqueta_g,cierre_g;
non terminal Token etiqueta_br,inicio_br,scripting,etiqueta_scripting,inicio_scripting,fin_etiqueta_scripting;
non terminal Token cierre_scripting,cont_scripting,funciones,functions,on_load,process_,funcion_on_load,name_on_load,parentesis;
non terminal Token funcion_process_,name_funcion_g,cont_funcion,inicio_funcion,fin_funcion,funcion,tipos_instrucciones,tipo_instruccion;
non terminal Token expr_list, expr,estruc_init,inicio_init,el_init,fin_estruct,ini_estruct;
non terminal Token declaracion_asginacion,fin_instruccion;
non terminal Token declaracion,tipo_dato,modo,nombre_variable,otras_variables,otra_variable,nombre_otra_variable,id_variable;
non terminal Token asignacion,tipos_datos,cont_element_by_id;
non terminal Token estruc_if,if,condicion,cont_estruc_if,estruc_else_if,else_if,un_else_if,inicio_else_if,estruc_else,else,inicio_else;
non terminal Token fin_instruccion_error,funciones_especiales,funciones_especiales_parametros,funciones_especiales_sin_parametros;
non terminal Token estruc_repeat,asig_decla_repeat,declaracion_asginacion_repeat,declaracion_repeat,asignacion_repeat,huntil;
non terminal Token estruc_while,thenwhile;
non terminal Token insert,estruc_cont_insert,cont_insert;
non terminal Token instrucciones,instrucciones_para_if;

/*precedencia*/

precedence left SUMA, MENOS,COMA;
precedence left MULT,DIAG;
precedence left IGUALACION,MEN_QUE,MAY_QUE,DIFERENTE,MAQ,MENQ;
precedence left BARRA90;
precedence left AND_1;
precedence left ADMIRACION;

/*gramatica*/

inicio ::= etiqueta_gcic head body fin_etiqueta_gcic
			;

etiqueta_gcic ::= inicio_gcic:e parametros_etiquetas
							{:
								codigoHTML += "<html>\n";
								isParameterGCIC = false;
								verificarAtributosEtiquetas(e.getNombreToken(),e);
							:}
					;

inicio_gcic ::= MENQ C_GCIC:e
					{:
						e.setNombreToken("C_GCIC");
						RESULT = e;
					:}
				|error
				;

parametros_etiquetas ::= varios_parametro_etiqueta:e MAQ
							{:
								RESULT = e;
							:}
						|MAQ:e
							{:
								e.setNombreToken("");
								RESULT = e;
							:}
						|error
						;

varios_parametro_etiqueta ::=  varios_parametro_etiqueta:e parametro_etiqueta:e1
									{:
										if(e.getNombreToken() == null){
											e.setNombreToken(e1.getNombreToken());
										}else if(e1.getNombreToken() != null){
											e.setNombreToken(e.getNombreToken() + " " + e1.getNombreToken());
										}									
										RESULT = e;
									:}
								|parametro_etiqueta:e
									{:
										RESULT = e;
									:}
								;

parametro_etiqueta ::= inicio_param_etiq:e1 string:e2 fin_param_etiq
							{:
								if(id==null){
									id = e2.getLexema();
								}
								if(isParametrosCss(e1.getLexema())){
									losEstilos += e2.getLexema() + ";";
								}else{
									e1.setNombreToken(e1.getNombreToken() + e2.getLexema() + "\"");
								}
								RESULT = e1;
							:}
						;

inicio_param_etiq ::=	CORI PARAMETRO:e IGUAL
							{:
								verificarAtributos(e.getLexema(),e);
								if(isParameterGCIC){
									if(e.getLexema().equals("id")){
										id = null;
									}
								}
								if(isParametrosCss(e.getLexema())){
									losEstilos += parametrosCss(e.getLexema()) + ":";
								}else{
									e.setNombreToken(parametrosCss(e.getLexema()) + "=\"");
								}								
								RESULT = e;
							:}
					  	;

string ::=	STRING:e {: RESULT = e;:}
			|STRING_WS:e {: RESULT = e;:}
			|error
			;

fin_param_etiq ::= 	CORD
					|error
					;

cierre_etiqueta ::= MAQ
					|error
					;

fin_etiqueta_gcic ::= 	pre_fin_etiq cierre_gcic
							{:
								codigoHTML += "</html>";
							:}
						|error
						;
pre_fin_etiq ::= MENQ DIAG 
				;
cierre_gcic ::= C_GCIC MAQ
				|error
				;


head ::= etiqueta_head cont_head fin_etiqueta_head
		;
etiqueta_head ::= 	inicio_head cierre_etiqueta
						{:
							codigoHTML += "<head>\n";
						:}
				 	;
inicio_head ::= MENQ C_HEAD
				|error
				;
fin_etiqueta_head ::= 	pre_fin_etiq cierre_head
							{:
								codigoHTML += "</head>\n";
							:}
						|error C_HEAD
						;
cierre_head ::= C_HEAD MAQ
				|error 
				;

cont_head ::= 	cont_head etiqueta_para_head
				|etiqueta_para_head
				;

etiquetas_para_head ::= etiquetas_para_head etiqueta_para_head
					|etiqueta_para_head
					;

etiqueta_para_head ::= link
				  |title
				  |error parametros_etiquetas
				  ;

link ::= etiqueta_link fin_etiqueta_link
		;
etiqueta_link ::= 	inicio_link:e
							{:
								atributos.clear();
							:}
					 parametros_etiquetas
							{:
								verificarAtributosEtiquetas(e.getNombreToken(),e);
							:}
					;
inicio_link ::= MENQ C_LINK:e
					{:
						e.setNombreToken("C_LINK");
						RESULT = e;
					:}
				;
fin_etiqueta_link ::= pre_fin_etiq cierre_link
						|error C_LINK
						;
cierre_link ::= C_LINK MAQ
				|error
				;

title ::= etiqueta_title cont_etiqueta:e
				{:
							codigoHTML += e.getLexema();
				:}
			 fin_etiqueta_title
			;

etiqueta_title ::= inicio_title cierre_etiqueta
						{:
							codigoHTML += "<title>";
						:}
					;
inicio_title ::= MENQ C_TITLE
				;
fin_etiqueta_title ::= pre_fin_etiq cierre_title
							{:
								codigoHTML += "</title>\n";
							:}							
						|error
						;
cierre_title ::= 	C_TITLE MAQ
					|error
					;

cont_etiqueta ::=  	varios_contenido:e
						{:
							RESULT = e;
						:}						
					|
					;

varios_contenido ::= varios_contenido:e todo_contenido:e1
						{:
							if(e.getNombreToken() != null){
								e.setLexema(e.getLexema() + e1.getLexema());
								e.setNombreToken(null);
							}else if( e1.getNombreToken() != null){
								e.setLexema(e.getLexema() + e1.getLexema());
								e.setNombreToken("INVALID");
							}
							else{
								e.setLexema(e.getLexema() + " " + e1.getLexema());
							}														
							RESULT = e;
						:}
					|todo_contenido:e
						{:											
							RESULT = e;
						:}
					;

todo_contenido ::= STRING:e {: RESULT = e;:}
					|STRING_WS:e {: RESULT = e;:}
					|STRING_TOTAL:e {: RESULT = e;:}
					|ID_VARIABLE:e {: RESULT = e;:}
					|ID_ELEMENT:e {: RESULT = e;:}
					|MULT:e {: RESULT = e;:}
					|SUMA :e {: RESULT = e;:}
					|MENOS:e {: RESULT = e;:}
					|BARRA90:e {: RESULT = e;:}
					|DIAG:e {: RESULT = e;:}
					|CORD:e {: RESULT = e;:}
					|CORI:e {: RESULT = e;:}
					|IGUAL:e {: RESULT = e;:}
					|LLAI:e {: RESULT = e;:}
					|LLAD:e {: RESULT = e;:}
					|COMA:e {: RESULT = e;:}
					|SEMI:e {: RESULT = e;:}
					|DOS_PUNTOS:e {: RESULT = e;:}
					|ADMIRACION:e {: RESULT = e;:}
					|AND_1:e {: RESULT = e;:}
					|PAI:e {: RESULT = e;:}
					|PAD:e {: RESULT = e;:}
					|CHAR:e {: RESULT = e;:}
					|ENTERO:e {: RESULT = e;:}
					|DECIMAL:e {: RESULT = e;:}
					|BOOLEAN:e {: RESULT = e;:}
					|INVALID:e {: e.setNombreToken("INVALID"); RESULT = e;:}
					;

body ::= etiqueta_body cont_body fin_etiqueta_body
		;

etiqueta_body ::= inicio_body:e0
						{:
							losEstilos = "";
							atributos.clear();
						:}
				 parametros_etiquetas:e
						{:
							if(e.getNombreToken() == null){
								e.setNombreToken("");
							}
							codigoHTML += "<body "+ e.getNombreToken() +" style=\"" + losEstilos + "\" >\n";
							verificarAtributosEtiquetas(e0.getNombreToken(),e0);
						:}
					;

inicio_body ::= MENQ C_BODY:e
						{:
							e.setNombreToken("C_BODY");
							RESULT = e;
						:}
				|error
				;
fin_etiqueta_body ::= 	pre_fin_etiq cierre_body
							{:
								codigoHTML += "</body>\n";
							:}
						|error C_BODY
						;
cierre_body ::= C_BODY MAQ
				|error
				;
cont_body ::= 	cont_body etiqueta_para_body
				|etiqueta_para_body
				;

etiquetas_para_body ::= etiquetas_para_body etiqueta_para_body
					|etiqueta_para_body
					;

etiqueta_para_body ::= 	etq_generica
						|etiqueta_br
						|scripting
						|error parametros_etiquetas
						;
c_etiqueta_g ::=		 C_SPAM:e {:e.setNombreToken("span"); RESULT = e;:}
						|C_INPUT:e {: e.setNombreToken("input"); RESULT = e;:}
						|C_TEXTAREA:e {: e.setNombreToken("textarea"); RESULT = e;:}
						|C_SELECT:e {: e.setNombreToken("select");  RESULT = e;:}
						|C_OPTION:e {:  e.setNombreToken("option");RESULT = e;:}
						|C_DIV:e {:  e.setNombreToken("div");RESULT = e;:}
						|C_IMG:e {: e.setNombreToken("img"); RESULT = e;:}
						|C_BUTTON:e {: e.setNombreToken("button"); RESULT = e;:}
						|C_H1:e {:  e.setNombreToken("h1");RESULT = e;:}
						|C_P:e {: e.setNombreToken("p"); RESULT = e;:}
						;

etq_generica ::= etiqueta_g:e0 cont_etq_g
						{:
							/*if(e != null){
								codigoHTML += e.getLexema();
							}*/							
						:}
				 fin_etiqueta_g:e1
				 		{:
				 			if(!e0.getNombreToken().equals(e1.getNombreToken())){
				 				/*listaErrores.add("Error: ( "+ e1.getLexema() +" ) -> {Linea: "+e1.getLinea()+", Columna: "+e1.getColumna() +" }: Se esperaba la etiqueta: " + e0.getLexema() );*/
				 				addError("Sintactico",e1,e1.getLexema(),"Se esperaba la etiqueta: " + e0.getLexema());
				 			}


				 		:}
			;
etiqueta_g ::= 	inicio_g:e0
					{:
						losEstilos = "";
						atributos.clear();
					:}
				 parametros_etiquetas:e
					{:
						if(e != null){
							if(e.getNombreToken() == null){
								e.setNombreToken("");
							}
							if(e.getNombreToken().equals("input")){
								codigoHTML += "<"+e0.getNombreToken() + " " + e.getNombreToken() +" style=\"" + losEstilos + "\" value=\"";
							}else{
								codigoHTML += "<"+e0.getNombreToken() + " " + e.getNombreToken() +" style=\"" + losEstilos + "\" >";
							}
							verificarAtributosEtiquetas(e0.getNombreToken(),e0);
						}
						 RESULT = e0;
					:}
					;

cont_etq_g ::=  varios_contenido_g
				|varios_contenido:e
					{:
						if(e != null){
							codigoHTML += e.getLexema();
						}
					:}
				|
				;

varios_contenido_g ::= varios_contenido_g un_cont_etq_g
						|un_cont_etq_g
						;

 un_cont_etq_g ::= etq_generica
				|etiqueta_br
				|scripting
				;
inicio_g ::= MENQ c_etiqueta_g:e {: RESULT = e;:}
				;
fin_etiqueta_g ::= 	pre_fin_etiq cierre_g:e
						{:
							if(e.getNombreToken().equals("input")){
								codigoHTML += "\">\n";
							}else{
								codigoHTML += "</"+e.getNombreToken() +">\n";
							}
							 RESULT = e;
						:}
					|error
					;
cierre_g ::= 	c_etiqueta_g:e MAQ {: RESULT = e;:}
				|error
				;

etiqueta_br ::= inicio_br cierre_etiqueta
					{:
						codigoHTML += "<br>\n";
					:}
				;
inicio_br ::= MENQ C_BR
				;

scripting ::= 	etiqueta_scripting cont_scripting 
				;
etiqueta_scripting ::= inicio_scripting cierre_etiqueta
						;
inicio_scripting ::= MENQ C_SCRIPTING
						;
fin_etiqueta_scripting ::= pre_fin_etiq cierre_scripting
							|error C_SCRIPTING
							;
cierre_scripting ::= 	C_SCRIPTING MAQ
						|error
						;

cont_scripting ::= funciones fin_etiqueta_scripting
					|fin_etiqueta_scripting
					;
funciones ::= funciones functions
				|functions
				;
functions ::= on_load
			|process_
			|error parentesis
			;

on_load ::= funcion_on_load cont_funcion
			;
process_ ::= funcion_process_ cont_funcion
			;

funcion_on_load ::= name_on_load parentesis
					;

name_on_load ::= ON_LOAD
				;
parentesis ::= PAI PAD
				|error
				;

funcion_process_ ::= name_funcion_g parentesis
						;
name_funcion_g ::= NOMBRE_FUNCION
					;

cont_funcion ::= inicio_funcion funcion fin_funcion
					;

inicio_funcion ::= CORI 
					|error
					;
fin_funcion ::= CORD
				|error
				;
funcion ::= tipos_instrucciones 
			|
			;
tipos_instrucciones ::= tipos_instrucciones tipo_instruccion
						|tipo_instruccion
						;
tipo_instruccion ::= declaracion_asginacion
					|estruc_if
					|funciones_especiales
					|estruc_repeat
					|estruc_while
					|insert
					;

expr_list ::= expr_list expr:e       
            | expr:e               
			;
expr      ::= expr:e1 SUMA  expr:e2        
             |expr:e1 MENOS expr:e2       
             |expr:e1 MULT expr:e2
             |expr:e1 DIAG expr:e2
             |expr:e1 IGUALACION expr:e2
             |expr:e1 DIFERENTE expr:e2
             |expr:e1 MEN_QUE expr:e2
             |expr:e1 MAY_QUE expr:e2
             |expr:e1 MAQ expr:e2
             |expr:e1 MENQ expr:e2
             |expr:e1 BARRA90 BARRA90 expr:e2
             |expr:e1 AND_1 AND_1 expr:e2
             |ADMIRACION expr:e1
	       	 |PAI expr:e PAD	        
	         |MENOS ENTERO:n
	         |MENOS DECIMAL:d
	         |ENTERO:n
	         |DECIMAL:d
	         |CHAR:c
	         |STRING:s
	         |STRING_WS:s
	         |BOOLEAN:b
	         |ID_VARIABLE
	         |error             
             ;

estruc_init ::= inicio_init funcion fin_estruct
				;
inicio_init ::= el_init ini_estruct
				;
el_init ::= INIT
		|error
		;
ini_estruct ::= LLAI DOS_PUNTOS
				|error
				;
fin_estruct ::= DOS_PUNTOS LLAD END
				|error
				;

declaracion_asginacion ::= declaracion asignacion
							;
fin_instruccion ::= SEMI
					;
declaracion ::= tipo_dato modo
				|nombre_variable
				;
tipo_dato ::= ID_INTEGER
			|ID_DECIMAL
			|ID_STRING
			|ID_BOOLEAN
			|ID_CHAR
			;
modo ::= GLOBAL nombre_variable
		|nombre_variable
		|error
		;
nombre_variable ::= ID_VARIABLE otras_variables
					;
otras_variables ::= otra_variable
					|
					;
otra_variable ::= otra_variable nombre_otra_variable
				  | nombre_otra_variable
				  ;
nombre_otra_variable ::= COMA id_variable
						;
id_variable ::= ID_VARIABLE
				|error
				;
asignacion ::= 	IGUAL tipos_datos fin_instruccion
				|fin_instruccion
				|error
				;
tipos_datos ::= expr
				|GET_ELEMENT_BY_ID cont_element_by_id
				;
cont_element_by_id ::= PAI ID_ELEMENT PAD
					|error
					;
estruc_if ::= 	if estruc_else_if
				;
if ::= IF condicion cont_estruc_if
		;
condicion ::= 	PAI expr PAD
				|error
				;
cont_estruc_if ::= 	THEN instrucciones_para_if
					|error
					;

estruc_else_if ::= 	else_if estruc_else
					|estruc_else
					;
else_if ::= else_if un_else_if
			|un_else_if
			;
un_else_if ::= inicio_else_if condicion cont_estruc_if
				;
inicio_else_if ::= ELSE IF				
					;
estruc_else ::= else
				|
				;
else ::= inicio_else instrucciones_para_if
		;
inicio_else ::= ELSE 
				;
fin_instruccion_error ::= SEMI
						|error
						;

funciones_especiales ::= 	funciones_especiales_parametros fin_instruccion_error
							|funciones_especiales_sin_parametros fin_instruccion_error
							;
funciones_especiales_parametros ::= ASC condicion
									|DESC condicion
									|LETPAR_NUM condicion
									|LETIMPAR_NUM condicion
									|REVERSE condicion
									|ALERT_INFO condicion
									;

funciones_especiales_sin_parametros ::= CARACTER_ALEATORIO parentesis 
										|NUM_ALEATORIO parentesis
										|EXIT parentesis
										;

estruc_repeat ::= REPEAT asig_decla_repeat huntil instrucciones_para_if
				;
asig_decla_repeat ::= PAI declaracion_asginacion_repeat PAD
					 |error
					 ;

declaracion_asginacion_repeat ::= declaracion_repeat asignacion_repeat
									;

declaracion_repeat ::= tipo_dato ID_VARIABLE
						|ID_VARIABLE
						|error
						;
asignacion_repeat ::= 	IGUAL expr
						|error
						;


huntil ::= HUNTIL condicion
			|error
			;
estruc_while ::= WHILE condicion thenwhile instrucciones_para_if
				;
thenwhile ::= 	THENWHILE
				|error
				;
insert ::= INSERT estruc_cont_insert fin_instruccion_error
			;
estruc_cont_insert ::= 	PAI cont_insert PAD
						|error
						;

cont_insert ::=	cont_insert COMA cont_insert
				|ID_ELEMENT
				|ID_VARIABLE
				|error
				;

instrucciones ::= 	estruc_init
					|tipo_instruccion
					;
instrucciones_para_if ::= estruc_init
						|insert
						|funciones_especiales
						;


//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.mycompany.p2c1.ReglasGram.gcic;

import com.mycompany.p2c1.ReglasGram.Token;
import java_cup.runtime.*;
import com.mycompany.p2c1.ReglasGram.Funciones.*;
import com.mycompany.p2c1.ReglasGram.gcic.symGCIC.*;
import com.mycompany.p2c1.objetos.*;
import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.util.Set;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserGCIC extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return symGCIC.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserGCIC() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserGCIC(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserGCIC(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u011f\000\002\002\006\000\002\002\004\000\002\003" +
    "\004\000\002\004\004\000\002\004\003\000\002\005\004" +
    "\000\002\005\003\000\002\005\003\000\002\006\004\000" +
    "\002\006\003\000\002\007\005\000\002\010\005\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\012" +
    "\003\000\002\012\003\000\002\013\003\000\002\013\003" +
    "\000\002\014\004\000\002\014\003\000\002\015\004\000" +
    "\002\016\004\000\002\016\003\000\002\017\005\000\002" +
    "\020\004\000\002\021\004\000\002\021\003\000\002\022" +
    "\004\000\002\022\004\000\002\023\004\000\002\023\003" +
    "\000\002\041\004\000\002\041\003\000\002\042\004\000" +
    "\002\042\003\000\002\043\003\000\002\043\003\000\002" +
    "\043\004\000\002\024\004\000\002\174\002\000\002\025" +
    "\005\000\002\026\004\000\002\027\004\000\002\027\004" +
    "\000\002\030\004\000\002\030\003\000\002\175\002\000" +
    "\002\031\006\000\002\032\004\000\002\033\004\000\002" +
    "\034\004\000\002\034\003\000\002\035\004\000\002\035" +
    "\003\000\002\036\003\000\002\036\002\000\002\037\004" +
    "\000\002\037\003\000\002\040\003\000\002\040\003\000" +
    "\002\040\003\000\002\040\003\000\002\040\003\000\002" +
    "\040\003\000\002\040\003\000\002\040\003\000\002\040" +
    "\003\000\002\040\003\000\002\040\003\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\040\003\000" +
    "\002\040\003\000\002\040\003\000\002\040\003\000\002" +
    "\040\003\000\002\040\003\000\002\040\003\000\002\040" +
    "\003\000\002\040\003\000\002\040\003\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\044\005\000" +
    "\002\176\002\000\002\045\005\000\002\046\004\000\002" +
    "\046\003\000\002\047\004\000\002\047\004\000\002\050" +
    "\004\000\002\050\003\000\002\051\004\000\002\051\003" +
    "\000\002\053\003\000\002\053\003\000\002\053\003\000" +
    "\002\053\004\000\002\054\003\000\002\054\003\000\002" +
    "\054\003\000\002\054\003\000\002\054\003\000\002\054" +
    "\003\000\002\054\003\000\002\054\003\000\002\054\003" +
    "\000\002\054\003\000\002\177\002\000\002\055\006\000" +
    "\002\200\002\000\002\056\005\000\002\057\003\000\002" +
    "\057\003\000\002\057\002\000\002\060\004\000\002\060" +
    "\003\000\002\061\003\000\002\061\003\000\002\061\003" +
    "\000\002\062\004\000\002\063\004\000\002\063\003\000" +
    "\002\064\004\000\002\064\003\000\002\065\004\000\002" +
    "\066\004\000\002\067\004\000\002\070\004\000\002\071" +
    "\004\000\002\072\004\000\002\072\004\000\002\073\004" +
    "\000\002\073\003\000\002\074\004\000\002\074\003\000" +
    "\002\075\004\000\002\075\003\000\002\076\003\000\002" +
    "\076\003\000\002\076\004\000\002\077\004\000\002\100" +
    "\004\000\002\101\004\000\002\102\003\000\002\103\004" +
    "\000\002\103\003\000\002\104\004\000\002\105\003\000" +
    "\002\201\002\000\002\106\006\000\002\107\003\000\002" +
    "\107\003\000\002\110\003\000\002\110\003\000\002\111" +
    "\003\000\002\111\002\000\002\112\004\000\002\112\003" +
    "\000\002\113\003\000\002\113\003\000\002\113\003\000" +
    "\002\113\003\000\002\113\003\000\002\113\003\000\002" +
    "\114\004\000\002\114\003\000\002\115\005\000\002\115" +
    "\005\000\002\115\005\000\002\115\005\000\002\115\005" +
    "\000\002\115\005\000\002\115\005\000\002\115\005\000" +
    "\002\115\005\000\002\115\005\000\002\115\006\000\002" +
    "\115\006\000\002\115\004\000\002\115\005\000\002\115" +
    "\004\000\002\115\004\000\002\115\003\000\002\115\003" +
    "\000\002\115\003\000\002\115\003\000\002\115\003\000" +
    "\002\115\003\000\002\115\003\000\002\115\003\000\002" +
    "\116\005\000\002\117\004\000\002\120\003\000\002\120" +
    "\003\000\002\122\004\000\002\122\003\000\002\121\005" +
    "\000\002\121\003\000\002\123\004\000\002\124\003\000" +
    "\002\202\002\000\002\125\005\000\002\203\002\000\002" +
    "\125\004\000\002\126\003\000\002\126\003\000\002\126" +
    "\003\000\002\126\003\000\002\126\003\000\002\127\004" +
    "\000\002\127\003\000\002\127\003\000\002\204\002\000" +
    "\002\130\005\000\002\131\003\000\002\131\002\000\002" +
    "\132\004\000\002\132\003\000\002\133\004\000\002\134" +
    "\003\000\002\134\003\000\002\135\005\000\002\135\003" +
    "\000\002\135\003\000\002\136\003\000\002\136\004\000" +
    "\002\137\005\000\002\137\003\000\002\140\004\000\002" +
    "\141\005\000\002\142\005\000\002\142\003\000\002\143" +
    "\004\000\002\143\003\000\002\144\004\000\002\144\003" +
    "\000\002\145\004\000\002\145\003\000\002\146\005\000" +
    "\002\147\004\000\002\150\003\000\002\150\002\000\002" +
    "\151\004\000\002\152\003\000\002\153\003\000\002\153" +
    "\003\000\002\154\004\000\002\154\004\000\002\155\004" +
    "\000\002\155\004\000\002\155\004\000\002\155\004\000" +
    "\002\155\004\000\002\155\004\000\002\156\004\000\002" +
    "\156\004\000\002\156\004\000\002\157\006\000\002\160" +
    "\005\000\002\160\003\000\002\161\004\000\002\162\004" +
    "\000\002\162\003\000\002\162\003\000\002\163\004\000" +
    "\002\163\003\000\002\164\004\000\002\164\003\000\002" +
    "\165\006\000\002\166\003\000\002\166\003\000\002\167" +
    "\005\000\002\170\005\000\002\170\003\000\002\171\005" +
    "\000\002\171\003\000\002\171\003\000\002\171\003\000" +
    "\002\172\003\000\002\172\003\000\002\173\003\000\002" +
    "\173\003\000\002\173\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u019c\000\006\003\004\004\006\001\002\000\010\003" +
    "\ufffd\006\ufffd\014\ufffd\001\002\000\006\003\036\004\040" +
    "\001\002\000\004\005\034\001\002\000\010\003\015\006" +
    "\014\014\016\001\002\000\004\002\011\001\002\000\004" +
    "\002\000\001\002\000\010\003\026\011\025\012\030\001" +
    "\002\000\006\006\ufff8\014\ufff8\001\002\000\004\007\023" +
    "\001\002\000\074\003\ufffa\004\ufffa\006\ufffa\010\ufffa\011" +
    "\ufffa\012\ufffa\013\ufffa\015\ufffa\021\ufffa\022\ufffa\042\ufffa" +
    "\043\ufffa\044\ufffa\045\ufffa\046\ufffa\047\ufffa\050\ufffa\051" +
    "\ufffa\052\ufffa\053\ufffa\054\ufffa\055\ufffa\056\ufffa\065\ufffa" +
    "\066\ufffa\067\ufffa\070\ufffa\071\ufffa\122\ufffa\001\002\000" +
    "\074\003\ufffb\004\ufffb\006\ufffb\010\ufffb\011\ufffb\012\ufffb" +
    "\013\ufffb\015\ufffb\021\ufffb\022\ufffb\042\ufffb\043\ufffb\044" +
    "\ufffb\045\ufffb\046\ufffb\047\ufffb\050\ufffb\051\ufffb\052\ufffb" +
    "\053\ufffb\054\ufffb\055\ufffb\056\ufffb\065\ufffb\066\ufffb\067" +
    "\ufffb\070\ufffb\071\ufffb\122\ufffb\001\002\000\006\003\uffff" +
    "\004\uffff\001\002\000\006\006\014\014\022\001\002\000" +
    "\006\006\ufff9\014\ufff9\001\002\000\074\003\ufffc\004\ufffc" +
    "\006\ufffc\010\ufffc\011\ufffc\012\ufffc\013\ufffc\015\ufffc\021" +
    "\ufffc\022\ufffc\042\ufffc\043\ufffc\044\ufffc\045\ufffc\046\ufffc" +
    "\047\ufffc\050\ufffc\051\ufffc\052\ufffc\053\ufffc\054\ufffc\055" +
    "\ufffc\056\ufffc\065\ufffc\066\ufffc\067\ufffc\070\ufffc\071\ufffc" +
    "\122\ufffc\001\002\000\004\010\024\001\002\000\010\003" +
    "\ufff6\011\ufff6\012\ufff6\001\002\000\006\003\ufff5\013\ufff5" +
    "\001\002\000\006\003\ufff3\013\ufff3\001\002\000\006\003" +
    "\032\013\033\001\002\000\006\003\ufff4\013\ufff4\001\002" +
    "\000\006\006\ufff7\014\ufff7\001\002\000\006\006\ufff1\014" +
    "\ufff1\001\002\000\006\006\ufff2\014\ufff2\001\002\000\010" +
    "\003\ufffe\006\ufffe\014\ufffe\001\002\000\006\003\154\014" +
    "\155\001\002\000\006\003\uffe6\014\uffe6\001\002\000\006" +
    "\003\161\004\163\001\002\000\004\016\157\001\002\000" +
    "\006\003\045\004\042\001\002\000\006\017\153\020\152" +
    "\001\002\000\006\003\154\014\155\001\002\000\006\003" +
    "\143\004\141\001\002\000\010\003\015\006\014\014\016" +
    "\001\002\000\006\003\uffe0\004\uffe0\001\002\000\006\003" +
    "\uffdd\004\uffdd\001\002\000\010\003\uffd9\006\uffd9\014\uffd9" +
    "\001\002\000\006\003\uffdc\004\uffdc\001\002\000\074\003" +
    "\uffc9\004\uffc9\006\066\010\073\011\104\012\122\013\072" +
    "\015\071\021\117\022\111\042\114\043\121\044\120\045" +
    "\067\046\101\047\103\050\110\051\077\052\074\053\106" +
    "\054\100\055\070\056\105\065\075\066\115\067\076\070" +
    "\102\071\116\122\112\001\002\000\006\003\054\004\056" +
    "\001\002\000\004\017\065\001\002\000\006\003\062\017" +
    "\063\001\002\000\004\015\060\001\002\000\006\003\uffda" +
    "\004\uffda\001\002\000\044\003\uffec\005\uffec\016\uffec\017" +
    "\uffec\020\uffec\023\uffec\024\uffec\025\uffec\026\uffec\027\uffec" +
    "\030\uffec\031\uffec\032\uffec\034\uffec\035\uffec\036\uffec\037" +
    "\uffec\001\002\000\006\003\uffd6\004\uffd6\001\002\000\006" +
    "\003\uffd3\004\uffd3\001\002\000\004\014\064\001\002\000" +
    "\006\003\uffd4\004\uffd4\001\002\000\006\003\uffd5\004\uffd5" +
    "\001\002\000\074\003\uffbb\004\uffbb\006\uffbb\010\uffbb\011" +
    "\uffbb\012\uffbb\013\uffbb\015\uffbb\021\uffbb\022\uffbb\042\uffbb" +
    "\043\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb\051" +
    "\uffbb\052\uffbb\053\uffbb\054\uffbb\055\uffbb\056\uffbb\065\uffbb" +
    "\066\uffbb\067\uffbb\070\uffbb\071\uffbb\122\uffbb\001\002\000" +
    "\074\003\uffb8\004\uffb8\006\uffb8\010\uffb8\011\uffb8\012\uffb8" +
    "\013\uffb8\015\uffb8\021\uffb8\022\uffb8\042\uffb8\043\uffb8\044" +
    "\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8\052\uffb8" +
    "\053\uffb8\054\uffb8\055\uffb8\056\uffb8\065\uffb8\066\uffb8\067" +
    "\uffb8\070\uffb8\071\uffb8\122\uffb8\001\002\000\074\003\uffbf" +
    "\004\uffbf\006\uffbf\010\uffbf\011\uffbf\012\uffbf\013\uffbf\015" +
    "\uffbf\021\uffbf\022\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf" +
    "\046\uffbf\047\uffbf\050\uffbf\051\uffbf\052\uffbf\053\uffbf\054" +
    "\uffbf\055\uffbf\056\uffbf\065\uffbf\066\uffbf\067\uffbf\070\uffbf" +
    "\071\uffbf\122\uffbf\001\002\000\074\003\uffbd\004\uffbd\006" +
    "\uffbd\010\uffbd\011\uffbd\012\uffbd\013\uffbd\015\uffbd\021\uffbd" +
    "\022\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd\047" +
    "\uffbd\050\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd\055\uffbd" +
    "\056\uffbd\065\uffbd\066\uffbd\067\uffbd\070\uffbd\071\uffbd\122" +
    "\uffbd\001\002\000\074\003\uffbc\004\uffbc\006\uffbc\010\uffbc" +
    "\011\uffbc\012\uffbc\013\uffbc\015\uffbc\021\uffbc\022\uffbc\042" +
    "\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc" +
    "\051\uffbc\052\uffbc\053\uffbc\054\uffbc\055\uffbc\056\uffbc\065" +
    "\uffbc\066\uffbc\067\uffbc\070\uffbc\071\uffbc\122\uffbc\001\002" +
    "\000\074\003\uffba\004\uffba\006\uffba\010\uffba\011\uffba\012" +
    "\uffba\013\uffba\015\uffba\021\uffba\022\uffba\042\uffba\043\uffba" +
    "\044\uffba\045\uffba\046\uffba\047\uffba\050\uffba\051\uffba\052" +
    "\uffba\053\uffba\054\uffba\055\uffba\056\uffba\065\uffba\066\uffba" +
    "\067\uffba\070\uffba\071\uffba\122\uffba\001\002\000\074\003" +
    "\uffbe\004\uffbe\006\uffbe\010\uffbe\011\uffbe\012\uffbe\013\uffbe" +
    "\015\uffbe\021\uffbe\022\uffbe\042\uffbe\043\uffbe\044\uffbe\045" +
    "\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe\052\uffbe\053\uffbe" +
    "\054\uffbe\055\uffbe\056\uffbe\065\uffbe\066\uffbe\067\uffbe\070" +
    "\uffbe\071\uffbe\122\uffbe\001\002\000\074\003\uffb0\004\uffb0" +
    "\006\uffb0\010\uffb0\011\uffb0\012\uffb0\013\uffb0\015\uffb0\021" +
    "\uffb0\022\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0" +
    "\047\uffb0\050\uffb0\051\uffb0\052\uffb0\053\uffb0\054\uffb0\055" +
    "\uffb0\056\uffb0\065\uffb0\066\uffb0\067\uffb0\070\uffb0\071\uffb0" +
    "\122\uffb0\001\002\000\074\003\uffae\004\uffae\006\uffae\010" +
    "\uffae\011\uffae\012\uffae\013\uffae\015\uffae\021\uffae\022\uffae" +
    "\042\uffae\043\uffae\044\uffae\045\uffae\046\uffae\047\uffae\050" +
    "\uffae\051\uffae\052\uffae\053\uffae\054\uffae\055\uffae\056\uffae" +
    "\065\uffae\066\uffae\067\uffae\070\uffae\071\uffae\122\uffae\001" +
    "\002\000\074\003\uffb6\004\uffb6\006\uffb6\010\uffb6\011\uffb6" +
    "\012\uffb6\013\uffb6\015\uffb6\021\uffb6\022\uffb6\042\uffb6\043" +
    "\uffb6\044\uffb6\045\uffb6\046\uffb6\047\uffb6\050\uffb6\051\uffb6" +
    "\052\uffb6\053\uffb6\054\uffb6\055\uffb6\056\uffb6\065\uffb6\066" +
    "\uffb6\067\uffb6\070\uffb6\071\uffb6\122\uffb6\001\002\000\074" +
    "\003\uffc0\004\uffc0\006\uffc0\010\uffc0\011\uffc0\012\uffc0\013" +
    "\uffc0\015\uffc0\021\uffc0\022\uffc0\042\uffc0\043\uffc0\044\uffc0" +
    "\045\uffc0\046\uffc0\047\uffc0\050\uffc0\051\uffc0\052\uffc0\053" +
    "\uffc0\054\uffc0\055\uffc0\056\uffc0\065\uffc0\066\uffc0\067\uffc0" +
    "\070\uffc0\071\uffc0\122\uffc0\001\002\000\074\003\uffb5\004" +
    "\uffb5\006\uffb5\010\uffb5\011\uffb5\012\uffb5\013\uffb5\015\uffb5" +
    "\021\uffb5\022\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5\046" +
    "\uffb5\047\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5\054\uffb5" +
    "\055\uffb5\056\uffb5\065\uffb5\066\uffb5\067\uffb5\070\uffb5\071" +
    "\uffb5\122\uffb5\001\002\000\074\003\uffad\004\uffad\006\uffad" +
    "\010\uffad\011\uffad\012\uffad\013\uffad\015\uffad\021\uffad\022" +
    "\uffad\042\uffad\043\uffad\044\uffad\045\uffad\046\uffad\047\uffad" +
    "\050\uffad\051\uffad\052\uffad\053\uffad\054\uffad\055\uffad\056" +
    "\uffad\065\uffad\066\uffad\067\uffad\070\uffad\071\uffad\122\uffad" +
    "\001\002\000\074\003\uffb7\004\uffb7\006\uffb7\010\uffb7\011" +
    "\uffb7\012\uffb7\013\uffb7\015\uffb7\021\uffb7\022\uffb7\042\uffb7" +
    "\043\uffb7\044\uffb7\045\uffb7\046\uffb7\047\uffb7\050\uffb7\051" +
    "\uffb7\052\uffb7\053\uffb7\054\uffb7\055\uffb7\056\uffb7\065\uffb7" +
    "\066\uffb7\067\uffb7\070\uffb7\071\uffb7\122\uffb7\001\002\000" +
    "\074\003\uffc6\004\uffc6\006\uffc6\010\uffc6\011\uffc6\012\uffc6" +
    "\013\uffc6\015\uffc6\021\uffc6\022\uffc6\042\uffc6\043\uffc6\044" +
    "\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6" +
    "\053\uffc6\054\uffc6\055\uffc6\056\uffc6\065\uffc6\066\uffc6\067" +
    "\uffc6\070\uffc6\071\uffc6\122\uffc6\001\002\000\074\003\uffc1" +
    "\004\uffc1\006\uffc1\010\uffc1\011\uffc1\012\uffc1\013\uffc1\015" +
    "\uffc1\021\uffc1\022\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1" +
    "\046\uffc1\047\uffc1\050\uffc1\051\uffc1\052\uffc1\053\uffc1\054" +
    "\uffc1\055\uffc1\056\uffc1\065\uffc1\066\uffc1\067\uffc1\070\uffc1" +
    "\071\uffc1\122\uffc1\001\002\000\074\003\uffb3\004\uffb3\006" +
    "\uffb3\010\uffb3\011\uffb3\012\uffb3\013\uffb3\015\uffb3\021\uffb3" +
    "\022\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3\047" +
    "\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3\055\uffb3" +
    "\056\uffb3\065\uffb3\066\uffb3\067\uffb3\070\uffb3\071\uffb3\122" +
    "\uffb3\001\002\000\006\003\uffd2\004\uffd2\001\002\000\074" +
    "\003\uffb4\004\uffb4\006\uffb4\010\uffb4\011\uffb4\012\uffb4\013" +
    "\uffb4\015\uffb4\021\uffb4\022\uffb4\042\uffb4\043\uffb4\044\uffb4" +
    "\045\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4\052\uffb4\053" +
    "\uffb4\054\uffb4\055\uffb4\056\uffb4\065\uffb4\066\uffb4\067\uffb4" +
    "\070\uffb4\071\uffb4\122\uffb4\001\002\000\074\003\uffc3\004" +
    "\uffc3\006\uffc3\010\uffc3\011\uffc3\012\uffc3\013\uffc3\015\uffc3" +
    "\021\uffc3\022\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3\046" +
    "\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3\053\uffc3\054\uffc3" +
    "\055\uffc3\056\uffc3\065\uffc3\066\uffc3\067\uffc3\070\uffc3\071" +
    "\uffc3\122\uffc3\001\002\000\074\003\uffc2\004\uffc2\006\uffc2" +
    "\010\uffc2\011\uffc2\012\uffc2\013\uffc2\015\uffc2\021\uffc2\022" +
    "\uffc2\042\uffc2\043\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2" +
    "\050\uffc2\051\uffc2\052\uffc2\053\uffc2\054\uffc2\055\uffc2\056" +
    "\uffc2\065\uffc2\066\uffc2\067\uffc2\070\uffc2\071\uffc2\122\uffc2" +
    "\001\002\000\074\003\uffca\004\uffca\006\066\010\073\011" +
    "\104\012\122\013\072\015\071\021\117\022\111\042\114" +
    "\043\121\044\120\045\067\046\101\047\103\050\110\051" +
    "\077\052\074\053\106\054\100\055\070\056\105\065\075" +
    "\066\115\067\076\070\102\071\116\122\112\001\002\000" +
    "\074\003\uffb2\004\uffb2\006\uffb2\010\uffb2\011\uffb2\012\uffb2" +
    "\013\uffb2\015\uffb2\021\uffb2\022\uffb2\042\uffb2\043\uffb2\044" +
    "\uffb2\045\uffb2\046\uffb2\047\uffb2\050\uffb2\051\uffb2\052\uffb2" +
    "\053\uffb2\054\uffb2\055\uffb2\056\uffb2\065\uffb2\066\uffb2\067" +
    "\uffb2\070\uffb2\071\uffb2\122\uffb2\001\002\000\074\003\uffaf" +
    "\004\uffaf\006\uffaf\010\uffaf\011\uffaf\012\uffaf\013\uffaf\015" +
    "\uffaf\021\uffaf\022\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf" +
    "\046\uffaf\047\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf\054" +
    "\uffaf\055\uffaf\056\uffaf\065\uffaf\066\uffaf\067\uffaf\070\uffaf" +
    "\071\uffaf\122\uffaf\001\002\000\074\003\uffac\004\uffac\006" +
    "\uffac\010\uffac\011\uffac\012\uffac\013\uffac\015\uffac\021\uffac" +
    "\022\uffac\042\uffac\043\uffac\044\uffac\045\uffac\046\uffac\047" +
    "\uffac\050\uffac\051\uffac\052\uffac\053\uffac\054\uffac\055\uffac" +
    "\056\uffac\065\uffac\066\uffac\067\uffac\070\uffac\071\uffac\122" +
    "\uffac\001\002\000\074\003\uffc4\004\uffc4\006\uffc4\010\uffc4" +
    "\011\uffc4\012\uffc4\013\uffc4\015\uffc4\021\uffc4\022\uffc4\042" +
    "\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4\047\uffc4\050\uffc4" +
    "\051\uffc4\052\uffc4\053\uffc4\054\uffc4\055\uffc4\056\uffc4\065" +
    "\uffc4\066\uffc4\067\uffc4\070\uffc4\071\uffc4\122\uffc4\001\002" +
    "\000\074\003\uffb9\004\uffb9\006\uffb9\010\uffb9\011\uffb9\012" +
    "\uffb9\013\uffb9\015\uffb9\021\uffb9\022\uffb9\042\uffb9\043\uffb9" +
    "\044\uffb9\045\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9\052" +
    "\uffb9\053\uffb9\054\uffb9\055\uffb9\056\uffb9\065\uffb9\066\uffb9" +
    "\067\uffb9\070\uffb9\071\uffb9\122\uffb9\001\002\000\074\003" +
    "\uffb1\004\uffb1\006\uffb1\010\uffb1\011\uffb1\012\uffb1\013\uffb1" +
    "\015\uffb1\021\uffb1\022\uffb1\042\uffb1\043\uffb1\044\uffb1\045" +
    "\uffb1\046\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1\053\uffb1" +
    "\054\uffb1\055\uffb1\056\uffb1\065\uffb1\066\uffb1\067\uffb1\070" +
    "\uffb1\071\uffb1\122\uffb1\001\002\000\074\003\uffc5\004\uffc5" +
    "\006\uffc5\010\uffc5\011\uffc5\012\uffc5\013\uffc5\015\uffc5\021" +
    "\uffc5\022\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5" +
    "\047\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5\055" +
    "\uffc5\056\uffc5\065\uffc5\066\uffc5\067\uffc5\070\uffc5\071\uffc5" +
    "\122\uffc5\001\002\000\074\003\uffc7\004\uffc7\006\uffc7\010" +
    "\uffc7\011\uffc7\012\uffc7\013\uffc7\015\uffc7\021\uffc7\022\uffc7" +
    "\042\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050" +
    "\uffc7\051\uffc7\052\uffc7\053\uffc7\054\uffc7\055\uffc7\056\uffc7" +
    "\065\uffc7\066\uffc7\067\uffc7\070\uffc7\071\uffc7\122\uffc7\001" +
    "\002\000\074\003\uffc8\004\uffc8\006\uffc8\010\uffc8\011\uffc8" +
    "\012\uffc8\013\uffc8\015\uffc8\021\uffc8\022\uffc8\042\uffc8\043" +
    "\uffc8\044\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8" +
    "\052\uffc8\053\uffc8\054\uffc8\055\uffc8\056\uffc8\065\uffc8\066" +
    "\uffc8\067\uffc8\070\uffc8\071\uffc8\122\uffc8\001\002\000\006" +
    "\003\126\004\056\001\002\000\006\003\uffcd\004\uffcd\001" +
    "\002\000\006\003\uffd1\004\uffd1\001\002\000\006\003\131" +
    "\020\132\001\002\000\006\003\uffcb\004\uffcb\001\002\000" +
    "\004\014\134\001\002\000\006\003\uffce\004\uffce\001\002" +
    "\000\006\003\uffcc\004\uffcc\001\002\000\010\003\015\006" +
    "\014\014\016\001\002\000\006\003\uffd8\004\uffd8\001\002" +
    "\000\006\003\uffdb\004\uffdb\001\002\000\006\003\uffe9\004" +
    "\uffe9\001\002\000\010\015\060\017\153\020\152\001\002" +
    "\000\006\003\147\016\150\001\002\000\012\003\015\006" +
    "\014\014\016\016\145\001\002\000\006\003\uffe1\004\uffe1" +
    "\001\002\000\006\003\uffe4\004\uffe4\001\002\000\006\003" +
    "\uffe5\004\uffe5\001\002\000\006\003\uffe2\004\uffe2\001\002" +
    "\000\004\014\151\001\002\000\006\003\uffe3\004\uffe3\001" +
    "\002\000\006\003\uffcf\014\uffcf\001\002\000\010\003\uffd7" +
    "\006\uffd7\014\uffd7\001\002\000\100\003\uffef\004\uffef\006" +
    "\uffef\010\uffef\011\uffef\012\uffef\013\uffef\015\uffef\021\uffef" +
    "\022\uffef\040\uffef\041\uffef\042\uffef\043\uffef\044\uffef\045" +
    "\uffef\046\uffef\047\uffef\050\uffef\051\uffef\052\uffef\053\uffef" +
    "\054\uffef\055\uffef\056\uffef\065\uffef\066\uffef\067\uffef\070" +
    "\uffef\071\uffef\122\uffef\001\002\000\100\003\ufff0\004\ufff0" +
    "\006\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0\015\ufff0\021" +
    "\ufff0\022\ufff0\040\ufff0\041\ufff0\042\ufff0\043\ufff0\044\ufff0" +
    "\045\ufff0\046\ufff0\047\ufff0\050\ufff0\051\ufff0\052\ufff0\053" +
    "\ufff0\054\ufff0\055\ufff0\056\ufff0\065\ufff0\066\ufff0\067\ufff0" +
    "\070\ufff0\071\ufff0\122\ufff0\001\002\000\074\003\uffd0\004" +
    "\uffd0\006\uffd0\010\uffd0\011\uffd0\012\uffd0\013\uffd0\015\uffd0" +
    "\021\uffd0\022\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0\046" +
    "\uffd0\047\uffd0\050\uffd0\051\uffd0\052\uffd0\053\uffd0\054\uffd0" +
    "\055\uffd0\056\uffd0\065\uffd0\066\uffd0\067\uffd0\070\uffd0\071" +
    "\uffd0\122\uffd0\001\002\000\006\003\uffe7\014\uffe7\001\002" +
    "\000\006\003\u0198\004\056\001\002\000\010\003\uffa7\006" +
    "\uffa7\014\uffa7\001\002\000\006\003\200\004\172\001\002" +
    "\000\004\023\167\001\002\000\010\003\uffaa\006\uffaa\014" +
    "\uffaa\001\002\000\010\003\015\006\014\014\016\001\002" +
    "\000\006\003\uffa9\004\uffa9\001\002\000\010\003\uffa8\006" +
    "\uffa8\014\uffa8\001\002\000\006\003\uff9e\004\uff9e\001\002" +
    "\000\006\003\uffa0\004\uffa0\001\002\000\032\024\u0185\025" +
    "\u0184\026\u0180\027\u017d\030\u0182\031\u017c\032\u017e\033\u0195" +
    "\034\u0183\035\u0186\036\u017b\037\u0196\001\002\000\006\003" +
    "\u018d\004\u018a\001\002\000\006\003\154\014\155\001\002" +
    "\000\006\003\uffa1\004\uffa1\001\002\000\074\003\uff8c\004" +
    "\172\006\066\010\073\011\104\012\122\013\072\015\071" +
    "\021\117\022\111\042\114\043\121\044\120\045\067\046" +
    "\101\047\103\050\110\051\077\052\074\053\106\054\100" +
    "\055\070\056\105\065\075\066\115\067\076\070\102\071" +
    "\116\122\112\001\002\000\012\003\221\004\056\040\210" +
    "\041\212\001\002\000\010\003\015\006\014\014\016\001" +
    "\002\000\010\003\uff90\006\uff90\014\uff90\001\002\000\006" +
    "\003\uff9f\004\uff9f\001\002\000\006\003\154\014\155\001" +
    "\002\000\012\003\uff7e\004\uff7e\040\uff7e\041\uff7e\001\002" +
    "\000\010\003\015\006\014\014\016\001\002\000\074\003" +
    "\uff8f\004\uff8f\006\uff8f\010\uff8f\011\uff8f\012\uff8f\013\uff8f" +
    "\015\uff8f\021\uff8f\022\uff8f\042\uff8f\043\uff8f\044\uff8f\045" +
    "\uff8f\046\uff8f\047\uff8f\050\uff8f\051\uff8f\052\uff8f\053\uff8f" +
    "\054\uff8f\055\uff8f\056\uff8f\065\uff8f\066\uff8f\067\uff8f\070" +
    "\uff8f\071\uff8f\122\uff8f\001\002\000\006\003\uff9d\004\uff9d" +
    "\001\002\000\006\003\uff6e\042\uff6e\001\002\000\006\003" +
    "\235\006\234\001\002\000\006\003\uff6a\042\uff6a\001\002" +
    "\000\006\003\u016c\037\u016a\001\002\000\012\003\uff75\004" +
    "\uff75\040\uff75\041\uff75\001\002\000\006\003\uff77\004\uff77" +
    "\001\002\000\012\003\uff74\004\uff74\040\uff74\041\uff74\001" +
    "\002\000\006\003\uff7f\004\uff7f\001\002\000\012\003\uff73" +
    "\004\uff73\040\uff73\041\uff73\001\002\000\010\003\227\037" +
    "\u0168\042\226\001\002\000\012\003\221\004\056\040\210" +
    "\041\212\001\002\000\006\003\235\006\234\001\002\000" +
    "\006\003\227\042\226\001\002\000\006\003\227\042\226" +
    "\001\002\000\004\043\231\001\002\000\016\003\uff6c\004" +
    "\uff6c\006\uff6c\040\uff6c\041\uff6c\051\uff6c\001\002\000\006" +
    "\003\uff6b\006\uff6b\001\002\000\016\003\uff6d\004\uff6d\006" +
    "\uff6d\040\uff6d\041\uff6d\051\uff6d\001\002\000\006\003\uff6f" +
    "\006\uff6f\001\002\000\012\003\uff70\004\uff70\040\uff70\041" +
    "\uff70\001\002\000\054\003\uff67\013\uff67\022\uff67\057\uff67" +
    "\072\uff67\073\uff67\074\uff67\075\uff67\076\uff67\077\uff67\100" +
    "\uff67\101\uff67\102\uff67\104\uff67\105\uff67\106\uff67\107\uff67" +
    "\110\uff67\111\uff67\116\uff67\120\uff67\001\002\000\054\003" +
    "\uff66\013\uff66\022\uff66\057\uff66\072\uff66\073\uff66\074\uff66" +
    "\075\uff66\076\uff66\077\uff66\100\uff66\101\uff66\102\uff66\104" +
    "\uff66\105\uff66\106\uff66\107\uff66\110\uff66\111\uff66\116\uff66" +
    "\120\uff66\001\002\000\054\003\uff69\013\uff69\022\uff69\057" +
    "\uff69\072\uff69\073\uff69\074\uff69\075\uff69\076\uff69\077\uff69" +
    "\100\uff69\101\uff69\102\uff69\104\uff69\105\uff69\106\uff69\107" +
    "\uff69\110\uff69\111\uff69\116\uff69\120\uff69\001\002\000\054" +
    "\003\uff62\013\uff62\022\uff33\057\262\072\272\073\243\074" +
    "\261\075\240\076\300\077\274\100\266\101\271\102\241" +
    "\104\273\105\253\106\260\107\246\110\247\111\250\116" +
    "\276\120\245\001\002\000\006\003\302\042\301\001\002" +
    "\000\006\003\227\042\226\001\002\000\056\003\uff5a\013" +
    "\uff5a\022\uff5a\046\uff5a\057\uff5a\072\uff5a\073\uff5a\074\uff5a" +
    "\075\uff5a\076\uff5a\077\uff5a\100\uff5a\101\uff5a\102\uff5a\104" +
    "\uff5a\105\uff5a\106\uff5a\107\uff5a\110\uff5a\111\uff5a\116\uff5a" +
    "\120\uff5a\001\002\000\006\003\302\042\301\001\002\000" +
    "\004\022\u014b\001\002\000\006\003\302\042\301\001\002" +
    "\000\010\003\uff30\022\uff30\103\uff30\001\002\000\010\003" +
    "\uff2d\022\uff2d\103\uff2d\001\002\000\006\003\302\042\301" +
    "\001\002\000\056\003\uff63\013\uff63\022\uff33\046\uff63\057" +
    "\262\072\272\073\243\074\261\075\240\076\300\077\274" +
    "\100\266\101\271\102\241\104\273\105\253\106\260\107" +
    "\246\110\247\111\250\116\276\120\245\001\002\000\010" +
    "\003\uff35\022\uff35\103\uff35\001\002\000\010\003\uff2f\022" +
    "\uff2f\103\uff2f\001\002\000\056\003\uff5d\013\uff5d\022\uff5d" +
    "\046\uff5d\057\uff5d\072\uff5d\073\uff5d\074\uff5d\075\uff5d\076" +
    "\uff5d\077\uff5d\100\uff5d\101\uff5d\102\uff5d\104\uff5d\105\uff5d" +
    "\106\uff5d\107\uff5d\110\uff5d\111\uff5d\116\uff5d\120\uff5d\001" +
    "\002\000\056\003\uff5c\013\uff5c\022\uff5c\046\uff5c\057\uff5c" +
    "\072\uff5c\073\uff5c\074\uff5c\075\uff5c\076\uff5c\077\uff5c\100" +
    "\uff5c\101\uff5c\102\uff5c\104\uff5c\105\uff5c\106\uff5c\107\uff5c" +
    "\110\uff5c\111\uff5c\116\uff5c\120\uff5c\001\002\000\056\003" +
    "\uff5f\013\uff5f\022\uff5f\046\uff5f\057\uff5f\072\uff5f\073\uff5f" +
    "\074\uff5f\075\uff5f\076\uff5f\077\uff5f\100\uff5f\101\uff5f\102" +
    "\uff5f\104\uff5f\105\uff5f\106\uff5f\107\uff5f\110\uff5f\111\uff5f" +
    "\116\uff5f\120\uff5f\001\002\000\010\003\u013c\010\u013d\051" +
    "\u013f\001\002\000\010\003\uff2e\022\uff2e\103\uff2e\001\002" +
    "\000\006\003\302\042\301\001\002\000\006\003\u0132\042" +
    "\u0130\001\002\000\006\003\u011b\051\u011c\001\002\000\060" +
    "\003\uff0c\013\uff0c\022\uff0c\046\uff0c\057\uff0c\072\uff0c\073" +
    "\uff0c\074\uff0c\075\uff0c\076\uff0c\077\uff0c\100\uff0c\101\uff0c" +
    "\102\uff0c\104\uff0c\105\uff0c\106\uff0c\107\uff0c\110\uff0c\111" +
    "\uff0c\112\u011e\116\uff0c\120\uff0c\001\002\000\056\003\uff5e" +
    "\013\uff5e\022\uff5e\046\uff5e\057\uff5e\072\uff5e\073\uff5e\074" +
    "\uff5e\075\uff5e\076\uff5e\077\uff5e\100\uff5e\101\uff5e\102\uff5e" +
    "\104\uff5e\105\uff5e\106\uff5e\107\uff5e\110\uff5e\111\uff5e\116" +
    "\uff5e\120\uff5e\001\002\000\006\003\227\042\226\001\002" +
    "\000\056\003\uff60\013\uff60\022\uff60\046\uff60\057\uff60\072" +
    "\uff60\073\uff60\074\uff60\075\uff60\076\uff60\077\uff60\100\uff60" +
    "\101\uff60\102\uff60\104\uff60\105\uff60\106\uff60\107\uff60\110" +
    "\uff60\111\uff60\116\uff60\120\uff60\001\002\000\006\003\u011b" +
    "\051\u011c\001\002\000\006\003\302\042\301\001\002\000" +
    "\006\003\302\042\301\001\002\000\010\003\uff31\022\uff31" +
    "\103\uff31\001\002\000\006\003\227\042\226\001\002\000" +
    "\056\003\uff5b\013\uff5b\022\uff5b\046\uff5b\057\uff5b\072\uff5b" +
    "\073\uff5b\074\uff5b\075\uff5b\076\uff5b\077\uff5b\100\uff5b\101" +
    "\uff5b\102\uff5b\104\uff5b\105\uff5b\106\uff5b\107\uff5b\110\uff5b" +
    "\111\uff5b\116\uff5b\120\uff5b\001\002\000\006\003\365\042" +
    "\364\001\002\000\006\003\360\013\362\001\002\000\006" +
    "\003\302\042\301\001\002\000\030\003\314\011\312\012" +
    "\306\022\311\042\313\050\316\055\305\065\317\066\307" +
    "\067\304\070\310\001\002\000\040\003\uff16\051\uff16\057" +
    "\uff16\072\uff16\073\uff16\074\uff16\075\uff16\076\uff16\077\uff16" +
    "\100\uff16\101\uff16\102\uff16\113\uff16\114\uff16\121\uff16\001" +
    "\002\000\006\003\uff01\051\uff01\001\002\000\036\004\uff46" +
    "\014\uff46\015\uff46\043\uff46\051\uff46\052\uff46\053\uff46\054" +
    "\uff46\055\uff46\056\uff46\061\uff46\062\uff46\063\uff46\064\uff46" +
    "\001\002\000\006\066\357\067\356\001\002\000\036\004" +
    "\uff43\014\uff43\015\uff43\043\uff43\051\uff43\052\uff43\053\uff43" +
    "\054\uff43\055\uff43\056\uff43\061\uff43\062\uff43\063\uff43\064" +
    "\uff43\001\002\000\036\004\uff47\014\uff47\015\uff47\043\uff47" +
    "\051\uff47\052\uff47\053\uff47\054\uff47\055\uff47\056\uff47\061" +
    "\uff47\062\uff47\063\uff47\064\uff47\001\002\000\036\004\uff42" +
    "\014\uff42\015\uff42\043\uff42\051\uff42\052\uff42\053\uff42\054" +
    "\uff42\055\uff42\056\uff42\061\uff42\062\uff42\063\uff42\064\uff42" +
    "\001\002\000\036\004\uff41\014\uff41\015\uff41\043\uff41\051" +
    "\uff41\052\uff41\053\uff41\054\uff41\055\uff41\056\uff41\061\uff41" +
    "\062\uff41\063\uff41\064\uff41\001\002\000\036\004\uff44\014" +
    "\uff44\015\uff44\043\uff44\051\uff44\052\uff44\053\uff44\054\uff44" +
    "\055\uff44\056\uff44\061\uff44\062\uff44\063\uff44\064\uff44\001" +
    "\002\000\030\003\314\011\312\012\306\022\311\042\313" +
    "\050\316\055\305\065\317\066\307\067\304\070\310\001" +
    "\002\000\036\004\uff40\014\uff40\015\uff40\043\uff40\051\uff40" +
    "\052\uff40\053\uff40\054\uff40\055\uff40\056\uff40\061\uff40\062" +
    "\uff40\063\uff40\064\uff40\001\002\000\034\004\324\014\332" +
    "\015\327\043\353\052\330\053\331\054\323\055\322\056" +
    "\326\061\333\062\325\063\321\064\334\001\002\000\030" +
    "\003\314\011\312\012\306\022\311\042\313\050\316\055" +
    "\305\065\317\066\307\067\304\070\310\001\002\000\036" +
    "\004\uff45\014\uff45\015\uff45\043\uff45\051\uff45\052\uff45\053" +
    "\uff45\054\uff45\055\uff45\056\uff45\061\uff45\062\uff45\063\uff45" +
    "\064\uff45\001\002\000\036\004\uff4b\014\uff4b\015\uff4b\043" +
    "\uff4b\051\uff4b\052\uff4b\053\uff4b\054\uff4b\055\uff4b\056\uff4b" +
    "\061\uff4b\062\uff4b\063\uff4b\064\uff4b\001\002\000\030\003" +
    "\314\011\312\012\306\022\311\042\313\050\316\055\305" +
    "\065\317\066\307\067\304\070\310\001\002\000\030\003" +
    "\314\011\312\012\306\022\311\042\313\050\316\055\305" +
    "\065\317\066\307\067\304\070\310\001\002\000\030\003" +
    "\314\011\312\012\306\022\311\042\313\050\316\055\305" +
    "\065\317\066\307\067\304\070\310\001\002\000\030\003" +
    "\314\011\312\012\306\022\311\042\313\050\316\055\305" +
    "\065\317\066\307\067\304\070\310\001\002\000\030\003" +
    "\314\011\312\012\306\022\311\042\313\050\316\055\305" +
    "\065\317\066\307\067\304\070\310\001\002\000\030\003" +
    "\314\011\312\012\306\022\311\042\313\050\316\055\305" +
    "\065\317\066\307\067\304\070\310\001\002\000\030\003" +
    "\314\011\312\012\306\022\311\042\313\050\316\055\305" +
    "\065\317\066\307\067\304\070\310\001\002\000\004\052" +
    "\342\001\002\000\004\053\340\001\002\000\030\003\314" +
    "\011\312\012\306\022\311\042\313\050\316\055\305\065" +
    "\317\066\307\067\304\070\310\001\002\000\030\003\314" +
    "\011\312\012\306\022\311\042\313\050\316\055\305\065" +
    "\317\066\307\067\304\070\310\001\002\000\030\003\314" +
    "\011\312\012\306\022\311\042\313\050\316\055\305\065" +
    "\317\066\307\067\304\070\310\001\002\000\036\004\uff52" +
    "\014\uff52\015\uff52\043\uff52\051\uff52\052\330\053\331\054" +
    "\uff52\055\uff52\056\uff52\061\uff52\062\uff52\063\uff52\064\uff52" +
    "\001\002\000\036\004\uff53\014\uff53\015\uff53\043\uff53\051" +
    "\uff53\052\330\053\331\054\uff53\055\uff53\056\uff53\061\uff53" +
    "\062\uff53\063\uff53\064\uff53\001\002\000\036\004\uff4f\014" +
    "\uff4f\015\uff4f\043\uff4f\051\uff4f\052\330\053\331\054\uff4f" +
    "\055\uff4f\056\uff4f\061\uff4f\062\uff4f\063\uff4f\064\uff4f\001" +
    "\002\000\030\003\314\011\312\012\306\022\311\042\313" +
    "\050\316\055\305\065\317\066\307\067\304\070\310\001" +
    "\002\000\036\004\uff4c\014\uff4c\015\uff4c\043\uff4c\051\uff4c" +
    "\052\uff4c\053\uff4c\054\uff4c\055\uff4c\056\uff4c\061\uff4c\062" +
    "\uff4c\063\uff4c\064\uff4c\001\002\000\030\003\314\011\312" +
    "\012\306\022\311\042\313\050\316\055\305\065\317\066" +
    "\307\067\304\070\310\001\002\000\036\004\uff4d\014\uff4d" +
    "\015\uff4d\043\uff4d\051\uff4d\052\uff4d\053\331\054\uff4d\055" +
    "\uff4d\056\uff4d\061\uff4d\062\uff4d\063\uff4d\064\uff4d\001\002" +
    "\000\036\004\324\014\332\015\uff54\043\uff54\051\uff54\052" +
    "\330\053\331\054\uff54\055\uff54\056\uff54\061\333\062\325" +
    "\063\321\064\334\001\002\000\036\004\324\014\332\015" +
    "\uff55\043\uff55\051\uff55\052\330\053\331\054\uff55\055\uff55" +
    "\056\uff55\061\333\062\325\063\321\064\334\001\002\000" +
    "\036\004\uff51\014\uff51\015\uff51\043\uff51\051\uff51\052\330" +
    "\053\331\054\uff51\055\uff51\056\uff51\061\uff51\062\uff51\063" +
    "\uff51\064\uff51\001\002\000\036\004\uff4e\014\uff4e\015\uff4e" +
    "\043\uff4e\051\uff4e\052\330\053\331\054\uff4e\055\uff4e\056" +
    "\uff4e\061\uff4e\062\uff4e\063\uff4e\064\uff4e\001\002\000\036" +
    "\004\324\014\332\015\327\043\uff57\051\uff57\052\330\053" +
    "\331\054\uff57\055\uff57\056\326\061\333\062\325\063\321" +
    "\064\334\001\002\000\036\004\324\014\332\015\327\043" +
    "\uff56\051\uff56\052\330\053\331\054\uff56\055\uff56\056\326" +
    "\061\333\062\325\063\321\064\334\001\002\000\036\004" +
    "\uff50\014\uff50\015\uff50\043\uff50\051\uff50\052\330\053\331" +
    "\054\uff50\055\uff50\056\uff50\061\uff50\062\uff50\063\uff50\064" +
    "\uff50\001\002\000\040\003\uff17\051\uff17\057\uff17\072\uff17" +
    "\073\uff17\074\uff17\075\uff17\076\uff17\077\uff17\100\uff17\101" +
    "\uff17\102\uff17\113\uff17\114\uff17\121\uff17\001\002\000\034" +
    "\004\324\014\332\015\327\043\355\052\330\053\331\054" +
    "\323\055\322\056\326\061\333\062\325\063\321\064\334" +
    "\001\002\000\036\004\uff4a\014\uff4a\015\uff4a\043\uff4a\051" +
    "\uff4a\052\uff4a\053\uff4a\054\uff4a\055\uff4a\056\uff4a\061\uff4a" +
    "\062\uff4a\063\uff4a\064\uff4a\001\002\000\036\004\uff48\014" +
    "\uff48\015\uff48\043\uff48\051\uff48\052\uff48\053\uff48\054\uff48" +
    "\055\uff48\056\uff48\061\uff48\062\uff48\063\uff48\064\uff48\001" +
    "\002\000\036\004\uff49\014\uff49\015\uff49\043\uff49\051\uff49" +
    "\052\uff49\053\uff49\054\uff49\055\uff49\056\uff49\061\uff49\062" +
    "\uff49\063\uff49\064\uff49\001\002\000\012\003\uff64\004\uff64" +
    "\040\uff64\041\uff64\001\002\000\012\003\uff68\004\uff68\040" +
    "\uff68\041\uff68\001\002\000\012\003\uff65\004\uff65\040\uff65" +
    "\041\uff65\001\002\000\006\003\u0102\117\u0101\001\002\000" +
    "\020\003\370\022\367\104\273\105\253\106\260\107\246" +
    "\110\247\001\002\000\006\003\ufefa\117\ufefa\001\002\000" +
    "\004\043\u0100\001\002\000\006\003\ufef7\010\ufef7\001\002" +
    "\000\006\003\ufef6\010\ufef6\001\002\000\004\022\377\001" +
    "\002\000\006\003\374\010\375\001\002\000\004\043\ufef9" +
    "\001\002\000\004\043\ufef4\001\002\000\030\003\314\011" +
    "\312\012\306\022\311\042\313\050\316\055\305\065\317" +
    "\066\307\067\304\070\310\001\002\000\034\004\324\014" +
    "\332\015\327\043\ufef5\052\330\053\331\054\323\055\322" +
    "\056\326\061\333\062\325\063\321\064\334\001\002\000" +
    "\006\003\ufef8\010\ufef8\001\002\000\006\003\ufefb\117\ufefb" +
    "\001\002\000\006\003\302\042\301\001\002\000\032\003" +
    "\ufef2\057\ufef2\072\ufef2\073\ufef2\074\ufef2\075\ufef2\076\ufef2" +
    "\077\ufef2\100\ufef2\101\ufef2\102\ufef2\114\ufef2\001\002\000" +
    "\032\003\u010b\057\262\072\272\073\243\074\261\075\240" +
    "\076\300\077\274\100\266\101\271\102\241\114\u0106\001" +
    "\002\000\060\003\ufee4\013\ufee4\022\ufee4\046\ufee4\057\ufee4" +
    "\072\ufee4\073\ufee4\074\ufee4\075\ufee4\076\ufee4\077\ufee4\100" +
    "\ufee4\101\ufee4\102\ufee4\104\ufee4\105\ufee4\106\ufee4\107\ufee4" +
    "\110\ufee4\111\ufee4\112\ufee4\116\ufee4\120\ufee4\001\002\000" +
    "\006\003\u0112\044\u0113\001\002\000\006\003\uff3d\044\uff3d" +
    "\001\002\000\054\003\uff62\022\uff33\046\uff62\057\262\072" +
    "\272\073\243\074\261\075\240\076\300\077\274\100\266" +
    "\101\271\102\241\104\273\105\253\106\260\107\246\110" +
    "\247\111\250\116\276\120\245\001\002\000\060\003\ufee3" +
    "\013\ufee3\022\ufee3\046\ufee3\057\ufee3\072\ufee3\073\ufee3\074" +
    "\ufee3\075\ufee3\076\ufee3\077\ufee3\100\ufee3\101\ufee3\102\ufee3" +
    "\104\ufee3\105\ufee3\106\ufee3\107\ufee3\110\ufee3\111\ufee3\112" +
    "\ufee3\116\ufee3\120\ufee3\001\002\000\060\003\ufee5\013\ufee5" +
    "\022\ufee5\046\ufee5\057\ufee5\072\ufee5\073\ufee5\074\ufee5\075" +
    "\ufee5\076\ufee5\077\ufee5\100\ufee5\101\ufee5\102\ufee5\104\ufee5" +
    "\105\ufee5\106\ufee5\107\ufee5\110\ufee5\111\ufee5\112\ufee5\116" +
    "\ufee5\120\ufee5\001\002\000\056\003\ufefc\013\ufefc\022\ufefc" +
    "\046\ufefc\057\ufefc\072\ufefc\073\ufefc\074\ufefc\075\ufefc\076" +
    "\ufefc\077\ufefc\100\ufefc\101\ufefc\102\ufefc\104\ufefc\105\ufefc" +
    "\106\ufefc\107\ufefc\110\ufefc\111\ufefc\116\ufefc\120\ufefc\001" +
    "\002\000\006\003\uff3c\044\uff3c\001\002\000\006\003\u010e" +
    "\046\u010f\001\002\000\060\003\uff3f\013\uff3f\022\uff3f\046" +
    "\uff3f\057\uff3f\072\uff3f\073\uff3f\074\uff3f\075\uff3f\076\uff3f" +
    "\077\uff3f\100\uff3f\101\uff3f\102\uff3f\104\uff3f\105\uff3f\106" +
    "\uff3f\107\uff3f\110\uff3f\111\uff3f\112\uff3f\116\uff3f\120\uff3f" +
    "\001\002\000\060\003\uff38\013\uff38\022\uff38\046\uff38\057" +
    "\uff38\072\uff38\073\uff38\074\uff38\075\uff38\076\uff38\077\uff38" +
    "\100\uff38\101\uff38\102\uff38\104\uff38\105\uff38\106\uff38\107" +
    "\uff38\110\uff38\111\uff38\112\uff38\116\uff38\120\uff38\001\002" +
    "\000\004\045\u0110\001\002\000\004\115\u0111\001\002\000" +
    "\060\003\uff39\013\uff39\022\uff39\046\uff39\057\uff39\072\uff39" +
    "\073\uff39\074\uff39\075\uff39\076\uff39\077\uff39\100\uff39\101" +
    "\uff39\102\uff39\104\uff39\105\uff39\106\uff39\107\uff39\110\uff39" +
    "\111\uff39\112\uff39\116\uff39\120\uff39\001\002\000\054\003" +
    "\uff3a\022\uff3a\046\uff3a\057\uff3a\072\uff3a\073\uff3a\074\uff3a" +
    "\075\uff3a\076\uff3a\077\uff3a\100\uff3a\101\uff3a\102\uff3a\104" +
    "\uff3a\105\uff3a\106\uff3a\107\uff3a\110\uff3a\111\uff3a\116\uff3a" +
    "\120\uff3a\001\002\000\004\046\u0115\001\002\000\054\003" +
    "\uff3e\022\uff3e\046\uff3e\057\uff3e\072\uff3e\073\uff3e\074\uff3e" +
    "\075\uff3e\076\uff3e\077\uff3e\100\uff3e\101\uff3e\102\uff3e\104" +
    "\uff3e\105\uff3e\106\uff3e\107\uff3e\110\uff3e\111\uff3e\116\uff3e" +
    "\120\uff3e\001\002\000\054\003\uff3b\022\uff3b\046\uff3b\057" +
    "\uff3b\072\uff3b\073\uff3b\074\uff3b\075\uff3b\076\uff3b\077\uff3b" +
    "\100\uff3b\101\uff3b\102\uff3b\104\uff3b\105\uff3b\106\uff3b\107" +
    "\uff3b\110\uff3b\111\uff3b\116\uff3b\120\uff3b\001\002\000\032" +
    "\003\ufef3\057\ufef3\072\ufef3\073\ufef3\074\ufef3\075\ufef3\076" +
    "\ufef3\077\ufef3\100\ufef3\101\ufef3\102\ufef3\114\ufef3\001\002" +
    "\000\006\003\ufeff\051\ufeff\001\002\000\006\003\uff05\051" +
    "\uff05\001\002\000\006\003\uff00\051\uff00\001\002\000\060" +
    "\003\uff06\013\uff06\022\uff06\046\uff06\057\uff06\072\uff06\073" +
    "\uff06\074\uff06\075\uff06\076\uff06\077\uff06\100\uff06\101\uff06" +
    "\102\uff06\104\uff06\105\uff06\106\uff06\107\uff06\110\uff06\111" +
    "\uff06\112\uff06\116\uff06\120\uff06\001\002\000\060\003\uff08" +
    "\013\uff08\022\uff08\046\uff08\057\uff08\072\uff08\073\uff08\074" +
    "\uff08\075\uff08\076\uff08\077\uff08\100\uff08\101\uff08\102\uff08" +
    "\104\uff08\105\uff08\106\uff08\107\uff08\110\uff08\111\uff08\112" +
    "\uff08\116\uff08\120\uff08\001\002\000\060\003\uff09\013\uff09" +
    "\022\uff09\046\uff09\057\uff09\072\uff09\073\uff09\074\uff09\075" +
    "\uff09\076\uff09\077\uff09\100\uff09\101\uff09\102\uff09\104\uff09" +
    "\105\uff09\106\uff09\107\uff09\110\uff09\111\uff09\112\uff09\116" +
    "\uff09\120\uff09\001\002\000\006\003\ufefe\051\ufefe\001\002" +
    "\000\034\003\uff0a\057\uff0a\072\uff0a\073\uff0a\074\uff0a\075" +
    "\uff0a\076\uff0a\077\uff0a\100\uff0a\101\uff0a\102\uff0a\111\u012e" +
    "\114\uff0a\001\002\000\060\003\uff10\013\uff10\022\uff10\046" +
    "\uff10\057\uff10\072\uff10\073\uff10\074\uff10\075\uff10\076\uff10" +
    "\077\uff10\100\uff10\101\uff10\102\uff10\104\uff10\105\uff10\106" +
    "\uff10\107\uff10\110\uff10\111\uff10\112\uff10\116\uff10\120\uff10" +
    "\001\002\000\006\003\302\042\301\001\002\000\032\003" +
    "\u010b\057\262\072\272\073\243\074\261\075\240\076\300" +
    "\077\274\100\266\101\271\102\241\114\u0106\001\002\000" +
    "\060\003\uff0c\013\uff0c\022\uff0c\046\uff0c\057\uff0c\072\uff0c" +
    "\073\uff0c\074\uff0c\075\uff0c\076\uff0c\077\uff0c\100\uff0c\101" +
    "\uff0c\102\uff0c\104\uff0c\105\uff0c\106\uff0c\107\uff0c\110\uff0c" +
    "\111\uff0c\112\u011e\116\uff0c\120\uff0c\001\002\000\056\003" +
    "\uff12\013\uff12\022\uff12\046\uff12\057\uff12\072\uff12\073\uff12" +
    "\074\uff12\075\uff12\076\uff12\077\uff12\100\uff12\101\uff12\102" +
    "\uff12\104\uff12\105\uff12\106\uff12\107\uff12\110\uff12\111\uff12" +
    "\116\uff12\120\uff12\001\002\000\056\003\uff0d\013\uff0d\022" +
    "\uff0d\046\uff0d\057\uff0d\072\uff0d\073\uff0d\074\uff0d\075\uff0d" +
    "\076\uff0d\077\uff0d\100\uff0d\101\uff0d\102\uff0d\104\uff0d\105" +
    "\uff0d\106\uff0d\107\uff0d\110\uff0d\111\uff0d\116\uff0d\120\uff0d" +
    "\001\002\000\056\003\uff19\013\uff19\022\uff19\046\uff19\057" +
    "\uff19\072\uff19\073\uff19\074\uff19\075\uff19\076\uff19\077\uff19" +
    "\100\uff19\101\uff19\102\uff19\104\uff19\105\uff19\106\uff19\107" +
    "\uff19\110\uff19\111\uff19\116\uff19\120\uff19\001\002\000\060" +
    "\003\uff11\013\uff11\022\uff11\046\uff11\057\uff11\072\uff11\073" +
    "\uff11\074\uff11\075\uff11\076\uff11\077\uff11\100\uff11\101\uff11" +
    "\102\uff11\104\uff11\105\uff11\106\uff11\107\uff11\110\uff11\111" +
    "\uff11\112\uff11\116\uff11\120\uff11\001\002\000\056\003\uff13" +
    "\013\uff13\022\uff13\046\uff13\057\uff13\072\uff13\073\uff13\074" +
    "\uff13\075\uff13\076\uff13\077\uff13\100\uff13\101\uff13\102\uff13" +
    "\104\uff13\105\uff13\106\uff13\107\uff13\110\uff13\111\uff13\116" +
    "\uff13\120\uff13\001\002\000\056\003\uff0b\013\uff0b\022\uff0b" +
    "\046\uff0b\057\uff0b\072\uff0b\073\uff0b\074\uff0b\075\uff0b\076" +
    "\uff0b\077\uff0b\100\uff0b\101\uff0b\102\uff0b\104\uff0b\105\uff0b" +
    "\106\uff0b\107\uff0b\110\uff0b\111\uff0b\116\uff0b\120\uff0b\001" +
    "\002\000\006\003\u012a\113\u012b\001\002\000\060\003\uff14" +
    "\013\uff14\022\uff14\046\uff14\057\uff14\072\uff14\073\uff14\074" +
    "\uff14\075\uff14\076\uff14\077\uff14\100\uff14\101\uff14\102\uff14" +
    "\104\uff14\105\uff14\106\uff14\107\uff14\110\uff14\111\uff14\112" +
    "\uff14\116\uff14\120\uff14\001\002\000\032\003\u010b\057\262" +
    "\072\272\073\243\074\261\075\240\076\300\077\274\100" +
    "\266\101\271\102\241\114\u0106\001\002\000\060\003\uff0f" +
    "\013\uff0f\022\uff0f\046\uff0f\057\uff0f\072\uff0f\073\uff0f\074" +
    "\uff0f\075\uff0f\076\uff0f\077\uff0f\100\uff0f\101\uff0f\102\uff0f" +
    "\104\uff0f\105\uff0f\106\uff0f\107\uff0f\110\uff0f\111\uff0f\112" +
    "\uff0f\116\uff0f\120\uff0f\001\002\000\060\003\uff15\013\uff15" +
    "\022\uff15\046\uff15\057\uff15\072\uff15\073\uff15\074\uff15\075" +
    "\uff15\076\uff15\077\uff15\100\uff15\101\uff15\102\uff15\104\uff15" +
    "\105\uff15\106\uff15\107\uff15\110\uff15\111\uff15\112\uff15\116" +
    "\uff15\120\uff15\001\002\000\006\003\uff0e\042\uff0e\001\002" +
    "\000\060\003\uff07\013\uff07\022\uff07\046\uff07\057\uff07\072" +
    "\uff07\073\uff07\074\uff07\075\uff07\076\uff07\077\uff07\100\uff07" +
    "\101\uff07\102\uff07\104\uff07\105\uff07\106\uff07\107\uff07\110" +
    "\uff07\111\uff07\112\uff07\116\uff07\120\uff07\001\002\000\010" +
    "\003\u0135\022\u0134\122\u0137\001\002\000\006\003\u011b\051" +
    "\u011c\001\002\000\006\003\ufeec\051\ufeec\001\002\000\060" +
    "\003\ufeee\013\ufeee\022\ufeee\046\ufeee\057\ufeee\072\ufeee\073" +
    "\ufeee\074\ufeee\075\ufeee\076\ufeee\077\ufeee\100\ufeee\101\ufeee" +
    "\102\ufeee\104\ufeee\105\ufeee\106\ufeee\107\ufeee\110\ufeee\111" +
    "\ufeee\112\ufeee\116\ufeee\120\ufeee\001\002\000\006\043\ufee9" +
    "\047\ufee9\001\002\000\006\043\ufee8\047\ufee8\001\002\000" +
    "\006\043\u0139\047\u0138\001\002\000\006\043\ufeea\047\ufeea" +
    "\001\002\000\010\003\u0135\022\u0134\122\u0137\001\002\000" +
    "\006\003\ufeed\051\ufeed\001\002\000\006\043\ufeeb\047\ufeeb" +
    "\001\002\000\006\003\uff03\051\uff03\001\002\000\056\003" +
    "\uff1e\013\uff1e\022\uff1e\046\uff1e\057\uff1e\072\uff1e\073\uff1e" +
    "\074\uff1e\075\uff1e\076\uff1e\077\uff1e\100\uff1e\101\uff1e\102" +
    "\uff1e\104\uff1e\105\uff1e\106\uff1e\107\uff1e\110\uff1e\111\uff1e" +
    "\116\uff1e\120\uff1e\001\002\000\032\003\314\011\312\012" +
    "\306\022\311\042\313\050\316\055\305\060\u0141\065\317" +
    "\066\307\067\304\070\310\001\002\000\056\003\uff1f\013" +
    "\uff1f\022\uff1f\046\uff1f\057\uff1f\072\uff1f\073\uff1f\074\uff1f" +
    "\075\uff1f\076\uff1f\077\uff1f\100\uff1f\101\uff1f\102\uff1f\104" +
    "\uff1f\105\uff1f\106\uff1f\107\uff1f\110\uff1f\111\uff1f\116\uff1f" +
    "\120\uff1f\001\002\000\056\003\uff36\013\uff36\022\uff36\046" +
    "\uff36\057\uff36\072\uff36\073\uff36\074\uff36\075\uff36\076\uff36" +
    "\077\uff36\100\uff36\101\uff36\102\uff36\104\uff36\105\uff36\106" +
    "\uff36\107\uff36\110\uff36\111\uff36\116\uff36\120\uff36\001\002" +
    "\000\056\003\uff37\013\uff37\022\uff37\046\uff37\057\uff37\072" +
    "\uff37\073\uff37\074\uff37\075\uff37\076\uff37\077\uff37\100\uff37" +
    "\101\uff37\102\uff37\104\uff37\105\uff37\106\uff37\107\uff37\110" +
    "\uff37\111\uff37\116\uff37\120\uff37\001\002\000\006\003\u0146" +
    "\042\u0145\001\002\000\004\051\u013f\001\002\000\034\004" +
    "\324\014\332\015\327\051\uff1d\052\330\053\331\054\323" +
    "\055\322\056\326\061\333\062\325\063\321\064\334\001" +
    "\002\000\056\003\uff20\013\uff20\022\uff20\046\uff20\057\uff20" +
    "\072\uff20\073\uff20\074\uff20\075\uff20\076\uff20\077\uff20\100" +
    "\uff20\101\uff20\102\uff20\104\uff20\105\uff20\106\uff20\107\uff20" +
    "\110\uff20\111\uff20\116\uff20\120\uff20\001\002\000\004\122" +
    "\u0148\001\002\000\004\051\uff1a\001\002\000\004\051\uff1c" +
    "\001\002\000\004\043\u0149\001\002\000\004\051\uff1b\001" +
    "\002\000\010\003\u014c\022\u014b\103\u014d\001\002\000\012" +
    "\003\uff29\010\uff29\047\uff29\051\uff29\001\002\000\010\003" +
    "\uff2a\010\uff2a\051\uff2a\001\002\000\004\022\u014b\001\002" +
    "\000\010\003\uff34\010\uff34\051\uff34\001\002\000\010\003" +
    "\uff2b\010\uff2b\051\uff2b\001\002\000\010\003\uff2c\010\uff2c" +
    "\051\uff2c\001\002\000\012\003\uff26\010\uff26\047\u0152\051" +
    "\uff26\001\002\000\006\003\u0158\022\u0157\001\002\000\012" +
    "\003\uff27\010\uff27\047\u0152\051\uff27\001\002\000\012\003" +
    "\uff24\010\uff24\047\uff24\051\uff24\001\002\000\010\003\uff28" +
    "\010\uff28\051\uff28\001\002\000\012\003\uff25\010\uff25\047" +
    "\uff25\051\uff25\001\002\000\012\003\uff22\010\uff22\047\uff22" +
    "\051\uff22\001\002\000\012\003\uff21\010\uff21\047\uff21\051" +
    "\uff21\001\002\000\012\003\uff23\010\uff23\047\uff23\051\uff23" +
    "\001\002\000\056\003\uff61\013\uff61\022\uff61\046\uff61\057" +
    "\uff61\072\uff61\073\uff61\074\uff61\075\uff61\076\uff61\077\uff61" +
    "\100\uff61\101\uff61\102\uff61\104\uff61\105\uff61\106\uff61\107" +
    "\uff61\110\uff61\111\uff61\116\uff61\120\uff61\001\002\000\006" +
    "\003\u012a\113\u012b\001\002\000\060\003\uff18\013\uff18\022" +
    "\uff18\046\uff18\057\uff18\072\uff18\073\uff18\074\uff18\075\uff18" +
    "\076\uff18\077\uff18\100\uff18\101\uff18\102\uff18\104\uff18\105" +
    "\uff18\106\uff18\107\uff18\110\uff18\111\uff18\112\uff18\116\uff18" +
    "\120\uff18\001\002\000\006\003\u015f\121\u0160\001\002\000" +
    "\032\003\u010b\057\262\072\272\073\243\074\261\075\240" +
    "\076\300\077\274\100\266\101\271\102\241\114\u0106\001" +
    "\002\000\032\003\ufeef\057\ufeef\072\ufeef\073\ufeef\074\ufeef" +
    "\075\ufeef\076\ufeef\077\ufeef\100\ufeef\101\ufeef\102\ufeef\114" +
    "\ufeef\001\002\000\032\003\ufef0\057\ufef0\072\ufef0\073\ufef0" +
    "\074\ufef0\075\ufef0\076\ufef0\077\ufef0\100\ufef0\101\ufef0\102" +
    "\ufef0\114\ufef0\001\002\000\056\003\ufef1\013\ufef1\022\ufef1" +
    "\046\ufef1\057\ufef1\072\ufef1\073\ufef1\074\ufef1\075\ufef1\076" +
    "\ufef1\077\ufef1\100\ufef1\101\ufef1\102\ufef1\104\ufef1\105\ufef1" +
    "\106\ufef1\107\ufef1\110\ufef1\111\ufef1\116\ufef1\120\ufef1\001" +
    "\002\000\010\003\uff32\010\uff32\051\uff32\001\002\000\006" +
    "\003\uff04\051\uff04\001\002\000\006\003\ufefd\051\ufefd\001" +
    "\002\000\006\003\uff02\051\uff02\001\002\000\012\003\uff76" +
    "\004\uff76\040\uff76\041\uff76\001\002\000\006\003\uff78\004" +
    "\uff78\001\002\000\006\003\uff7b\004\uff7b\001\002\000\012" +
    "\003\uff72\004\uff72\040\uff72\041\uff72\001\002\000\004\014" +
    "\u016d\001\002\000\006\003\uff7c\004\uff7c\001\002\000\006" +
    "\003\uff79\004\uff79\001\002\000\006\003\uff7a\004\uff7a\001" +
    "\002\000\012\003\uff71\004\uff71\040\uff71\041\uff71\001\002" +
    "\000\006\003\uff87\004\uff87\001\002\000\006\003\uff88\004" +
    "\uff88\001\002\000\006\003\uff8e\004\172\001\002\000\006" +
    "\003\uff8a\004\uff8a\001\002\000\006\003\uff92\004\uff92\001" +
    "\002\000\006\003\uff89\004\uff89\001\002\000\074\003\uff8d" +
    "\004\uff8d\006\066\010\073\011\104\012\122\013\072\015" +
    "\071\021\117\022\111\042\114\043\121\044\120\045\067" +
    "\046\101\047\103\050\110\051\077\052\074\053\106\054" +
    "\100\055\070\056\105\065\075\066\115\067\076\070\102" +
    "\071\116\122\112\001\002\000\006\003\u0178\004\056\001" +
    "\002\000\006\003\uff91\004\uff91\001\002\000\006\003\uff84" +
    "\004\uff84\001\002\000\030\003\u0181\024\u0185\025\u0184\026" +
    "\u0180\027\u017d\030\u0182\031\u017c\032\u017e\034\u0183\035\u0186" +
    "\036\u017b\001\002\000\006\003\uff85\004\uff85\001\002\000" +
    "\010\003\uff93\006\uff93\014\uff93\001\002\000\010\003\uff97" +
    "\006\uff97\014\uff97\001\002\000\010\003\uff99\006\uff99\014" +
    "\uff99\001\002\000\010\003\uff96\006\uff96\014\uff96\001\002" +
    "\000\004\014\u0187\001\002\000\010\003\uff9a\006\uff9a\014" +
    "\uff9a\001\002\000\006\003\uff82\004\uff82\001\002\000\010" +
    "\003\uff98\006\uff98\014\uff98\001\002\000\010\003\uff95\006" +
    "\uff95\014\uff95\001\002\000\010\003\uff9b\006\uff9b\014\uff9b" +
    "\001\002\000\010\003\uff9c\006\uff9c\014\uff9c\001\002\000" +
    "\010\003\uff94\006\uff94\014\uff94\001\002\000\006\003\uff83" +
    "\004\uff83\001\002\000\006\003\uff8b\004\uff8b\001\002\000" +
    "\006\003\uff81\004\uff81\001\002\000\034\015\060\024\u0185" +
    "\025\u0184\026\u0180\027\u017d\030\u0182\031\u017c\032\u017e\033" +
    "\u0195\034\u0183\035\u0186\036\u017b\037\u0196\001\002\000\006" +
    "\003\u0191\023\u0190\001\002\000\006\003\uffa2\004\uffa2\001" +
    "\002\000\012\003\015\006\014\014\016\023\u018f\001\002" +
    "\000\006\003\uffab\004\uffab\001\002\000\006\003\uffa5\004" +
    "\uffa5\001\002\000\004\014\u0193\001\002\000\006\003\uffa3" +
    "\004\uffa3\001\002\000\006\003\uffa6\004\uffa6\001\002\000" +
    "\006\003\uffa4\004\uffa4\001\002\000\010\003\uff86\006\uff86" +
    "\014\uff86\001\002\000\006\003\uff80\014\uff80\001\002\000" +
    "\006\003\uff7d\014\uff7d\001\002\000\004\002\001\001\002" +
    "\000\004\002\uffed\001\002\000\006\003\u019b\005\u019a\001" +
    "\002\000\004\014\u019d\001\002\000\004\002\uffea\001\002" +
    "\000\004\002\uffee\001\002\000\004\002\uffeb\001\002\000" +
    "\006\003\uffe8\004\uffe8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u019c\000\010\002\007\003\004\004\006\001\001\000" +
    "\002\001\001\000\010\017\036\020\040\021\034\001\001" +
    "\000\002\001\001\000\012\005\016\006\017\007\012\010" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\020\010\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\u019d\001\001\000\002\001" +
    "\001\000\010\044\157\045\161\046\163\001\001\000\002" +
    "\001\001\000\022\024\046\025\052\026\047\031\050\032" +
    "\051\033\042\041\043\043\045\001\001\000\002\001\001" +
    "\000\004\013\155\001\001\000\024\015\141\022\137\024" +
    "\046\025\052\026\047\031\050\032\051\033\042\043\143" +
    "\001\001\000\012\005\136\006\017\007\012\010\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\174\134" +
    "\001\001\000\002\001\001\000\010\036\106\037\112\040" +
    "\122\001\001\000\006\015\054\027\056\001\001\000\002" +
    "\001\001\000\004\030\060\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\175\124\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\040\123" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\015\127\034\126\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\035\132\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\005\135\006\017\007\012\010\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\145\001\001\000\012\005\136\006\017\007" +
    "\012\010\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\014\u0196\015\u0198\001\001\000\002\001\001" +
    "\000\026\051\172\053\174\055\170\056\175\062\200\065" +
    "\201\066\173\067\167\070\176\071\202\001\001\000\002" +
    "\001\001\000\004\176\164\001\001\000\012\005\165\006" +
    "\017\007\012\010\011\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\054" +
    "\u0193\001\001\000\030\015\u018a\047\u018d\053\u018b\055\170" +
    "\056\175\062\200\065\201\066\173\067\167\070\176\071" +
    "\202\001\001\000\004\013\u0188\001\001\000\002\001\001" +
    "\000\034\037\u0174\040\122\055\u0173\056\175\057\u0172\060" +
    "\u0170\061\u0171\062\200\065\u016f\066\173\067\u016e\070\176" +
    "\071\202\001\001\000\030\015\212\072\214\074\216\075" +
    "\221\076\213\077\215\100\217\101\210\102\223\104\222" +
    "\105\224\001\001\000\012\005\206\006\017\007\012\010" +
    "\011\001\001\000\004\200\204\001\001\000\002\001\001" +
    "\000\004\013\203\001\001\000\002\001\001\000\012\005" +
    "\205\006\017\007\012\010\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\106\u016d\107" +
    "\235\001\001\000\002\001\001\000\004\073\u016a\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\103\u0168\001\001" +
    "\000\024\015\212\072\u0166\076\u0165\077\215\100\217\101" +
    "\210\102\223\104\222\105\224\001\001\000\006\106\232" +
    "\107\235\001\001\000\004\103\231\001\001\000\004\103" +
    "\227\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\201\236" +
    "\001\001\000\040\111\276\112\250\113\266\123\255\125" +
    "\256\126\251\140\264\141\263\154\253\155\262\156\267" +
    "\157\254\165\274\167\241\203\243\001\001\000\004\142" +
    "\u0164\001\001\000\004\103\u0163\001\001\000\002\001\001" +
    "\000\004\142\u0162\001\001\000\004\130\u0161\001\001\000" +
    "\004\142\u015c\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\142\u015a\001\001\000\034\113\u0159\123\255\125" +
    "\256\126\251\140\264\141\263\154\253\155\262\156\267" +
    "\157\254\165\274\167\241\203\243\001\001\000\004\202" +
    "\u0149\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\124\u013d\135\u013f\001" +
    "\001\000\002\001\001\000\004\142\u013a\001\001\000\004" +
    "\170\u0130\001\001\000\004\153\u012e\001\001\000\020\144" +
    "\u0124\145\u0121\146\u011e\147\u011f\150\u0122\151\u0123\152\u0120" +
    "\001\001\000\002\001\001\000\004\103\u011c\001\001\000" +
    "\002\001\001\000\004\153\u0119\001\001\000\004\142\u0118" +
    "\001\001\000\004\142\u0117\001\001\000\002\001\001\000" +
    "\004\103\u0116\001\001\000\002\001\001\000\004\160\362" +
    "\001\001\000\004\110\360\001\001\000\004\142\302\001" +
    "\001\000\004\115\314\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\115\353\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\115\317\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\115\351\001\001\000" +
    "\004\115\350\001\001\000\004\115\347\001\001\000\004" +
    "\115\346\001\001\000\004\115\345\001\001\000\004\115" +
    "\344\001\001\000\004\115\343\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\115\336\001\001\000\004\115" +
    "\335\001\001\000\004\115\334\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\115\340\001" +
    "\001\000\002\001\001\000\004\115\342\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\164" +
    "\u0102\001\001\000\010\126\370\161\365\162\371\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\163\372\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\115\375\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\142\u0115\001\001\000\002\001\001\000\022\116" +
    "\u0108\117\u0106\120\u0104\154\u0107\155\262\156\267\167\u0103" +
    "\173\u0109\001\001\000\002\001\001\000\004\122\u0113\001" +
    "\001\000\002\001\001\000\040\111\u010b\112\250\113\266" +
    "\123\255\125\256\126\251\140\264\141\263\154\253\155" +
    "\262\156\267\157\254\165\274\167\241\203\243\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\121\u010c\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\142\u0128\001\001" +
    "\000\022\116\u0108\117\u0106\120\u0104\154\u0107\155\262\156" +
    "\267\167\u0103\173\u0127\001\001\000\014\146\u0125\147\u011f" +
    "\150\u0126\151\u0123\152\u0120\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\143\u012b\001\001\000" +
    "\002\001\001\000\022\116\u0108\117\u0106\120\u0104\154\u0107" +
    "\155\262\156\267\167\u0103\173\u012c\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\171\u0135\001\001\000\004\153\u0132\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\171" +
    "\u0139\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\115\u0142\136\u0141\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\137\u0146\001\001\000\004\124\u0143\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\127\u014d\130\u014e\001\001\000\004\204\u0150" +
    "\001\001\000\002\001\001\000\004\130\u014f\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\131\u0154\132\u0152\133\u0153\001\001\000\004\134\u0158\001" +
    "\001\000\004\133\u0155\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\143\u015b" +
    "\001\001\000\002\001\001\000\004\166\u015d\001\001\000" +
    "\022\116\u0108\117\u0106\120\u0104\154\u0107\155\262\156\267" +
    "\167\u0103\173\u0160\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\055\u0173\056\175\061\u0187\062\200\065\u016f\066" +
    "\173\067\u016e\070\176\071\202\001\001\000\002\001\001" +
    "\000\004\177\u0175\001\001\000\002\001\001\000\004\040" +
    "\123\001\001\000\006\015\u0178\063\u0176\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\054\u017e\064\u0179\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\054\u0193\001\001\000\004\050\u0191\001\001\000" +
    "\002\001\001\000\012\005\206\006\017\007\012\010\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\u019b\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserGCIC$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserGCIC$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserGCIC$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}





	private List<ReportError> listaErrores;
	private String codigoHTML = "";
	private String losEstilos = "";
	private String id = "id";
	private boolean isParameterGCIC = true;
	private HashMap<String,Token> atributos= new HashMap();
	private FuntionsTablaSimbolos funTablaSim =  new FuntionsTablaSimbolos();	

	//funciones
	private int procesoActual= 0;
	private String tipoVariable = null;
	private int posicionVar = 1;
	private List<Token> listaVariablesActuales = new ArrayList<Token>();
	private String procedimientoActual = "";
	private FunctionsOLM funOLM = new FunctionsOLM();

	public ParserGCIC(LexerGCIC lex){
		super(lex);
		listaErrores = new ArrayList<ReportError>();
	}
	 @Override
	public void syntax_error(Symbol cur_token){
			Token token = (Token) cur_token.value;
			/*			            
            String tokenEsperados = "Tokens esperados: ";
            tokenEsperados += listTokensEsperados();
			String msgError =  "Error: ( "+ token.getLexema() +" ) -> {Linea: "+cur_token.left+", Columna: "+ cur_token.right +" } " + tokenEsperados;
			listaErrores.add(msgError);
			*/

			String nombreSimbolo = symbl_name_from_id(cur_token.sym);
			if(nombreSimbolo.equals("INVALID")){
				addError("Lexico",token,"No se esperaba: " + token.getLexema(),null);
			}else{
				addError("Sintactico",token,"No se esperaba: " + token.getLexema(),null);
			}		

	}
	 @Override
	public void report_fatal_error(String message, Object info){
			String Elerror = "Ocurrio un error no recuperable al analizar: " + message + " -> {objeto: " + info + "}";

			if(info instanceof Symbol ){
				Symbol sim = (Symbol) info;
				Token token = (Token) sim.value;
				/*
				String msgError =  "Error: ( "+ token.getLexema() +" ) -> {Linea: "+sim.left+", Columna: "+ sim.right +" } ";
				listaErrores.add(msgError);
				*/
				addError("Sintactico",token,message,null);
			}else{
				System.out.println("Error -- :  " + message);
			}

			//listaErrores.add(Elerror);	
	}
	 @Override
	public void report_error(String message, Object info){
			System.out.println("Error desde el report_error: " + message);
	}
	 @Override
	public void unrecovered_syntax_error(Symbol cur_token){
		report_fatal_error("No se puede reparar y analizar el Error sintactico", cur_token);
	}

	private void addError(String tipoError, Token token,String descError, String solucion){
			ReportError reporte = new ReportError();
			reporte.setTipoError(tipoError);
			reporte.setColumna(token.getColumna());
			reporte.setLinea(token.getLinea());
			if (solucion == null) {
                reporte.setSolucion(listTokensEsperados());
            }else{
                reporte.setSolucion(solucion);
            }
			reporte.setDescripcion(descError);
			listaErrores.add(reporte);

	}
	private String listTokensEsperados(){
		String tokenEsperados = "";
		for (Integer expected_token_id : expected_token_ids()) {
            	if(!symbl_name_from_id(expected_token_id).equals("error")){
            		String nameToken = nameTokenEsperado(symbl_name_from_id(expected_token_id));
            		if (nameToken == null){
            			tokenEsperados += "<p>"+symbl_name_from_id(expected_token_id) + "</p>";
            		}else{
            			tokenEsperados += "<p>"+nameToken + "</p>";
            		}            		
            	}                
            }
        return tokenEsperados;
	}

	public List getListaErrores(){
		return listaErrores;
	}
	public String getCodigoHTML(){
		return codigoHTML;
	}
	public String getId(){
		return id;
	}
	public List getListaSimbolos(){
		return funTablaSim.getListaSimbolos();
	}
	 @Override
	protected int error_sync_size(){
		return 1;
	}
	private String nameTokenEsperado(String nameToken){
		switch (nameToken){
			case "MENQ" : return "<";
			case "CORI" : return "[";
			case "CORD" : return "]";
			case "IGUAL" : return "=";
			case "STRING" : return "string";
			case "STRING_WS" : return "string sin espacios";
			case "MAQ" : return ">";
			case "DIAG" : return "/";
			case "STRING_TOTAL" : return "cadena de texto";
			case "ID_VARIABLE" : return "nombre de una variable";
			case "NOMBRE_FUNCION" : return "nombre de funcion (PROCESS_(nombre de una funcion con letras a-z o A-Z))";
			case "LLAI" : return "{";
			case "LLAD" : return "}";
			case "DOS_PUNTOS" : return ":";
			case "COMA" : return ",";
			case "ADMIRACION" : return "!";
			case "SEMI" : return ";";
			case "BARRA90" : return "|";
			case "AND_1" : return "&";
			case "SUMA" : return "+";
			case "MENOS" : return "-";
			case "MULT" : return "*";
			case "GET_ELEMENT_BY_ID" : return "getElemenById";
			case "IGUALACION" : return "==";
			case "MEN_QUE" : return "<=";
			case "MAY_QUE" : return ">=";
			case "DIFERENTE" : return "!=";
			case "CHAR" : return "caracter";
			case "DECIMAL" : return "numero decimal";
			case "BOOLEAN" : return "true or false";
			case "INVALID" : return "caracter cualquiera";
			case "ID_ELEMENT" : return "string encerrado entre comillas simples";
			case "ENTERO": return "numero entero";
			case "PAI" : return "(";
			case "PAD": return ")";
			case "PARAMETRO": return "Algun Parametro aceptable Ejemplo:id";
            default: return null;
		}
	}

	private String parametrosCss(String param){
			switch (param){
			case "href" : return "href";
			case "background" : return "background-color";
			case "color" : return "color";
			case "font-size" : return "font-size";
			case "font-family" : return "font-family";
			case "type" : return "type";
			case "id" : return "id";
			case "name" : return "name";
			case "cols" : return "cols";
			//case "rows" : return "";
			//case "class" : return "";
			//case "src" : return "";
			//case "width" : return "";
			//case "height" : return "";
			//case "alt" : return "";
			//case "onclick" : return "";
			case "text-align" : return "text-align";
			 default: return param;
		}
	}
	private boolean isParametrosCss(String param){
		switch (param){
			case "background" : return true;
			case "color" : return true;
			case "font-size" : return true;
			case "font-family" : return true;
			case "text-align" : return true;
			default: return false;
		}
	}
	private void verificarAtributos(String newAtriuto, Token token){
		if(atributos.get(newAtriuto) == null){
			atributos.put(newAtriuto,token);
		}else{
			addError("Semantico",token,"Esta repetido el atributo: " + newAtriuto, "Elimine el atributos repetido");
		}
	}
	private void verificarAtributosEtiquetas(String etiqueta, Token token){
		switch(etiqueta){
			case "C_GCIC":{
				if(atributos.remove("id") == null){
					addError("Semantico",token,"La Eitqueta C_GCIC no contiene el id", "Agregue la etiqueta 'id' en C_GCIC");
				}
				atributos.remove("name");
				break;
			}
			case "C_LINK":{
				atributos.remove("href");
				break;
			}
			case "C_BODY":{
				atributos.remove("background");
				break;
			}
			case "span":{
				atributos.remove("font-size");
				atributos.remove("font-family");
				atributos.remove("text-align");
				atributos.remove("id");
				atributos.remove("color");
				etiqueta = "C_SPAM";
				break;
			}
			case "input":{
				atributos.remove("type");
				atributos.remove("font-size");
				atributos.remove("font-family");
				atributos.remove("text-align");
				atributos.remove("id");
				atributos.remove("color");
				etiqueta = "C_INPUT";
				break;
			}
			case "textarea":{
				atributos.remove("rows");
				atributos.remove("cols");
				atributos.remove("font-size");
				atributos.remove("font-family");
				atributos.remove("text-align");
				atributos.remove("id");
				etiqueta = "C_TEXTAREA";
				break;
			}
			case "select":{
				atributos.remove("font-size");
				atributos.remove("font-family");
				atributos.remove("text-align");
				atributos.remove("id");
				atributos.remove("color");
				etiqueta = "C_SELECT";
				break;
			}
			case "div":{
				atributos.remove("background");
				atributos.remove("class");
				atributos.remove("font-size");
				atributos.remove("font-family");
				atributos.remove("text-align");
				atributos.remove("id");
				atributos.remove("color");
				etiqueta = "C_DIV";
				break;
			}
			case "img":{
				atributos.remove("src");
				atributos.remove("width");
				atributos.remove("height");
				atributos.remove("id");
				atributos.remove("alt");
				etiqueta = "C_IMG";
				break;
			}
			case "button":{
				atributos.remove("background");
				atributos.remove("onclick");
				atributos.remove("font-size");
				atributos.remove("font-family");
				atributos.remove("text-align");
				atributos.remove("id");
				atributos.remove("color");
				etiqueta = "C_BUTTON";
				break;
			}
			case "h1":{
				atributos.remove("font-size");
				atributos.remove("font-family");
				atributos.remove("text-align");
				atributos.remove("id");
				atributos.remove("color");
				etiqueta = "C_H1";
				break;
			}
			case "p":{
				atributos.remove("font-size");
				atributos.remove("font-family");
				atributos.remove("text-align");
				atributos.remove("id");
				atributos.remove("color");
				etiqueta = "C_P";
				break;
			}
			default:break;
		}
		if (atributos.size() > 0){
            Set<String> keySet = atributos.keySet();
                for (String string : keySet) {
                    addError("Semantico",atributos.get(string),
                      "El Parametro " + string + " No es parte de la etiqueta " + etiqueta
                       , "Elimine el parametro: ' "+ string + " ' en " +etiqueta);
            }
                    
		}
	}
	



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserGCIC$actions {
  private final ParserGCIC parser;

  /** Constructor */
  CUP$ParserGCIC$actions(ParserGCIC parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserGCIC$do_action_part00000000(
    int                        CUP$ParserGCIC$act_num,
    java_cup.runtime.lr_parser CUP$ParserGCIC$parser,
    java.util.Stack            CUP$ParserGCIC$stack,
    int                        CUP$ParserGCIC$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserGCIC$result;

      /* select the action based on the action number */
      switch (CUP$ParserGCIC$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inicio ::= etiqueta_gcic head body fin_etiqueta_gcic 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)).right;
		Token start_val = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)).value;
		RESULT = start_val;
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserGCIC$parser.done_parsing();
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // etiqueta_gcic ::= inicio_gcic parametros_etiquetas 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)).value;
		
								codigoHTML += "<html>\n";
								isParameterGCIC = false;
								verificarAtributosEtiquetas(e.getNombreToken(),e);
							
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("etiqueta_gcic",1, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio_gcic ::= MENQ C_GCIC 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		
						e.setNombreToken("C_GCIC");
						RESULT = e;
					
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("inicio_gcic",2, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // inicio_gcic ::= error 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("inicio_gcic",2, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // parametros_etiquetas ::= varios_parametro_etiqueta MAQ 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)).value;
		
								RESULT = e;
							
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("parametros_etiquetas",3, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // parametros_etiquetas ::= MAQ 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		
								e.setNombreToken("");
								RESULT = e;
							
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("parametros_etiquetas",3, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // parametros_etiquetas ::= error 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("parametros_etiquetas",3, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // varios_parametro_etiqueta ::= varios_parametro_etiqueta parametro_etiqueta 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		
										if(e.getNombreToken() == null){
											e.setNombreToken(e1.getNombreToken());
										}else if(e1.getNombreToken() != null){
											e.setNombreToken(e.getNombreToken() + " " + e1.getNombreToken());
										}									
										RESULT = e;
									
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("varios_parametro_etiqueta",4, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // varios_parametro_etiqueta ::= parametro_etiqueta 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		
										RESULT = e;
									
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("varios_parametro_etiqueta",4, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // parametro_etiqueta ::= inicio_param_etiq string fin_param_etiq 
            {
              Token RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)).right;
		Token e2 = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)).value;
		
								if(id==null){
									id = e2.getLexema();
								}
								if(isParametrosCss(e1.getLexema())){
									losEstilos += e2.getLexema() + ";";
								}else{
									e1.setNombreToken(e1.getNombreToken() + e2.getLexema() + "\"");
								}
								RESULT = e1;
							
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("parametro_etiqueta",5, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // inicio_param_etiq ::= CORI PARAMETRO IGUAL 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)).value;
		
								verificarAtributos(e.getLexema(),e);
								if(isParameterGCIC){
									if(e.getLexema().equals("id")){
										id = null;
									}
								}
								if(isParametrosCss(e.getLexema())){
									losEstilos += parametrosCss(e.getLexema()) + ":";
								}else{
									e.setNombreToken(parametrosCss(e.getLexema()) + "=\"");
								}								
								RESULT = e;
							
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("inicio_param_etiq",6, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // string ::= STRING 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		 RESULT = e;
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("string",7, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // string ::= STRING_WS 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		 RESULT = e;
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("string",7, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // string ::= error 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("string",7, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // fin_param_etiq ::= CORD 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("fin_param_etiq",8, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // fin_param_etiq ::= error 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("fin_param_etiq",8, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // cierre_etiqueta ::= MAQ 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("cierre_etiqueta",9, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // cierre_etiqueta ::= error 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("cierre_etiqueta",9, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // fin_etiqueta_gcic ::= pre_fin_etiq cierre_gcic 
            {
              Token RESULT =null;
		
								codigoHTML += "</html>";
							
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("fin_etiqueta_gcic",10, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // fin_etiqueta_gcic ::= error 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("fin_etiqueta_gcic",10, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // pre_fin_etiq ::= MENQ DIAG 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("pre_fin_etiq",11, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // cierre_gcic ::= C_GCIC MAQ 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("cierre_gcic",12, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // cierre_gcic ::= error 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("cierre_gcic",12, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // head ::= etiqueta_head cont_head fin_etiqueta_head 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("head",13, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // etiqueta_head ::= inicio_head cierre_etiqueta 
            {
              Token RESULT =null;
		
							codigoHTML += "<head>\n";
						
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("etiqueta_head",14, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // inicio_head ::= MENQ C_HEAD 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("inicio_head",15, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // inicio_head ::= error 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("inicio_head",15, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // fin_etiqueta_head ::= pre_fin_etiq cierre_head 
            {
              Token RESULT =null;
		
								codigoHTML += "</head>\n";
							
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("fin_etiqueta_head",16, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // fin_etiqueta_head ::= error C_HEAD 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("fin_etiqueta_head",16, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // cierre_head ::= C_HEAD MAQ 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("cierre_head",17, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // cierre_head ::= error 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("cierre_head",17, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // cont_head ::= cont_head etiqueta_para_head 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("cont_head",31, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // cont_head ::= etiqueta_para_head 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("cont_head",31, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // etiquetas_para_head ::= etiquetas_para_head etiqueta_para_head 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("etiquetas_para_head",32, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // etiquetas_para_head ::= etiqueta_para_head 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("etiquetas_para_head",32, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // etiqueta_para_head ::= link 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("etiqueta_para_head",33, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // etiqueta_para_head ::= title 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("etiqueta_para_head",33, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // etiqueta_para_head ::= error parametros_etiquetas 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("etiqueta_para_head",33, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // link ::= etiqueta_link fin_etiqueta_link 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("link",18, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$0 ::= 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;

								atributos.clear();
							
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("NT$0",122, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // etiqueta_link ::= inicio_link NT$0 parametros_etiquetas 
            {
              Token RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Token) ((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)).value;
		
								verificarAtributosEtiquetas(e.getNombreToken(),e);
							
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("etiqueta_link",19, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // inicio_link ::= MENQ C_LINK 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		
						e.setNombreToken("C_LINK");
						RESULT = e;
					
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("inicio_link",20, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // fin_etiqueta_link ::= pre_fin_etiq cierre_link 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("fin_etiqueta_link",21, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // fin_etiqueta_link ::= error C_LINK 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("fin_etiqueta_link",21, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // cierre_link ::= C_LINK MAQ 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("cierre_link",22, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // cierre_link ::= error 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("cierre_link",22, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$1 ::= 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;

							codigoHTML += e.getLexema();
				
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("NT$1",123, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // title ::= etiqueta_title cont_etiqueta NT$1 fin_etiqueta_title 
            {
              Token RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Token) ((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)).value;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("title",23, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // etiqueta_title ::= inicio_title cierre_etiqueta 
            {
              Token RESULT =null;
		
							codigoHTML += "<title>";
						
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("etiqueta_title",24, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // inicio_title ::= MENQ C_TITLE 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("inicio_title",25, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // fin_etiqueta_title ::= pre_fin_etiq cierre_title 
            {
              Token RESULT =null;
		
								codigoHTML += "</title>\n";
							
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("fin_etiqueta_title",26, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // fin_etiqueta_title ::= error 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("fin_etiqueta_title",26, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // cierre_title ::= C_TITLE MAQ 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("cierre_title",27, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // cierre_title ::= error 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("cierre_title",27, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // cont_etiqueta ::= varios_contenido 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		
							RESULT = e;
						
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("cont_etiqueta",28, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // cont_etiqueta ::= 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("cont_etiqueta",28, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // varios_contenido ::= varios_contenido todo_contenido 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		
							if(e.getNombreToken() != null){
								e.setLexema(e.getLexema() + e1.getLexema());
								e.setNombreToken(null);
							}else if( e1.getNombreToken() != null){
								e.setLexema(e.getLexema() + e1.getLexema());
								e.setNombreToken("INVALID");
							}
							else{
								e.setLexema(e.getLexema() + " " + e1.getLexema());
							}														
							RESULT = e;
						
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("varios_contenido",29, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // varios_contenido ::= todo_contenido 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
													
							RESULT = e;
						
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("varios_contenido",29, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // todo_contenido ::= STRING 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		 RESULT = e;
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("todo_contenido",30, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // todo_contenido ::= STRING_WS 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		 RESULT = e;
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("todo_contenido",30, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // todo_contenido ::= STRING_TOTAL 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		 RESULT = e;
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("todo_contenido",30, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // todo_contenido ::= ID_VARIABLE 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		 RESULT = e;
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("todo_contenido",30, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // todo_contenido ::= ID_ELEMENT 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		 RESULT = e;
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("todo_contenido",30, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // todo_contenido ::= MULT 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		 RESULT = e;
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("todo_contenido",30, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // todo_contenido ::= SUMA 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		 RESULT = e;
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("todo_contenido",30, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // todo_contenido ::= MENOS 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		 RESULT = e;
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("todo_contenido",30, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // todo_contenido ::= BARRA90 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		 RESULT = e;
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("todo_contenido",30, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // todo_contenido ::= DIAG 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		 RESULT = e;
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("todo_contenido",30, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // todo_contenido ::= CORD 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		 RESULT = e;
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("todo_contenido",30, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // todo_contenido ::= CORI 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		 RESULT = e;
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("todo_contenido",30, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // todo_contenido ::= IGUAL 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		 RESULT = e;
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("todo_contenido",30, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // todo_contenido ::= LLAI 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		 RESULT = e;
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("todo_contenido",30, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // todo_contenido ::= LLAD 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		 RESULT = e;
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("todo_contenido",30, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // todo_contenido ::= COMA 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		 RESULT = e;
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("todo_contenido",30, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // todo_contenido ::= SEMI 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		 RESULT = e;
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("todo_contenido",30, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // todo_contenido ::= DOS_PUNTOS 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		 RESULT = e;
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("todo_contenido",30, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // todo_contenido ::= ADMIRACION 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		 RESULT = e;
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("todo_contenido",30, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // todo_contenido ::= AND_1 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		 RESULT = e;
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("todo_contenido",30, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // todo_contenido ::= PAI 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		 RESULT = e;
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("todo_contenido",30, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // todo_contenido ::= PAD 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		 RESULT = e;
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("todo_contenido",30, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // todo_contenido ::= CHAR 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		 RESULT = e;
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("todo_contenido",30, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // todo_contenido ::= ENTERO 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		 RESULT = e;
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("todo_contenido",30, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // todo_contenido ::= DECIMAL 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		 RESULT = e;
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("todo_contenido",30, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // todo_contenido ::= BOOLEAN 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		 RESULT = e;
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("todo_contenido",30, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // todo_contenido ::= INVALID 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		 e.setNombreToken("INVALID"); RESULT = e;
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("todo_contenido",30, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // body ::= etiqueta_body cont_body fin_etiqueta_body 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("body",34, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$2 ::= 
            {
              Token RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e0 = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;

							losEstilos = "";
							atributos.clear();
						
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("NT$2",124, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // etiqueta_body ::= inicio_body NT$2 parametros_etiquetas 
            {
              Token RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Token) ((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)).value;
		int e0left = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)).right;
		Token e0 = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		
							if(e.getNombreToken() == null){
								e.setNombreToken("");
							}
							codigoHTML += "<body "+ e.getNombreToken() +" style=\"" + losEstilos + "\" >\n";
							verificarAtributosEtiquetas(e0.getNombreToken(),e0);
						
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("etiqueta_body",35, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // inicio_body ::= MENQ C_BODY 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		
							e.setNombreToken("C_BODY");
							RESULT = e;
						
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("inicio_body",36, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // inicio_body ::= error 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("inicio_body",36, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // fin_etiqueta_body ::= pre_fin_etiq cierre_body 
            {
              Token RESULT =null;
		
								codigoHTML += "</body>\n";
							
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("fin_etiqueta_body",37, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // fin_etiqueta_body ::= error C_BODY 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("fin_etiqueta_body",37, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // cierre_body ::= C_BODY MAQ 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("cierre_body",38, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // cierre_body ::= error 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("cierre_body",38, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // cont_body ::= cont_body etiqueta_para_body 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("cont_body",39, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // cont_body ::= etiqueta_para_body 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("cont_body",39, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // etiqueta_para_body ::= etq_generica 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("etiqueta_para_body",41, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // etiqueta_para_body ::= etiqueta_br 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("etiqueta_para_body",41, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // etiqueta_para_body ::= scripting 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("etiqueta_para_body",41, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // etiqueta_para_body ::= error parametros_etiquetas 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("etiqueta_para_body",41, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // c_etiqueta_g ::= C_SPAM 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		e.setNombreToken("span"); RESULT = e;
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("c_etiqueta_g",42, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // c_etiqueta_g ::= C_INPUT 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		 e.setNombreToken("input"); RESULT = e;
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("c_etiqueta_g",42, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // c_etiqueta_g ::= C_TEXTAREA 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		 e.setNombreToken("textarea"); RESULT = e;
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("c_etiqueta_g",42, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // c_etiqueta_g ::= C_SELECT 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		 e.setNombreToken("select");  RESULT = e;
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("c_etiqueta_g",42, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // c_etiqueta_g ::= C_OPTION 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		  e.setNombreToken("option");RESULT = e;
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("c_etiqueta_g",42, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // c_etiqueta_g ::= C_DIV 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		  e.setNombreToken("div");RESULT = e;
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("c_etiqueta_g",42, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // c_etiqueta_g ::= C_IMG 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		 e.setNombreToken("img"); RESULT = e;
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("c_etiqueta_g",42, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // c_etiqueta_g ::= C_BUTTON 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		 e.setNombreToken("button"); RESULT = e;
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("c_etiqueta_g",42, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // c_etiqueta_g ::= C_H1 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		  e.setNombreToken("h1");RESULT = e;
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("c_etiqueta_g",42, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // c_etiqueta_g ::= C_P 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		 e.setNombreToken("p"); RESULT = e;
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("c_etiqueta_g",42, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // NT$3 ::= 
            {
              Token RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)).right;
		Token e0 = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)).value;

							/*if(e != null){
								codigoHTML += e.getLexema();
							}*/							
						
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("NT$3",125, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // etq_generica ::= etiqueta_g cont_etq_g NT$3 fin_etiqueta_g 
            {
              Token RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Token) ((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)).value;
		int e0left = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-3)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-3)).right;
		Token e0 = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		
				 			if(!e0.getNombreToken().equals(e1.getNombreToken())){
				 				/*listaErrores.add("Error: ( "+ e1.getLexema() +" ) -> {Linea: "+e1.getLinea()+", Columna: "+e1.getColumna() +" }: Se esperaba la etiqueta: " + e0.getLexema() );*/
				 				addError("Sintactico",e1,e1.getLexema(),"Se esperaba la etiqueta: " + e0.getLexema());
				 			}


				 		
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("etq_generica",43, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // NT$4 ::= 
            {
              Token RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e0 = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;

						losEstilos = "";
						atributos.clear();
					
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("NT$4",126, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // etiqueta_g ::= inicio_g NT$4 parametros_etiquetas 
            {
              Token RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Token) ((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)).value;
		int e0left = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)).right;
		Token e0 = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		
						if(e != null){
							if(e.getNombreToken() == null){
								e.setNombreToken("");
							}
							if(e.getNombreToken().equals("input")){
								codigoHTML += "<"+e0.getNombreToken() + " " + e.getNombreToken() +" style=\"" + losEstilos + "\" value=\"";
							}else{
								codigoHTML += "<"+e0.getNombreToken() + " " + e.getNombreToken() +" style=\"" + losEstilos + "\" >";
							}
							verificarAtributosEtiquetas(e0.getNombreToken(),e0);
						}
						 RESULT = e0;
					
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("etiqueta_g",44, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // cont_etq_g ::= varios_contenido_g 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("cont_etq_g",45, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // cont_etq_g ::= varios_contenido 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		
						if(e != null){
							codigoHTML += e.getLexema();
						}
					
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("cont_etq_g",45, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // cont_etq_g ::= 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("cont_etq_g",45, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // varios_contenido_g ::= varios_contenido_g un_cont_etq_g 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("varios_contenido_g",46, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // varios_contenido_g ::= un_cont_etq_g 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("varios_contenido_g",46, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // un_cont_etq_g ::= etq_generica 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("un_cont_etq_g",47, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // un_cont_etq_g ::= etiqueta_br 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("un_cont_etq_g",47, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // un_cont_etq_g ::= scripting 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("un_cont_etq_g",47, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // inicio_g ::= MENQ c_etiqueta_g 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		 RESULT = e;
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("inicio_g",48, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // fin_etiqueta_g ::= pre_fin_etiq cierre_g 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		
							if(e.getNombreToken().equals("input")){
								codigoHTML += "\">\n";
							}else{
								codigoHTML += "</"+e.getNombreToken() +">\n";
							}
							 RESULT = e;
						
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("fin_etiqueta_g",49, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // fin_etiqueta_g ::= error 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("fin_etiqueta_g",49, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // cierre_g ::= c_etiqueta_g MAQ 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)).value;
		 RESULT = e;
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("cierre_g",50, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // cierre_g ::= error 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("cierre_g",50, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // etiqueta_br ::= inicio_br cierre_etiqueta 
            {
              Token RESULT =null;
		
						codigoHTML += "<br>\n";
					
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("etiqueta_br",51, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // inicio_br ::= MENQ C_BR 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("inicio_br",52, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // scripting ::= etiqueta_scripting cont_scripting 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("scripting",53, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // etiqueta_scripting ::= inicio_scripting cierre_etiqueta 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("etiqueta_scripting",54, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // inicio_scripting ::= MENQ C_SCRIPTING 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("inicio_scripting",55, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // fin_etiqueta_scripting ::= pre_fin_etiq cierre_scripting 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("fin_etiqueta_scripting",56, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // fin_etiqueta_scripting ::= error C_SCRIPTING 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("fin_etiqueta_scripting",56, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // cierre_scripting ::= C_SCRIPTING MAQ 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("cierre_scripting",57, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // cierre_scripting ::= error 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("cierre_scripting",57, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // cont_scripting ::= funciones fin_etiqueta_scripting 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("cont_scripting",58, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // cont_scripting ::= fin_etiqueta_scripting 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("cont_scripting",58, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // funciones ::= funciones functions 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("funciones",59, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // funciones ::= functions 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("funciones",59, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // functions ::= on_load 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("functions",60, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // functions ::= process_ 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("functions",60, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // functions ::= error parentesis 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("functions",60, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // on_load ::= funcion_on_load cont_funcion 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("on_load",61, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // process_ ::= funcion_process_ cont_funcion 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("process_",62, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // funcion_on_load ::= name_on_load parentesis 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("funcion_on_load",63, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // name_on_load ::= ON_LOAD 
            {
              Token RESULT =null;
		
						procedimientoActual = "ON_LOAD()";
					
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("name_on_load",64, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // parentesis ::= PAI PAD 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("parentesis",65, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // parentesis ::= error 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("parentesis",65, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // funcion_process_ ::= name_funcion_g parentesis 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("funcion_process_",66, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // name_funcion_g ::= NOMBRE_FUNCION 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		
							procedimientoActual = e.getLexema() +"()";
						
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("name_funcion_g",67, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // NT$5 ::= 
            {
              Token RESULT =null;

							procesoActual++;
						
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("NT$5",127, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // cont_funcion ::= inicio_funcion NT$5 funcion fin_funcion 
            {
              Token RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Token) ((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)).value;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("cont_funcion",68, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // inicio_funcion ::= CORI 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("inicio_funcion",69, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // inicio_funcion ::= error 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("inicio_funcion",69, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // fin_funcion ::= CORD 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("fin_funcion",70, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // fin_funcion ::= error 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("fin_funcion",70, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // funcion ::= tipos_instrucciones 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("funcion",71, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // funcion ::= 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("funcion",71, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // tipos_instrucciones ::= tipos_instrucciones tipo_instruccion 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("tipos_instrucciones",72, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // tipos_instrucciones ::= tipo_instruccion 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("tipos_instrucciones",72, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // tipo_instruccion ::= declaracion_asginacion 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("tipo_instruccion",73, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // tipo_instruccion ::= estruc_if 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("tipo_instruccion",73, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // tipo_instruccion ::= funciones_especiales 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("tipo_instruccion",73, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // tipo_instruccion ::= estruc_repeat 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("tipo_instruccion",73, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // tipo_instruccion ::= estruc_while 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("tipo_instruccion",73, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // tipo_instruccion ::= insert 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("tipo_instruccion",73, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // expr_list ::= expr_list expr 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("expr_list",74, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // expr_list ::= expr 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("expr_list",74, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // expr ::= expr SUMA expr 
            {
              Token RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e2 = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		
	             						if(e1 != null && e2 != null){
		             						Token result = funOLM.suma(e1, e2);
		             						if(result == null){
		             							addError("Semantico",e1,
		             							e1.getNombreToken()+" + "+ e2.getNombreToken() +" No esta definido",
		             							e1.getNombreToken()+" + "+ e1.getNombreToken());
		             						}else{
		             							RESULT = result;
		             						}
		             					}
             						
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("expr",75, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // expr ::= expr MENOS expr 
            {
              Token RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e2 = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		
	             						if(e1 != null && e2 != null){
		             						Token result = funOLM.resta(e1, e2);
		             						if(result == null){
		             							addError("Semantico",e1,
		             							e1.getNombreToken()+" - "+ e2.getNombreToken() +" No esta definido",
		             							e1.getNombreToken()+" - "+ e1.getNombreToken());
		             						}else{
		             							RESULT = result;
		             						}
		             					}
             						
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("expr",75, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // expr ::= expr MULT expr 
            {
              Token RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e2 = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		
	             						if(e1 != null && e2 != null){
		             						Token result = funOLM.mult(e1, e2);
		             						if(result == null){
		             							addError("Semantico",e1,
		             							e1.getNombreToken()+" * "+ e2.getNombreToken() +" No esta definido",
		             							e1.getNombreToken()+" * "+ e1.getNombreToken());
		             						}else{
		             							RESULT = result;
		             						}
		             					}
             						
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("expr",75, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // expr ::= expr DIAG expr 
            {
              Token RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e2 = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		
	             						if(e1 != null && e2 != null){
		             						Token result = funOLM.div(e1, e2);
		             						if(result == null){
		             							addError("Semantico",e1,
		             							e1.getNombreToken()+" / "+ e2.getNombreToken() +" No esta definido",
		             							e1.getNombreToken()+" / "+ e1.getNombreToken());
		             						}else{
		             							RESULT = result;
		             						}
		             					}
             						
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("expr",75, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // expr ::= expr IGUALACION expr 
            {
              Token RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e2 = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		
	             							if(e1 != null && e2 != null){
		             							String result = funOLM.igual(e1, e2);
		             							if(result == null){
		             								addError("Semantico",e1,
		             								e1.getNombreToken()+" == "+ e2.getNombreToken() +" No esta definido",
		             								"Ambos tipos tienen que ser iguales");
		             							}else{
		             								e2.setNombreToken("boolean");
		             								e2.setLexema(result);
		             								RESULT = e2;
		             							}
		             						}
             							
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("expr",75, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // expr ::= expr DIFERENTE expr 
            {
              Token RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e2 = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		
	             							if(e1 != null && e2 != null){
		             							String result = funOLM.diferente(e1, e2);
		             							if(result == null){
		             								addError("Semantico",e1,
		             								e1.getNombreToken()+" != "+ e2.getNombreToken() +" No esta definido",
		             								"Ambos tipos tienen que ser iguales");
		             							}else{
		             								e2.setNombreToken("boolean");
		             								e2.setLexema(result);
		             								RESULT = e2;
		             							}
		             						}
             							
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("expr",75, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // expr ::= expr MEN_QUE expr 
            {
              Token RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e2 = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		
	             							if(e1 != null && e2 != null){
		             							String result = funOLM.menIgual(e1, e2);
		             							if(result == null){
		             								addError("Semantico",e1,
		             								e1.getNombreToken()+" <= "+ e2.getNombreToken() +" No esta definido",
		             								"<p>integer <= integer</p> <p>decimal <= decimal</p>");
		             							}else{
		             								e2.setNombreToken("boolean");
		             								e2.setLexema(result);
		             								RESULT = e2;
		             							}
		             						}
             							
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("expr",75, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // expr ::= expr MAY_QUE expr 
            {
              Token RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e2 = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		
             							if(e1 != null && e2 != null){
	             							String result = funOLM.mayIgual(e1, e2);
	             							if(result == null){
	             								addError("Semantico",e1,
	             								e1.getNombreToken()+" >= "+ e2.getNombreToken() +" No esta definido",
	             								"<p>integer >= integer</p> <p>decimal >= decimal</p>");
	             							}else{
	             								e2.setNombreToken("boolean");
	             								e2.setLexema(result);
	             								RESULT = e2;
	             							}
	             						}
             						
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("expr",75, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // expr ::= expr MAQ expr 
            {
              Token RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e2 = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		
             							if(e1 != null && e2 != null){
	             							String result = funOLM.mayQ(e1, e2);
	             							if(result == null){
	             								addError("Semantico",e1,
	             								e1.getNombreToken()+" > "+ e2.getNombreToken() +" No esta definido",
	             								"<p>integer > integer</p> <p>decimal > decimal</p>");
	             							}else{
	             								e2.setNombreToken("boolean");
	             								e2.setLexema(result);
	             								RESULT = e2;
	             							}
	             						}
             						
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("expr",75, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // expr ::= expr MENQ expr 
            {
              Token RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e2 = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		
             							if(e1 != null && e2 != null){
	             							String result = funOLM.menQ(e1, e2);
	             							if(result == null){
	             								addError("Semantico",e1,
	             								e1.getNombreToken()+" < "+ e2.getNombreToken() +" No esta definido",
	             								"<p>integer < integer</p> <p>decimal < decimal</p>");
	             							}else{
	             								e2.setNombreToken("boolean");
	             								e2.setLexema(result);
	             								RESULT = e2;
	             							}
	             						}
             						
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("expr",75, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // expr ::= expr BARRA90 BARRA90 expr 
            {
              Token RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-3)).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e2 = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		
	             									if(e1 != null && e2 != null){
	             										String tipo = funOLM.or(e1, e2);
	             										if(tipo == null){
	             											addError("Semantico",e1,
	             												e1.getNombreToken()+" || "+ e2.getNombreToken() +" No esta definido",
	             												"boolean || boolean");
	             										}else{
	             											e2.setLexema(tipo);
	             											RESULT = e2;
	             										}
	             									}
             									
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("expr",75, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // expr ::= expr AND_1 AND_1 expr 
            {
              Token RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-3)).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e2 = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		
             									if(e1 != null && e2 != null){
             										String tipo = funOLM.and(e1, e2);
             										if(tipo == null){
             											addError("Semantico",e1,
             												e1.getNombreToken()+" && "+ e2.getNombreToken() +" No esta definido",
             												"boolean && boolean");
             										}else{
             											e2.setLexema(tipo);
             											RESULT = e2;
             										}
             									}
             								
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("expr",75, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // expr ::= ADMIRACION expr 
            {
              Token RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		
             						if(e1 != null){
             							if(e1.getNombreToken().equals("boolean")){
             								if(e1.getLexema().equals("true")){
             									e1.setLexema("false");
             								}else{
             									e1.setLexema("true");
             								}
	             							RESULT = e1;
	             						}else{
	             							addError("Semantico",e1, e1.getLexema()+" No es una variable de tipo boolean",
	             								"Use una variable de tipo boolean");
	             						}
             						}
             					
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("expr",75, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // expr ::= PAI expr PAD 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)).value;
		 RESULT = e;
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("expr",75, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // expr ::= MENOS ENTERO 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		 e.setNombreToken("integer"); e.setLexema("-" + e.getLexema()); RESULT = e;
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("expr",75, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // expr ::= MENOS DECIMAL 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		 e.setNombreToken("decimal");e.setLexema("-" + e.getLexema()); RESULT = e;
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("expr",75, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // expr ::= ENTERO 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		 e.setNombreToken("integer"); RESULT = e;
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("expr",75, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // expr ::= DECIMAL 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		 e.setNombreToken("decimal"); RESULT = e;
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("expr",75, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // expr ::= CHAR 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		 e.setNombreToken("char"); RESULT = e;
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("expr",75, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // expr ::= STRING 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		 e.setNombreToken("string"); RESULT = e;
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("expr",75, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // expr ::= STRING_WS 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		 e.setNombreToken("string"); RESULT = e;
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("expr",75, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // expr ::= BOOLEAN 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		 e.setNombreToken("boolean"); RESULT = e;
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("expr",75, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // expr ::= ID_VARIABLE 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		
	         					e.setNombreToken(funTablaSim.buscarVariableTipo(e.getLexema(),procesoActual));
	         					if(e.getNombreToken() == null){
	         						addError("Semantico",e,"La variable: " + e.getLexema( )+ " No esta definida",
	         							"Declare la variable");
	         					}else{
	         						e.setLexema(funTablaSim.getValorVariable(e.getLexema(),procesoActual)); 				
		         					RESULT = e;
	         					}	         					
	         				
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("expr",75, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // expr ::= error 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("expr",75, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // estruc_init ::= inicio_init funcion fin_estruct 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("estruc_init",76, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // inicio_init ::= el_init ini_estruct 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("inicio_init",77, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // el_init ::= INIT 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("el_init",78, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // el_init ::= error 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("el_init",78, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // ini_estruct ::= LLAI DOS_PUNTOS 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("ini_estruct",80, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // ini_estruct ::= error 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("ini_estruct",80, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // fin_estruct ::= DOS_PUNTOS LLAD END 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("fin_estruct",79, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // fin_estruct ::= error 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("fin_estruct",79, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // declaracion_asginacion ::= declaracion asignacion 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		
									for(Token variable: listaVariablesActuales){
										String tipo = funTablaSim.buscarVariableTipo(variable.getLexema(),procesoActual);
										if(tipo != null){
											if(e != null){
												if(e.getNombreToken().equals(tipo)){
													funTablaSim.addValor(variable.getLexema(),procesoActual,e.getLexema());
												}else{
													addError("Semantico",e,
														"Tipo " + e.getNombreToken() + " No es igual al tipo de la variable: " + tipo,
														"cambie el tipo de la variable");
												}
											}else{
												funTablaSim.addValorDefecto(variable.getLexema(),procesoActual);
											}

										}else{
											addError("Semantico",variable,"La variable: "+ variable.getLexema()+" No esta declarada",
												"Declare la variable");
										}									
									}
								
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("declaracion_asginacion",81, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // fin_instruccion ::= SEMI 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("fin_instruccion",82, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // NT$6 ::= 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;

						tipoVariable = e.getLexema();
						listaVariablesActuales.clear();
					
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("NT$6",128, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // declaracion ::= tipo_dato NT$6 modo 
            {
              Token RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Token) ((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)).value;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("declaracion",83, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // NT$7 ::= 
            {
              Token RESULT =null;
listaVariablesActuales.clear();
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("NT$7",129, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // declaracion ::= NT$7 nombre_variable 
            {
              Token RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Token) ((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)).value;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("declaracion",83, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // tipo_dato ::= ID_INTEGER 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		RESULT = e;
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("tipo_dato",84, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // tipo_dato ::= ID_DECIMAL 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		RESULT = e;
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("tipo_dato",84, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // tipo_dato ::= ID_STRING 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		RESULT = e;
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("tipo_dato",84, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // tipo_dato ::= ID_BOOLEAN 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		RESULT = e;
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("tipo_dato",84, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // tipo_dato ::= ID_CHAR 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		RESULT = e;
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("tipo_dato",84, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // modo ::= GLOBAL nombre_variable 
            {
              Token RESULT =null;
		
				for(Token variable: listaVariablesActuales){
					String nameVar = variable.getLexema(); 
					boolean isAdd = funTablaSim.agregarSim(nameVar,tipoVariable,"","GLOBAL",procesoActual,posicionVar,procedimientoActual);
					if(isAdd){
						posicionVar++;
					}else{
						addError("Semantico",variable,"La variable " + variable.getLexema()+" ya esta definida",
							" No declare la variable, solo asignela");
					}
					
				}
			
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("modo",85, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // modo ::= nombre_variable 
            {
              Token RESULT =null;
		
				for(Token variable: listaVariablesActuales){
					String nameVar = variable.getLexema(); 
					boolean isAdd = funTablaSim.agregarSim(nameVar,tipoVariable,"","-",procesoActual,posicionVar,procedimientoActual);
					if(isAdd){
						posicionVar++;
					}else{
						addError("Semantico",variable,"La variable " + variable.getLexema()+" ya esta definida",
							" No declare la variable, solo asignela");
					}
					
				}
			
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("modo",85, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // modo ::= error 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("modo",85, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // NT$8 ::= 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;

							listaVariablesActuales.add(e);
						
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("NT$8",130, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // nombre_variable ::= ID_VARIABLE NT$8 otras_variables 
            {
              Token RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Token) ((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)).value;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("nombre_variable",86, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // otras_variables ::= otra_variable 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("otras_variables",87, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // otras_variables ::= 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("otras_variables",87, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // otra_variable ::= otra_variable nombre_otra_variable 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("otra_variable",88, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // otra_variable ::= nombre_otra_variable 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("otra_variable",88, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // nombre_otra_variable ::= COMA id_variable 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("nombre_otra_variable",89, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // id_variable ::= ID_VARIABLE 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		
						listaVariablesActuales.add(e);
					
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("id_variable",90, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // id_variable ::= error 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("id_variable",90, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // asignacion ::= IGUAL tipos_datos fin_instruccion 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)).value;
		
							RESULT = e;
						
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("asignacion",91, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // asignacion ::= fin_instruccion 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("asignacion",91, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // asignacion ::= error 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("asignacion",91, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // tipos_datos ::= expr 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		
						RESULT = e;
					
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("tipos_datos",92, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // tipos_datos ::= GET_ELEMENT_BY_ID cont_element_by_id 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.peek()).value;
		
							e.setLexema("getElementById(\""+e.getLexema()+"\")");
							RESULT = e;
						
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("tipos_datos",92, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // cont_element_by_id ::= PAI ID_ELEMENT PAD 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)).value;
		
									e.setNombreToken("string");
									RESULT = e;
								
              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("cont_element_by_id",93, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // cont_element_by_id ::= error 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("cont_element_by_id",93, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // estruc_if ::= if estruc_else_if 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("estruc_if",94, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // if ::= IF condicion cont_estruc_if 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("if",95, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // condicion ::= PAI expr PAD 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("condicion",96, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // condicion ::= error 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("condicion",96, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // cont_estruc_if ::= THEN instrucciones_para_if 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("cont_estruc_if",97, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // cont_estruc_if ::= error 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("cont_estruc_if",97, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // estruc_else_if ::= else_if estruc_else 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("estruc_else_if",98, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // estruc_else_if ::= estruc_else 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("estruc_else_if",98, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // else_if ::= else_if un_else_if 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("else_if",99, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // else_if ::= un_else_if 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("else_if",99, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // un_else_if ::= inicio_else_if condicion cont_estruc_if 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("un_else_if",100, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // inicio_else_if ::= ELSE IF 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("inicio_else_if",101, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // estruc_else ::= else 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("estruc_else",102, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // estruc_else ::= 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("estruc_else",102, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // else ::= inicio_else instrucciones_para_if 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("else",103, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // inicio_else ::= ELSE 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("inicio_else",104, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // fin_instruccion_error ::= SEMI 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("fin_instruccion_error",105, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // fin_instruccion_error ::= error 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("fin_instruccion_error",105, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // funciones_especiales ::= funciones_especiales_parametros fin_instruccion_error 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("funciones_especiales",106, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // funciones_especiales ::= funciones_especiales_sin_parametros fin_instruccion_error 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("funciones_especiales",106, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // funciones_especiales_parametros ::= ASC condicion 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("funciones_especiales_parametros",107, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // funciones_especiales_parametros ::= DESC condicion 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("funciones_especiales_parametros",107, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // funciones_especiales_parametros ::= LETPAR_NUM condicion 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("funciones_especiales_parametros",107, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // funciones_especiales_parametros ::= LETIMPAR_NUM condicion 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("funciones_especiales_parametros",107, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // funciones_especiales_parametros ::= REVERSE condicion 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("funciones_especiales_parametros",107, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // funciones_especiales_parametros ::= ALERT_INFO condicion 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("funciones_especiales_parametros",107, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // funciones_especiales_sin_parametros ::= CARACTER_ALEATORIO parentesis 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("funciones_especiales_sin_parametros",108, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // funciones_especiales_sin_parametros ::= NUM_ALEATORIO parentesis 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("funciones_especiales_sin_parametros",108, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // funciones_especiales_sin_parametros ::= EXIT parentesis 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("funciones_especiales_sin_parametros",108, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // estruc_repeat ::= REPEAT asig_decla_repeat huntil instrucciones_para_if 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("estruc_repeat",109, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // asig_decla_repeat ::= PAI declaracion_asginacion_repeat PAD 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("asig_decla_repeat",110, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // asig_decla_repeat ::= error 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("asig_decla_repeat",110, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // declaracion_asginacion_repeat ::= declaracion_repeat asignacion_repeat 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("declaracion_asginacion_repeat",111, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // declaracion_repeat ::= tipo_dato ID_VARIABLE 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("declaracion_repeat",112, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // declaracion_repeat ::= ID_VARIABLE 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("declaracion_repeat",112, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // declaracion_repeat ::= error 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("declaracion_repeat",112, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // asignacion_repeat ::= IGUAL expr 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("asignacion_repeat",113, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // asignacion_repeat ::= error 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("asignacion_repeat",113, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // huntil ::= HUNTIL condicion 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("huntil",114, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // huntil ::= error 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("huntil",114, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // estruc_while ::= WHILE condicion thenwhile instrucciones_para_if 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("estruc_while",115, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // thenwhile ::= THENWHILE 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("thenwhile",116, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // thenwhile ::= error 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("thenwhile",116, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // insert ::= INSERT estruc_cont_insert fin_instruccion_error 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("insert",117, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // estruc_cont_insert ::= PAI cont_insert PAD 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("estruc_cont_insert",118, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // estruc_cont_insert ::= error 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("estruc_cont_insert",118, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // cont_insert ::= cont_insert COMA cont_insert 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("cont_insert",119, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.elementAt(CUP$ParserGCIC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // cont_insert ::= ID_ELEMENT 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("cont_insert",119, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // cont_insert ::= ID_VARIABLE 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("cont_insert",119, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // cont_insert ::= error 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("cont_insert",119, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // instrucciones ::= estruc_init 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("instrucciones",120, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // instrucciones ::= tipo_instruccion 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("instrucciones",120, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // instrucciones_para_if ::= estruc_init 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("instrucciones_para_if",121, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // instrucciones_para_if ::= insert 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("instrucciones_para_if",121, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // instrucciones_para_if ::= funciones_especiales 
            {
              Token RESULT =null;

              CUP$ParserGCIC$result = parser.getSymbolFactory().newSymbol("instrucciones_para_if",121, ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGCIC$stack.peek()), RESULT);
            }
          return CUP$ParserGCIC$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserGCIC$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserGCIC$do_action(
    int                        CUP$ParserGCIC$act_num,
    java_cup.runtime.lr_parser CUP$ParserGCIC$parser,
    java.util.Stack            CUP$ParserGCIC$stack,
    int                        CUP$ParserGCIC$top)
    throws java.lang.Exception
    {
              return CUP$ParserGCIC$do_action_part00000000(
                               CUP$ParserGCIC$act_num,
                               CUP$ParserGCIC$parser,
                               CUP$ParserGCIC$stack,
                               CUP$ParserGCIC$top);
    }
}

}

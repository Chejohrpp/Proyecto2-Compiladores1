// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: lexerGCIC.flex

/*Codigo importado*/
package com.mycompany.p2c1.ReglasGram.gcic;
import com.mycompany.p2c1.ReglasGram.Token;
import java_cup.runtime.*;
import static com.mycompany.p2c1.ReglasGram.gcic.symGCIC.*;
import java.util.ArrayList;
import java.util.List;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class LexerGCIC implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\4"+
    "\1\5\1\6\3\0\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\10\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\44"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\44\1\63\1\0\1\64\1\0\1\65\1\0\1\66"+
    "\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76"+
    "\1\44\1\77\1\100\1\101\1\102\1\103\1\104\1\44"+
    "\1\105\1\106\1\107\1\110\1\111\1\112\1\113\1\114"+
    "\1\115\1\116\1\117\1\120\101\0\1\31\2\0\1\31"+
    "\u013d\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\1\1\4\1\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\2\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\13\16\23\1\24"+
    "\1\25\16\23\1\26\1\27\1\30\1\0\1\31\2\0"+
    "\1\32\1\0\1\33\1\0\1\15\1\0\1\34\1\35"+
    "\1\36\1\13\12\23\1\37\24\23\1\40\12\23\1\2"+
    "\1\41\1\0\1\42\1\43\1\0\1\13\1\23\1\44"+
    "\10\23\1\45\4\23\1\46\37\23\1\43\1\0\1\13"+
    "\3\23\1\47\3\23\1\50\12\23\1\51\1\52\1\53"+
    "\1\23\1\54\10\23\1\55\3\23\1\56\11\23\1\57"+
    "\1\23\1\43\1\0\1\13\4\23\1\60\2\23\1\61"+
    "\22\23\1\62\3\23\1\0\4\23\1\0\1\43\1\0"+
    "\1\13\2\23\1\63\1\23\1\64\1\65\1\23\1\66"+
    "\3\23\1\67\2\23\1\70\1\71\5\23\1\72\5\23"+
    "\2\0\3\23\1\73\1\0\1\74\3\23\1\75\4\23"+
    "\1\76\3\23\1\77\1\23\1\100\2\23\1\101\1\102"+
    "\2\0\1\23\1\103\1\0\2\23\1\104\1\105\1\23"+
    "\1\106\4\23\1\107\2\23\2\0\1\23\1\0\7\23"+
    "\1\110\1\111\1\23\1\0\1\40\1\23\1\0\1\112"+
    "\2\23\1\113\1\23\1\114\1\23\1\0\2\23\1\115"+
    "\4\23\1\116\3\23\1\117\1\120\4\23\1\121";

  private static int [] zzUnpackAction() {
    int [] result = new int[375];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\121\0\121\0\242\0\363\0\u0144\0\121\0\u0195"+
    "\0\121\0\121\0\121\0\121\0\121\0\121\0\u01e6\0\121"+
    "\0\u0237\0\u0288\0\121\0\121\0\u02d9\0\u032a\0\u037b\0\u03cc"+
    "\0\u041d\0\u046e\0\u04bf\0\u0510\0\u0561\0\u05b2\0\u0603\0\u0654"+
    "\0\u06a5\0\u06f6\0\u0747\0\u0798\0\u07e9\0\u083a\0\121\0\121"+
    "\0\u088b\0\u08dc\0\u092d\0\u097e\0\u09cf\0\u0a20\0\u0a71\0\u0ac2"+
    "\0\u0b13\0\u0b64\0\u0bb5\0\u0c06\0\u0c57\0\u0ca8\0\121\0\121"+
    "\0\121\0\u0cf9\0\121\0\u0144\0\u0d4a\0\121\0\u0d9b\0\121"+
    "\0\u0dec\0\u0e3d\0\u0e8e\0\121\0\121\0\121\0\u0edf\0\u0f30"+
    "\0\u0f81\0\u0fd2\0\u1023\0\u1074\0\u10c5\0\u1116\0\u1167\0\u11b8"+
    "\0\u1209\0\u046e\0\u125a\0\u12ab\0\u12fc\0\u134d\0\u139e\0\u13ef"+
    "\0\u1440\0\u1491\0\u14e2\0\u1533\0\u1584\0\u15d5\0\u1626\0\u1677"+
    "\0\u16c8\0\u1719\0\u176a\0\u17bb\0\u180c\0\u185d\0\u046e\0\u18ae"+
    "\0\u18ff\0\u1950\0\u19a1\0\u19f2\0\u1a43\0\u1a94\0\u1ae5\0\u1b36"+
    "\0\u1b87\0\u0cf9\0\121\0\u1bd8\0\121\0\u1c29\0\u1c7a\0\u1ccb"+
    "\0\u1d1c\0\u046e\0\u1d6d\0\u1dbe\0\u1e0f\0\u1e60\0\u1eb1\0\u1f02"+
    "\0\u1f53\0\u1fa4\0\u046e\0\u1ff5\0\u2046\0\u2097\0\u20e8\0\u046e"+
    "\0\u2139\0\u218a\0\u21db\0\u222c\0\u227d\0\u22ce\0\u231f\0\u2370"+
    "\0\u23c1\0\u2412\0\u2463\0\u24b4\0\u2505\0\u2556\0\u25a7\0\u25f8"+
    "\0\u2649\0\u269a\0\u26eb\0\u273c\0\u278d\0\u27de\0\u282f\0\u2880"+
    "\0\u28d1\0\u2922\0\u2973\0\u29c4\0\u2a15\0\u2a66\0\u2ab7\0\u2b08"+
    "\0\u2b59\0\u2baa\0\u2bfb\0\u2c4c\0\u2c9d\0\u046e\0\u2cee\0\u2d3f"+
    "\0\u2d90\0\u0f30\0\u2de1\0\u2e32\0\u2e83\0\u2ed4\0\u2f25\0\u2f76"+
    "\0\u2fc7\0\u3018\0\u3069\0\u30ba\0\u046e\0\u046e\0\u046e\0\u310b"+
    "\0\u046e\0\u315c\0\u31ad\0\u31fe\0\u324f\0\u32a0\0\u32f1\0\u3342"+
    "\0\u3393\0\u33e4\0\u3435\0\u3486\0\u34d7\0\u046e\0\u3528\0\u3579"+
    "\0\u35ca\0\u361b\0\u366c\0\u36bd\0\u370e\0\u375f\0\u37b0\0\u046e"+
    "\0\u3801\0\u3852\0\u38a3\0\u38f4\0\u3945\0\u3996\0\u39e7\0\u3a38"+
    "\0\u046e\0\u3a89\0\u3ada\0\u046e\0\u3b2b\0\u3b7c\0\u3bcd\0\u3c1e"+
    "\0\u3c6f\0\u3cc0\0\u3d11\0\u3d62\0\u3db3\0\u3e04\0\u3e55\0\u3ea6"+
    "\0\u3ef7\0\u3f48\0\u3f99\0\u3fea\0\u403b\0\u408c\0\u046e\0\u40dd"+
    "\0\u412e\0\u417f\0\u41d0\0\u4221\0\u4272\0\u42c3\0\u4314\0\u4365"+
    "\0\121\0\u43b6\0\u4407\0\u4458\0\u44a9\0\u046e\0\u44fa\0\u046e"+
    "\0\u046e\0\u454b\0\u046e\0\u459c\0\u45ed\0\u463e\0\u046e\0\u468f"+
    "\0\u46e0\0\u046e\0\u046e\0\u4731\0\u4782\0\u47d3\0\u4824\0\u4875"+
    "\0\u046e\0\u48c6\0\u4917\0\u4968\0\u49b9\0\u4a0a\0\u4a5b\0\u4aac"+
    "\0\u4afd\0\u4b4e\0\u4b9f\0\u046e\0\u4bf0\0\u01e6\0\u4c41\0\u4c92"+
    "\0\u4ce3\0\u046e\0\u4d34\0\u4d85\0\u4dd6\0\u4e27\0\u046e\0\u4e78"+
    "\0\u4ec9\0\u4f1a\0\u046e\0\u4f6b\0\u046e\0\u4fbc\0\u500d\0\u046e"+
    "\0\u046e\0\u505e\0\u50af\0\u5100\0\u046e\0\u5151\0\u51a2\0\u51f3"+
    "\0\u046e\0\u046e\0\u5244\0\u046e\0\u5295\0\u52e6\0\u5337\0\u5388"+
    "\0\u53d9\0\u542a\0\u547b\0\u54cc\0\u551d\0\u556e\0\u55bf\0\u5610"+
    "\0\u5661\0\u56b2\0\u5703\0\u5754\0\u57a5\0\u57f6\0\u53d9\0\u046e"+
    "\0\u5847\0\u5898\0\121\0\u58e9\0\u593a\0\u046e\0\u598b\0\u59dc"+
    "\0\u046e\0\u5a2d\0\u046e\0\u5a7e\0\u5acf\0\u5b20\0\u5b71\0\u046e"+
    "\0\u5bc2\0\u5c13\0\u5c64\0\u5cb5\0\u046e\0\u5d06\0\u5d57\0\u5da8"+
    "\0\u046e\0\u046e\0\u5df9\0\u5e4a\0\u5e9b\0\u5eec\0\u046e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[375];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\3\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\2\22\1\23\1\24\1\25\1\26\1\27\1\17"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\2\32\1\36"+
    "\1\37\2\32\1\40\1\32\1\41\1\42\1\43\1\44"+
    "\1\32\1\45\2\32\1\46\2\32\1\47\1\50\1\17"+
    "\1\51\1\52\1\53\1\54\1\32\1\55\1\56\1\57"+
    "\1\60\3\32\1\61\1\62\1\32\1\63\1\64\1\65"+
    "\2\32\1\66\3\32\1\67\1\70\1\71\123\0\1\3"+
    "\123\0\1\72\21\0\1\73\71\0\1\74\4\75\1\74"+
    "\1\76\112\74\10\77\1\100\110\77\17\0\1\17\11\0"+
    "\32\17\2\0\31\17\22\0\1\101\1\0\3\102\114\0"+
    "\1\101\1\0\3\22\102\0\1\103\21\0\1\104\120\0"+
    "\1\105\120\0\1\106\110\0\1\17\11\0\32\17\2\0"+
    "\7\17\1\107\21\17\22\0\1\17\1\0\3\110\5\0"+
    "\2\17\13\32\1\111\5\32\1\112\6\32\2\0\31\32"+
    "\22\0\1\17\1\0\3\110\5\0\2\17\30\32\2\0"+
    "\31\32\22\0\1\17\1\0\3\110\5\0\2\17\1\113"+
    "\27\32\2\0\1\114\30\32\22\0\1\17\1\0\3\110"+
    "\5\0\2\17\4\32\1\115\23\32\2\0\31\32\22\0"+
    "\1\17\1\0\3\110\5\0\2\17\13\32\1\116\1\32"+
    "\1\117\10\32\1\120\1\32\2\0\31\32\22\0\1\17"+
    "\1\0\3\110\5\0\2\17\23\32\1\121\4\32\2\0"+
    "\31\32\22\0\1\17\1\0\3\110\5\0\2\17\5\32"+
    "\1\122\7\32\1\123\12\32\2\0\31\32\22\0\1\17"+
    "\1\0\3\110\5\0\2\17\4\32\1\124\23\32\2\0"+
    "\31\32\22\0\1\17\1\0\3\110\5\0\2\17\23\32"+
    "\1\125\4\32\2\0\31\32\22\0\1\17\1\0\3\110"+
    "\5\0\2\17\15\32\1\126\12\32\2\0\31\32\22\0"+
    "\1\17\1\0\3\110\5\0\2\17\20\32\1\127\7\32"+
    "\2\0\31\32\22\0\1\17\1\0\3\110\5\0\2\17"+
    "\4\32\1\130\23\32\2\0\31\32\22\0\1\17\1\0"+
    "\3\110\5\0\2\17\7\32\1\131\20\32\2\0\31\32"+
    "\22\0\1\17\1\0\3\110\5\0\2\17\7\32\1\132"+
    "\20\32\2\0\31\32\22\0\1\17\1\0\3\110\5\0"+
    "\2\17\30\32\2\0\13\32\1\133\15\32\22\0\1\17"+
    "\1\0\3\110\5\0\2\17\30\32\2\0\1\32\1\134"+
    "\14\32\1\135\12\32\22\0\1\17\1\0\3\110\5\0"+
    "\2\17\30\32\2\0\1\114\7\32\1\136\2\32\1\137"+
    "\2\32\1\140\12\32\22\0\1\17\1\0\3\110\5\0"+
    "\2\17\30\32\2\0\5\32\1\141\23\32\22\0\1\17"+
    "\1\0\3\110\5\0\2\17\30\32\2\0\1\32\1\142"+
    "\14\32\1\143\12\32\22\0\1\17\1\0\3\110\5\0"+
    "\2\17\30\32\2\0\5\32\1\144\23\32\22\0\1\17"+
    "\1\0\3\110\5\0\2\17\30\32\2\0\5\32\1\145"+
    "\12\32\1\146\10\32\22\0\1\17\1\0\3\110\5\0"+
    "\2\17\30\32\2\0\4\32\1\147\10\32\1\150\13\32"+
    "\22\0\1\17\1\0\3\110\5\0\2\17\30\32\2\0"+
    "\1\32\1\151\27\32\22\0\1\17\1\0\3\110\5\0"+
    "\2\17\30\32\2\0\15\32\1\152\13\32\22\0\1\17"+
    "\1\0\3\110\5\0\2\17\30\32\2\0\16\32\1\153"+
    "\12\32\22\0\1\17\1\0\3\110\5\0\2\17\30\32"+
    "\2\0\20\32\1\154\1\32\1\155\6\32\22\0\1\17"+
    "\1\0\3\110\5\0\2\17\30\32\2\0\5\32\1\156"+
    "\12\32\1\157\6\32\1\160\1\32\22\0\1\17\1\0"+
    "\3\110\5\0\2\17\30\32\2\0\11\32\1\161\17\32"+
    "\3\0\1\162\3\0\115\162\6\75\1\163\112\75\10\164"+
    "\1\165\110\164\21\0\3\166\116\0\3\102\113\0\1\167"+
    "\121\0\1\17\11\0\32\17\2\0\13\17\1\170\15\17"+
    "\24\0\3\110\7\0\30\110\2\0\31\110\22\0\1\17"+
    "\1\0\3\110\5\0\2\17\4\32\1\171\23\32\2\0"+
    "\31\32\22\0\1\17\1\0\3\110\5\0\2\17\2\32"+
    "\1\172\25\32\2\0\31\32\22\0\1\17\1\0\3\110"+
    "\5\0\2\17\20\32\1\173\7\32\2\0\31\32\22\0"+
    "\1\17\1\0\3\110\5\0\2\17\1\32\1\174\1\32"+
    "\1\175\2\32\1\176\1\177\1\200\2\32\1\201\2\32"+
    "\1\202\1\203\1\32\1\204\1\205\5\32\2\0\2\32"+
    "\1\174\1\32\1\175\2\32\1\176\1\177\1\200\1\32"+
    "\1\201\2\32\1\202\1\203\1\32\1\204\1\205\6\32"+
    "\22\0\1\17\1\0\3\110\5\0\2\17\21\32\1\206"+
    "\6\32\2\0\31\32\22\0\1\17\1\0\3\110\5\0"+
    "\2\17\21\32\1\207\6\32\2\0\31\32\22\0\1\17"+
    "\1\0\3\110\5\0\2\17\3\32\1\210\24\32\2\0"+
    "\31\32\22\0\1\17\1\0\3\110\5\0\2\17\10\32"+
    "\1\211\17\32\2\0\31\32\22\0\1\17\1\0\3\110"+
    "\5\0\2\17\15\32\1\212\12\32\2\0\31\32\22\0"+
    "\1\17\1\0\3\110\5\0\2\17\10\32\1\213\10\32"+
    "\1\214\6\32\2\0\31\32\22\0\1\17\1\0\3\110"+
    "\5\0\2\17\22\32\1\215\5\32\2\0\31\32\22\0"+
    "\1\17\1\0\3\110\5\0\2\17\14\32\1\216\13\32"+
    "\2\0\31\32\22\0\1\17\1\0\3\110\5\0\2\17"+
    "\30\32\2\0\1\217\30\32\22\0\1\17\1\0\3\110"+
    "\5\0\2\17\16\32\1\220\11\32\2\0\31\32\22\0"+
    "\1\17\1\0\3\110\5\0\2\17\17\32\1\221\4\32"+
    "\1\222\3\32\2\0\31\32\22\0\1\17\1\0\3\110"+
    "\5\0\2\17\4\32\1\223\23\32\2\0\31\32\22\0"+
    "\1\17\1\0\3\110\5\0\2\17\10\32\1\224\17\32"+
    "\2\0\31\32\22\0\1\17\1\0\3\110\5\0\2\17"+
    "\30\32\2\0\22\32\1\147\6\32\22\0\1\17\1\0"+
    "\3\110\5\0\2\17\30\32\2\0\3\32\1\225\25\32"+
    "\22\0\1\17\1\0\3\110\5\0\2\17\30\32\2\0"+
    "\16\32\1\226\12\32\22\0\1\17\1\0\3\110\5\0"+
    "\2\17\30\32\2\0\1\32\1\227\27\32\22\0\1\17"+
    "\1\0\3\110\5\0\2\17\30\32\2\0\1\32\1\230"+
    "\27\32\22\0\1\17\1\0\3\110\5\0\2\17\30\32"+
    "\2\0\13\32\1\231\15\32\22\0\1\17\1\0\3\110"+
    "\5\0\2\17\30\32\2\0\3\32\1\232\25\32\22\0"+
    "\1\17\1\0\3\110\5\0\2\17\30\32\2\0\13\32"+
    "\1\233\15\32\22\0\1\17\1\0\3\110\5\0\2\17"+
    "\30\32\2\0\15\32\1\234\13\32\22\0\1\17\1\0"+
    "\3\110\5\0\2\17\30\32\2\0\22\32\1\235\6\32"+
    "\22\0\1\17\1\0\3\110\5\0\2\17\30\32\2\0"+
    "\11\32\1\236\17\32\22\0\1\17\1\0\3\110\5\0"+
    "\2\17\30\32\2\0\5\32\1\237\23\32\22\0\1\17"+
    "\1\0\3\110\5\0\2\17\30\32\2\0\22\32\1\240"+
    "\6\32\22\0\1\17\1\0\3\110\5\0\2\17\30\32"+
    "\2\0\14\32\1\241\14\32\22\0\1\17\1\0\3\110"+
    "\5\0\2\17\30\32\2\0\3\32\1\242\25\32\22\0"+
    "\1\17\1\0\3\110\5\0\2\17\30\32\2\0\25\32"+
    "\1\243\3\32\22\0\1\17\1\0\3\110\5\0\2\17"+
    "\30\32\2\0\3\32\1\147\25\32\22\0\1\17\1\0"+
    "\3\110\5\0\2\17\30\32\2\0\20\32\1\244\10\32"+
    "\22\0\1\17\1\0\3\110\5\0\2\17\30\32\2\0"+
    "\26\32\1\245\2\32\22\0\1\17\1\0\3\110\5\0"+
    "\2\17\30\32\2\0\23\32\1\246\5\32\22\0\1\17"+
    "\1\0\3\110\5\0\2\17\30\32\2\0\17\32\1\241"+
    "\11\32\22\0\1\17\1\0\3\110\5\0\2\17\30\32"+
    "\2\0\4\32\1\247\24\32\3\0\10\164\1\100\110\164"+
    "\21\0\3\250\113\0\1\251\121\0\1\17\11\0\32\17"+
    "\2\0\16\17\1\252\12\17\22\0\1\17\1\0\3\110"+
    "\5\0\2\17\20\32\1\253\7\32\2\0\31\32\22\0"+
    "\1\17\1\0\3\110\5\0\2\17\1\254\27\32\2\0"+
    "\31\32\22\0\1\17\1\0\3\110\5\0\2\17\16\32"+
    "\1\255\1\32\1\256\2\32\1\257\4\32\2\0\16\32"+
    "\1\255\1\32\1\256\2\32\1\257\5\32\22\0\1\17"+
    "\1\0\3\110\5\0\2\17\10\32\1\260\17\32\2\0"+
    "\11\32\1\260\17\32\22\0\1\17\1\0\3\110\5\0"+
    "\2\17\2\32\1\261\25\32\2\0\3\32\1\261\25\32"+
    "\22\0\1\17\1\0\1\110\1\262\1\110\5\0\2\17"+
    "\4\32\1\263\23\32\2\0\5\32\1\263\23\32\22\0"+
    "\1\17\1\0\3\110\5\0\2\17\14\32\1\264\1\265"+
    "\12\32\2\0\14\32\1\264\1\265\13\32\22\0\1\17"+
    "\1\0\3\110\5\0\2\17\10\32\1\266\17\32\2\0"+
    "\11\32\1\266\17\32\22\0\1\17\1\0\3\110\5\0"+
    "\2\17\17\32\1\267\10\32\2\0\17\32\1\267\11\32"+
    "\22\0\1\17\1\0\3\110\5\0\2\17\2\32\1\270"+
    "\1\32\1\271\12\32\1\272\10\32\2\0\3\32\1\270"+
    "\1\32\1\271\11\32\1\272\11\32\22\0\1\17\1\0"+
    "\3\110\5\0\2\17\4\32\1\273\3\32\1\274\17\32"+
    "\2\0\5\32\1\273\3\32\1\274\17\32\22\0\1\17"+
    "\1\0\3\110\5\0\2\17\2\32\1\275\25\32\2\0"+
    "\31\32\22\0\1\17\1\0\3\110\5\0\2\17\4\32"+
    "\1\276\23\32\2\0\31\32\22\0\1\17\1\0\3\110"+
    "\5\0\2\17\22\32\1\277\5\32\2\0\31\32\22\0"+
    "\1\17\1\0\3\110\5\0\2\17\22\32\1\300\5\32"+
    "\2\0\31\32\22\0\1\17\1\0\3\110\5\0\2\17"+
    "\22\32\1\301\5\32\2\0\31\32\22\0\1\17\1\0"+
    "\3\110\5\0\2\17\4\32\1\302\23\32\2\0\31\32"+
    "\22\0\1\17\1\0\3\110\5\0\2\17\10\32\1\303"+
    "\6\32\1\304\10\32\2\0\31\32\22\0\1\17\1\0"+
    "\3\110\5\0\2\17\30\32\2\0\1\305\30\32\22\0"+
    "\1\17\1\0\3\110\5\0\2\17\13\32\1\306\14\32"+
    "\2\0\31\32\22\0\1\17\1\0\3\110\5\0\2\17"+
    "\2\32\1\307\25\32\2\0\31\32\22\0\1\17\1\0"+
    "\3\110\5\0\2\17\4\32\1\310\23\32\2\0\31\32"+
    "\22\0\1\17\1\0\3\110\5\0\2\17\4\32\1\311"+
    "\23\32\2\0\31\32\22\0\1\17\1\0\3\110\5\0"+
    "\2\17\15\32\1\312\12\32\2\0\31\32\22\0\1\17"+
    "\1\0\3\110\5\0\2\17\13\32\1\313\14\32\2\0"+
    "\31\32\22\0\1\17\1\0\3\110\5\0\2\17\30\32"+
    "\2\0\12\32\1\314\16\32\22\0\1\17\1\0\3\110"+
    "\5\0\2\17\30\32\2\0\13\32\1\315\15\32\22\0"+
    "\1\17\1\0\3\110\5\0\2\17\30\32\2\0\20\32"+
    "\1\316\10\32\22\0\1\17\1\0\3\110\5\0\2\17"+
    "\30\32\2\0\21\32\1\243\7\32\22\0\1\17\1\0"+
    "\3\110\5\0\2\17\30\32\2\0\16\32\1\317\2\32"+
    "\1\147\7\32\22\0\1\17\1\0\3\110\5\0\2\17"+
    "\30\32\2\0\11\32\1\320\17\32\22\0\1\17\1\0"+
    "\3\110\5\0\2\17\30\32\2\0\21\32\1\246\7\32"+
    "\22\0\1\17\1\0\3\110\5\0\2\17\30\32\2\0"+
    "\22\32\1\321\6\32\22\0\1\17\1\0\3\110\5\0"+
    "\2\17\4\32\1\322\23\32\2\0\31\32\22\0\1\17"+
    "\1\0\3\110\5\0\2\17\30\32\2\0\7\32\1\323"+
    "\21\32\22\0\1\17\1\0\3\110\5\0\2\17\30\32"+
    "\2\0\6\32\1\147\22\32\22\0\1\17\1\0\3\110"+
    "\5\0\2\17\30\32\2\0\5\32\1\324\23\32\22\0"+
    "\1\17\1\0\3\110\5\0\2\17\30\32\2\0\5\32"+
    "\1\147\23\32\22\0\1\17\1\0\3\110\5\0\2\17"+
    "\30\32\2\0\13\32\1\325\15\32\22\0\1\17\1\0"+
    "\3\110\5\0\2\17\30\32\2\0\21\32\1\147\7\32"+
    "\22\0\1\17\1\0\3\110\5\0\2\17\30\32\2\0"+
    "\11\32\1\326\17\32\22\0\1\17\1\0\3\110\5\0"+
    "\2\17\30\32\2\0\22\32\1\327\6\32\22\0\1\17"+
    "\1\0\3\110\5\0\2\17\30\32\2\0\5\32\1\330"+
    "\23\32\22\0\1\17\1\0\3\110\5\0\2\17\30\32"+
    "\2\0\22\32\1\331\6\32\24\0\3\332\75\0\16\251"+
    "\1\333\102\251\17\0\1\17\11\0\32\17\2\0\2\17"+
    "\1\334\26\17\22\0\1\17\1\0\3\110\5\0\2\17"+
    "\22\32\1\335\5\32\2\0\31\32\22\0\1\17\1\0"+
    "\3\110\5\0\2\17\2\32\1\336\25\32\2\0\31\32"+
    "\22\0\1\17\1\0\3\110\5\0\2\17\3\32\1\337"+
    "\24\32\2\0\4\32\1\337\24\32\22\0\1\17\1\0"+
    "\3\110\5\0\2\17\22\32\1\340\5\32\2\0\22\32"+
    "\1\340\6\32\22\0\1\17\1\0\3\110\5\0\2\17"+
    "\24\32\1\341\3\32\2\0\24\32\1\341\4\32\22\0"+
    "\1\17\1\0\3\110\5\0\2\17\10\32\1\342\17\32"+
    "\2\0\11\32\1\342\17\32\22\0\1\17\1\0\3\110"+
    "\5\0\2\17\1\343\27\32\2\0\1\32\1\343\27\32"+
    "\22\0\1\17\1\0\3\110\5\0\2\17\6\32\1\344"+
    "\21\32\2\0\7\32\1\344\21\32\22\0\1\17\1\0"+
    "\3\110\5\0\2\17\17\32\1\345\10\32\2\0\17\32"+
    "\1\345\11\32\22\0\1\17\1\0\3\110\5\0\2\17"+
    "\15\32\1\346\12\32\2\0\15\32\1\346\13\32\22\0"+
    "\1\17\1\0\3\110\5\0\2\17\22\32\1\347\5\32"+
    "\2\0\22\32\1\347\6\32\22\0\1\17\1\0\3\110"+
    "\5\0\2\17\20\32\1\350\7\32\2\0\20\32\1\350"+
    "\10\32\22\0\1\17\1\0\3\110\5\0\2\17\13\32"+
    "\1\351\14\32\2\0\13\32\1\351\15\32\22\0\1\17"+
    "\1\0\3\110\5\0\2\17\1\352\27\32\2\0\1\32"+
    "\1\352\27\32\22\0\1\17\1\0\3\110\5\0\2\17"+
    "\26\32\1\353\1\32\2\0\26\32\1\353\2\32\22\0"+
    "\1\17\1\0\3\110\5\0\2\17\22\32\1\354\5\32"+
    "\2\0\22\32\1\354\6\32\22\0\1\17\1\0\3\110"+
    "\5\0\2\17\10\32\1\355\17\32\2\0\31\32\22\0"+
    "\1\17\1\0\3\110\5\0\2\17\20\32\1\356\7\32"+
    "\2\0\31\32\22\0\1\17\1\0\3\110\5\0\2\17"+
    "\14\32\1\357\13\32\2\0\31\32\22\0\1\17\1\0"+
    "\3\110\5\0\2\17\1\360\27\32\2\0\31\32\22\0"+
    "\1\17\1\0\3\110\5\0\2\17\1\361\27\32\2\0"+
    "\31\32\22\0\1\17\1\0\3\110\5\0\2\17\16\32"+
    "\1\362\11\32\2\0\31\32\22\0\1\17\1\0\3\110"+
    "\5\0\2\17\4\32\1\363\23\32\2\0\31\32\22\0"+
    "\1\17\1\0\3\110\5\0\2\17\1\364\27\32\2\0"+
    "\31\32\22\0\1\17\1\0\3\110\5\0\2\17\20\32"+
    "\1\365\7\32\2\0\31\32\22\0\1\17\1\0\3\110"+
    "\5\0\2\17\25\32\1\366\2\32\2\0\31\32\22\0"+
    "\1\17\1\0\3\110\5\0\2\17\4\32\1\367\23\32"+
    "\2\0\31\32\22\0\1\17\1\0\3\110\5\0\2\17"+
    "\30\32\2\0\7\32\1\370\21\32\22\0\1\17\1\0"+
    "\3\110\5\0\2\17\30\32\2\0\5\32\1\371\23\32"+
    "\22\0\1\17\1\0\3\110\5\0\2\17\30\32\2\0"+
    "\20\32\1\147\10\32\22\0\1\17\1\0\3\110\5\0"+
    "\2\17\30\32\2\0\14\32\1\372\14\32\21\0\1\373"+
    "\1\17\1\0\3\110\5\0\2\17\30\32\2\0\31\32"+
    "\22\0\1\17\1\0\3\110\5\0\2\17\30\32\2\0"+
    "\13\32\1\374\15\32\22\0\1\17\1\0\3\110\5\0"+
    "\2\17\30\32\2\0\10\32\1\133\20\32\22\0\1\17"+
    "\1\0\3\110\5\0\2\17\30\32\2\0\7\32\1\375"+
    "\21\32\22\0\1\17\1\0\3\110\5\0\2\17\30\32"+
    "\2\0\11\32\1\376\17\32\22\0\1\17\1\0\3\110"+
    "\5\0\2\17\30\32\2\0\15\32\1\377\13\32\21\0"+
    "\1\u0100\1\17\1\0\3\110\5\0\2\17\30\32\2\0"+
    "\31\32\22\0\1\17\1\0\3\110\5\0\2\17\30\32"+
    "\2\0\10\32\1\147\20\32\24\0\3\u0101\75\0\16\251"+
    "\1\u0102\102\251\17\0\1\17\11\0\32\17\2\0\1\17"+
    "\1\u0103\27\17\22\0\1\17\1\0\3\110\5\0\2\17"+
    "\30\32\2\0\1\u0104\30\32\22\0\1\17\1\0\3\110"+
    "\5\0\2\17\22\32\1\u0105\5\32\2\0\31\32\22\0"+
    "\1\17\1\0\3\110\5\0\2\17\27\32\1\u0106\2\0"+
    "\27\32\1\u0106\1\32\22\0\1\17\1\0\3\110\5\0"+
    "\2\17\22\32\1\u0107\5\32\2\0\22\32\1\u0107\6\32"+
    "\22\0\1\17\1\0\3\110\5\0\2\17\2\32\1\u0108"+
    "\25\32\2\0\3\32\1\u0108\25\32\22\0\1\17\1\0"+
    "\3\110\5\0\2\17\3\32\1\u0109\24\32\2\0\4\32"+
    "\1\u0109\24\32\22\0\1\17\1\0\3\110\5\0\2\17"+
    "\23\32\1\u010a\4\32\2\0\23\32\1\u010a\5\32\22\0"+
    "\1\17\1\0\3\110\5\0\2\17\12\32\1\u010b\15\32"+
    "\2\0\12\32\1\u010b\16\32\22\0\1\17\1\0\3\110"+
    "\5\0\2\17\10\32\1\u010c\17\32\2\0\11\32\1\u010c"+
    "\17\32\22\0\1\17\1\0\3\110\5\0\2\17\10\32"+
    "\1\u010d\17\32\2\0\11\32\1\u010d\17\32\22\0\1\17"+
    "\1\0\3\110\5\0\2\17\4\32\1\u010e\23\32\2\0"+
    "\5\32\1\u010e\23\32\22\0\1\17\1\0\3\110\5\0"+
    "\2\17\14\32\1\u010f\13\32\2\0\14\32\1\u010f\14\32"+
    "\22\0\1\17\1\0\3\110\5\0\2\17\22\32\1\u0110"+
    "\5\32\2\0\22\32\1\u0110\6\32\22\0\1\17\1\0"+
    "\3\110\5\0\2\17\13\32\1\u0111\14\32\2\0\13\32"+
    "\1\u0111\15\32\22\0\1\17\1\0\3\110\5\0\2\17"+
    "\13\32\1\u0112\14\32\2\0\31\32\22\0\1\17\1\0"+
    "\3\110\5\0\2\17\22\32\1\u0113\5\32\2\0\31\32"+
    "\22\0\1\17\1\0\3\110\5\0\2\17\17\32\1\u0114"+
    "\10\32\2\0\31\32\22\0\1\17\1\0\3\110\5\0"+
    "\2\17\20\32\1\u0115\7\32\2\0\31\32\22\0\1\17"+
    "\1\0\3\110\5\0\2\17\13\32\1\u0116\14\32\2\0"+
    "\31\32\22\0\1\17\1\0\3\110\5\0\2\17\1\u0117"+
    "\27\32\2\0\31\32\22\0\1\17\1\0\3\110\5\0"+
    "\2\17\21\32\1\u0118\6\32\2\0\31\32\22\0\1\17"+
    "\1\0\3\110\5\0\2\17\22\32\1\u0119\5\32\2\0"+
    "\31\32\22\0\1\17\1\0\3\110\5\0\2\17\21\32"+
    "\1\u011a\6\32\2\0\31\32\22\0\1\17\1\0\3\110"+
    "\5\0\2\17\7\32\1\u011b\20\32\2\0\31\32\22\0"+
    "\1\17\1\0\3\110\5\0\2\17\30\32\2\0\20\32"+
    "\1\u011c\10\32\22\0\1\17\1\0\3\110\5\0\2\17"+
    "\30\32\2\0\1\32\1\u011d\27\32\22\0\1\17\1\0"+
    "\3\110\5\0\2\17\30\32\2\0\1\32\1\u011e\27\32"+
    "\76\0\1\u011f\12\0\1\u0120\31\0\1\17\1\0\3\110"+
    "\5\0\2\17\30\32\2\0\5\32\1\u0121\23\32\22\0"+
    "\1\17\1\0\3\110\5\0\2\17\30\32\2\0\5\32"+
    "\1\u0122\23\32\22\0\1\17\1\0\3\110\5\0\2\17"+
    "\30\32\2\0\3\32\1\u0123\25\32\22\0\1\17\1\0"+
    "\3\110\5\0\2\17\30\32\2\0\7\32\1\u0124\21\32"+
    "\71\0\1\u0125\32\0\30\251\1\3\70\251\17\0\1\17"+
    "\11\0\32\17\2\0\13\17\1\u0126\15\17\22\0\1\17"+
    "\1\0\3\110\5\0\2\17\10\32\1\u0127\17\32\2\0"+
    "\31\32\22\0\1\17\1\0\3\110\5\0\2\17\4\32"+
    "\1\u0128\23\32\2\0\31\32\22\0\1\17\1\0\3\110"+
    "\5\0\2\17\16\32\1\u0129\11\32\2\0\16\32\1\u0129"+
    "\12\32\22\0\1\17\1\0\3\110\5\0\2\17\22\32"+
    "\1\u012a\5\32\2\0\22\32\1\u012a\6\32\22\0\1\17"+
    "\1\0\3\110\5\0\2\17\16\32\1\u012b\11\32\2\0"+
    "\16\32\1\u012b\12\32\22\0\1\17\1\0\3\110\5\0"+
    "\2\17\17\32\1\u012c\10\32\2\0\17\32\1\u012c\11\32"+
    "\22\0\1\17\1\0\3\110\5\0\2\17\2\32\1\u012d"+
    "\25\32\2\0\3\32\1\u012d\25\32\22\0\1\17\1\0"+
    "\3\110\5\0\2\17\1\u012e\27\32\2\0\1\32\1\u012e"+
    "\27\32\22\0\1\17\1\0\3\110\5\0\2\17\4\32"+
    "\1\u012f\23\32\2\0\5\32\1\u012f\23\32\22\0\1\17"+
    "\1\0\3\110\5\0\2\17\1\u0130\27\32\2\0\31\32"+
    "\22\0\1\17\1\0\3\110\5\0\2\17\30\32\2\0"+
    "\1\u0131\30\32\22\0\1\17\1\0\3\110\5\0\2\17"+
    "\4\32\1\u0132\23\32\2\0\31\32\22\0\1\17\1\0"+
    "\3\110\5\0\2\17\3\32\1\u0133\24\32\2\0\31\32"+
    "\22\0\1\17\1\0\3\110\5\0\2\17\21\32\1\u0134"+
    "\6\32\2\0\31\32\22\0\1\17\1\0\3\110\5\0"+
    "\2\17\4\32\1\u0135\23\32\2\0\31\32\22\0\1\17"+
    "\1\0\3\110\5\0\2\17\10\32\1\u0136\17\32\2\0"+
    "\31\32\22\0\1\17\1\0\3\110\5\0\2\17\30\32"+
    "\2\0\16\32\1\u0137\12\32\22\0\1\17\1\0\3\110"+
    "\5\0\2\17\30\32\2\0\15\32\1\u0138\13\32\22\0"+
    "\1\17\1\0\3\110\5\0\2\17\30\32\2\0\13\32"+
    "\1\u0139\15\32\71\0\1\u013a\130\0\1\u013b\41\0\1\17"+
    "\1\0\3\110\5\0\2\17\30\32\2\0\14\32\1\u013c"+
    "\14\32\22\0\1\17\1\0\3\110\5\0\2\17\30\32"+
    "\2\0\20\32\1\u013d\10\32\22\0\1\17\1\0\3\110"+
    "\5\0\2\17\30\32\2\0\12\32\1\147\16\32\103\0"+
    "\1\u013e\37\0\1\17\1\0\3\110\5\0\2\17\15\32"+
    "\1\u013f\12\32\2\0\31\32\22\0\1\17\1\0\3\110"+
    "\5\0\2\17\20\32\1\u0140\7\32\2\0\31\32\22\0"+
    "\1\17\1\0\3\110\5\0\2\17\15\32\1\u0141\12\32"+
    "\2\0\15\32\1\u0141\13\32\22\0\1\17\1\0\3\110"+
    "\5\0\2\17\15\32\1\u0142\12\32\2\0\15\32\1\u0142"+
    "\13\32\22\0\1\17\1\0\3\110\5\0\2\17\22\32"+
    "\1\u0143\5\32\2\0\22\32\1\u0143\6\32\22\0\1\17"+
    "\1\0\3\110\5\0\2\17\22\32\1\u0144\5\32\2\0"+
    "\22\32\1\u0144\6\32\22\0\1\17\1\0\3\110\5\0"+
    "\2\17\20\32\1\u0145\7\32\2\0\20\32\1\u0145\10\32"+
    "\22\0\1\17\1\0\3\110\5\0\2\17\20\32\1\u0146"+
    "\7\32\2\0\31\32\22\0\1\17\1\0\3\110\5\0"+
    "\2\17\15\32\1\u0147\12\32\2\0\31\32\22\0\1\17"+
    "\1\0\3\110\5\0\2\17\1\u0148\27\32\2\0\31\32"+
    "\22\0\1\17\1\0\3\110\5\0\2\17\30\32\2\0"+
    "\1\u0149\30\32\22\0\1\17\1\0\3\110\5\0\2\17"+
    "\13\32\1\u014a\14\32\2\0\31\32\22\0\1\17\1\0"+
    "\3\110\5\0\2\17\30\32\2\0\23\32\1\u014b\5\32"+
    "\104\0\1\u014c\134\0\1\u014d\22\0\1\17\1\0\3\110"+
    "\5\0\2\17\30\32\2\0\5\32\1\u014e\23\32\101\0"+
    "\1\u014f\41\0\1\17\1\0\3\110\5\0\2\17\5\32"+
    "\1\u0150\22\32\2\0\31\32\22\0\1\17\1\0\3\110"+
    "\5\0\2\17\30\32\2\0\1\u0151\30\32\22\0\1\17"+
    "\1\0\3\110\5\0\2\17\10\32\1\u0152\17\32\2\0"+
    "\11\32\1\u0152\17\32\22\0\1\17\1\0\3\110\5\0"+
    "\2\17\4\32\1\u0153\23\32\2\0\5\32\1\u0153\23\32"+
    "\22\0\1\17\1\0\3\110\5\0\2\17\30\32\2\0"+
    "\1\u0154\30\32\22\0\1\17\1\0\3\110\5\0\2\17"+
    "\23\32\1\u0155\4\32\2\0\31\32\22\0\1\17\1\0"+
    "\3\110\5\0\2\17\22\32\1\u0156\5\32\2\0\31\32"+
    "\22\0\1\17\1\0\3\110\5\0\2\17\30\u0157\2\0"+
    "\1\32\30\u0157\22\0\1\17\1\0\3\110\5\0\2\17"+
    "\4\32\1\u0158\23\32\2\0\31\32\22\0\1\17\1\0"+
    "\3\110\5\0\2\17\30\32\2\0\15\32\1\u0159\13\32"+
    "\101\0\1\u015a\114\0\1\u015b\45\0\1\17\1\0\3\110"+
    "\5\0\2\17\30\32\2\0\15\32\1\u015c\13\32\77\0"+
    "\1\u015d\43\0\1\17\1\0\3\110\5\0\2\17\16\32"+
    "\1\u015e\11\32\2\0\31\32\22\0\1\17\1\0\3\110"+
    "\5\0\2\17\1\u015f\27\32\2\0\31\32\22\0\1\17"+
    "\1\0\3\110\5\0\2\17\15\32\1\u0160\12\32\2\0"+
    "\15\32\1\u0160\13\32\22\0\1\17\1\0\3\110\5\0"+
    "\2\17\1\u0161\27\32\2\0\1\32\1\u0161\27\32\22\0"+
    "\1\17\1\0\3\110\5\0\2\17\15\32\1\u0162\12\32"+
    "\2\0\31\32\22\0\1\17\1\0\3\110\5\0\2\17"+
    "\14\32\1\u0163\13\32\2\0\31\32\22\0\1\17\1\0"+
    "\3\110\5\0\2\17\16\32\1\u0164\11\32\2\0\31\32"+
    "\22\0\1\17\1\0\3\110\5\0\2\17\30\32\2\0"+
    "\4\32\1\147\24\32\103\0\1\u0165\37\0\1\17\1\0"+
    "\3\110\5\0\2\17\1\32\1\u0166\26\32\2\0\31\32"+
    "\105\0\1\u015b\35\0\1\17\1\0\3\110\5\0\2\17"+
    "\13\32\1\u0167\14\32\2\0\31\32\22\0\1\17\1\0"+
    "\3\110\5\0\2\17\6\32\1\u0168\21\32\2\0\7\32"+
    "\1\u0168\21\32\22\0\1\17\1\0\3\110\5\0\2\17"+
    "\23\32\1\u0169\4\32\2\0\31\32\22\0\1\17\1\0"+
    "\3\110\5\0\2\17\20\32\1\u016a\7\32\2\0\31\32"+
    "\117\0\1\u015b\23\0\1\17\1\0\3\110\5\0\2\17"+
    "\30\32\2\0\27\32\1\u016b\1\32\22\0\1\17\1\0"+
    "\3\110\5\0\2\17\4\32\1\u016c\23\32\2\0\31\32"+
    "\22\0\1\17\1\0\3\110\5\0\2\17\14\32\1\u016d"+
    "\13\32\2\0\31\32\22\0\1\17\1\0\3\110\5\0"+
    "\2\17\10\32\1\u016e\17\32\2\0\31\32\22\0\1\17"+
    "\1\0\3\110\5\0\2\17\10\32\1\u016f\17\32\2\0"+
    "\31\32\22\0\1\17\1\0\3\110\5\0\2\17\1\u0170"+
    "\27\32\2\0\31\32\22\0\1\17\1\0\3\110\5\0"+
    "\2\17\16\32\1\u0171\11\32\2\0\31\32\22\0\1\17"+
    "\1\0\3\110\5\0\2\17\30\32\2\0\4\32\1\u0172"+
    "\24\32\22\0\1\17\1\0\3\110\5\0\2\17\22\32"+
    "\1\u0173\5\32\2\0\31\32\22\0\1\17\1\0\3\110"+
    "\5\0\2\17\16\32\1\u0174\11\32\2\0\31\32\22\0"+
    "\1\17\1\0\3\110\5\0\2\17\20\32\1\u0175\7\32"+
    "\2\0\31\32\22\0\1\17\1\0\3\110\5\0\2\17"+
    "\10\32\1\u0176\17\32\2\0\31\32\22\0\1\17\1\0"+
    "\3\110\5\0\2\17\16\32\1\u0177\11\32\2\0\31\32"+
    "\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[24381];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\3\1\1\11\1\1\6\11\1\1\1\11"+
    "\2\1\2\11\22\1\2\11\16\1\3\11\1\0\1\11"+
    "\2\0\1\11\1\0\1\11\1\0\1\1\1\0\3\11"+
    "\54\1\1\11\1\0\1\11\1\1\1\0\61\1\1\0"+
    "\61\1\1\0\37\1\1\0\4\1\1\0\1\11\1\0"+
    "\34\1\2\0\4\1\1\0\24\1\2\0\2\1\1\0"+
    "\15\1\2\0\1\1\1\0\12\1\1\0\1\11\1\1"+
    "\1\0\7\1\1\0\22\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[375];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
	private String quitarComillas(String text){
		return text.replace("\"","");
	}
	private String quitarComillasSimples(String text){
		return text.replace("\'","");
	}

	List<String> errores = new ArrayList<String>();

     private void estructuraError(String charError, int linea, int columna){
     	String elError = "Error: No se reconoce el caracter: " + charError + " -> {Linea: "+ linea +", Columna: "+ columna +" }" ;
     	errores.add(elError);
     }

     public List getErroresLexicos(){
     	return errores;
     }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerGCIC(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {   return new java_cup.runtime.Symbol(symGCIC.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return new Symbol(INVALID,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 82: break;
          case 2:
            { /* ignorar */
            }
            // fall through
          case 83: break;
          case 3:
            { return new Symbol(ADMIRACION,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 84: break;
          case 4:
            { return new Symbol(AND_1,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 85: break;
          case 5:
            { return new Symbol(PAI,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 86: break;
          case 6:
            { return new Symbol(PAD,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 87: break;
          case 7:
            { return new Symbol(MULT,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 88: break;
          case 8:
            { return new Symbol(SUMA,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 89: break;
          case 9:
            { return new Symbol(COMA,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 90: break;
          case 10:
            { return new Symbol(MENOS,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 91: break;
          case 11:
            { return new Symbol(STRING_TOTAL,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 92: break;
          case 12:
            { return new Symbol(DIAG,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 93: break;
          case 13:
            { return new Symbol(ENTERO,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 94: break;
          case 14:
            { return new Symbol(DOS_PUNTOS,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 95: break;
          case 15:
            { return new Symbol(SEMI,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 96: break;
          case 16:
            { return new Symbol(MENQ,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 97: break;
          case 17:
            { return new Symbol(IGUAL,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 98: break;
          case 18:
            { return new Symbol(MAQ,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 99: break;
          case 19:
            { return new Symbol(ID_VARIABLE,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 100: break;
          case 20:
            { return new Symbol(CORI,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 101: break;
          case 21:
            { return new Symbol(CORD,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 102: break;
          case 22:
            { return new Symbol(LLAI,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 103: break;
          case 23:
            { return new Symbol(BARRA90,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 104: break;
          case 24:
            { return new Symbol(LLAD,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 105: break;
          case 25:
            { return new Symbol(DIFERENTE,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 106: break;
          case 26:
            { return new Symbol(STRING_WS,yyline+1,yycolumn+1, new Token(quitarComillas(yytext()),yyline+1,yycolumn+1));
            }
            // fall through
          case 107: break;
          case 27:
            { return new Symbol(ID_ELEMENT,yyline+1,yycolumn+1, new Token(quitarComillasSimples(yytext()),yyline+1,yycolumn+1));
            }
            // fall through
          case 108: break;
          case 28:
            { return new Symbol(MEN_QUE,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 109: break;
          case 29:
            { return new Symbol(IGUALACION,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 110: break;
          case 30:
            { return new Symbol(MAY_QUE,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 111: break;
          case 31:
            { return new Symbol(IF,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1 ));
            }
            // fall through
          case 112: break;
          case 32:
            { return new Symbol(PARAMETRO,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1 ));
            }
            // fall through
          case 113: break;
          case 33:
            { return new Symbol(STRING,yyline+1,yycolumn+1, new Token(quitarComillas(yytext()),yyline+1,yycolumn+1));
            }
            // fall through
          case 114: break;
          case 34:
            { return new Symbol(CHAR,yyline+1,yycolumn+1, new Token(quitarComillasSimples(yytext()),yyline+1,yycolumn+1));
            }
            // fall through
          case 115: break;
          case 35:
            { return new Symbol(DECIMAL,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 116: break;
          case 36:
            { return new Symbol(ASC,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1 ));
            }
            // fall through
          case 117: break;
          case 37:
            { return new Symbol(C_P,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 118: break;
          case 38:
            { return new Symbol(END,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1 ));
            }
            // fall through
          case 119: break;
          case 39:
            { return new Symbol(C_BR,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 120: break;
          case 40:
            { return new Symbol(C_H1,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 121: break;
          case 41:
            { return new Symbol(DESC,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1 ));
            }
            // fall through
          case 122: break;
          case 42:
            { return new Symbol(ELSE,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1 ));
            }
            // fall through
          case 123: break;
          case 43:
            { return new Symbol(EXIT,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1 ));
            }
            // fall through
          case 124: break;
          case 44:
            { return new Symbol(INIT,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1 ));
            }
            // fall through
          case 125: break;
          case 45:
            { return new Symbol(THEN,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1 ));
            }
            // fall through
          case 126: break;
          case 46:
            { return new Symbol(ID_CHAR,yyline+1,yycolumn+1, new Token("char",yytext(),yyline+1,yycolumn+1 ));
            }
            // fall through
          case 127: break;
          case 47:
            { return new Symbol(BOOLEAN,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1 ));
            }
            // fall through
          case 128: break;
          case 48:
            { return new Symbol(C_DIV,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 129: break;
          case 49:
            { return new Symbol(C_IMG,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 130: break;
          case 50:
            { return new Symbol(WHILE,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1 ));
            }
            // fall through
          case 131: break;
          case 51:
            { return new Symbol(C_BODY,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 132: break;
          case 52:
            { return new Symbol(C_GCIC,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 133: break;
          case 53:
            { return new Symbol(C_HEAD,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 134: break;
          case 54:
            { return new Symbol(C_LINK,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 135: break;
          case 55:
            { return new Symbol(C_SPAM,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 136: break;
          case 56:
            { return new Symbol(HUNTIL,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1 ));
            }
            // fall through
          case 137: break;
          case 57:
            { return new Symbol(INSERT,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1 ));
            }
            // fall through
          case 138: break;
          case 58:
            { return new Symbol(REPEAT,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1 ));
            }
            // fall through
          case 139: break;
          case 59:
            { return new Symbol(ID_STRING,yyline+1,yycolumn+1, new Token("string",yytext(),yyline+1,yycolumn+1 ));
            }
            // fall through
          case 140: break;
          case 60:
            { return new Symbol(GLOBAL,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1 ));
            }
            // fall through
          case 141: break;
          case 61:
            { return new Symbol(C_INPUT,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 142: break;
          case 62:
            { return new Symbol(C_TITLE,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 143: break;
          case 63:
            { return new Symbol(ON_LOAD,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1 ));
            }
            // fall through
          case 144: break;
          case 64:
            { return new Symbol(REVERSE,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1 ));
            }
            // fall through
          case 145: break;
          case 65:
            { return new Symbol(ID_BOOLEAN,yyline+1,yycolumn+1, new Token("boolean",yytext(),yyline+1,yycolumn+1 ));
            }
            // fall through
          case 146: break;
          case 66:
            { return new Symbol(ID_DECIMAL,yyline+1,yycolumn+1, new Token("decimal",yytext(),yyline+1,yycolumn+1 ));
            }
            // fall through
          case 147: break;
          case 67:
            { return new Symbol(ID_INTEGER,yyline+1,yycolumn+1, new Token("int",yytext(),yyline+1,yycolumn+1 ));
            }
            // fall through
          case 148: break;
          case 68:
            { return new Symbol(C_BUTTON,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 149: break;
          case 69:
            { return new Symbol(C_OPTION,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 150: break;
          case 70:
            { return new Symbol(C_SELECT,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 151: break;
          case 71:
            { 
            }
            // fall through
          case 152: break;
          case 72:
            { return new Symbol(NOMBRE_FUNCION,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 153: break;
          case 73:
            { return new Symbol(THENWHILE,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1 ));
            }
            // fall through
          case 154: break;
          case 74:
            { return new Symbol(ALERT_INFO,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1 ));
            }
            // fall through
          case 155: break;
          case 75:
            { return new Symbol(C_TEXTAREA,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 156: break;
          case 76:
            { return new Symbol(LETPAR_NUM,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1 ));
            }
            // fall through
          case 157: break;
          case 77:
            { return new Symbol(C_SCRIPTING,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1));
            }
            // fall through
          case 158: break;
          case 78:
            { return new Symbol(LETIMPAR_NUM,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1 ));
            }
            // fall through
          case 159: break;
          case 79:
            { return new Symbol(NUM_ALEATORIO,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1 ));
            }
            // fall through
          case 160: break;
          case 80:
            { return new Symbol(GET_ELEMENT_BY_ID,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1 ));
            }
            // fall through
          case 161: break;
          case 81:
            { return new Symbol(CARACTER_ALEATORIO,yyline+1,yycolumn+1, new Token(yytext(),yyline+1,yycolumn+1 ));
            }
            // fall through
          case 162: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}


//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.mycompany.p2c1.ReglasGram.insert;

import com.mycompany.p2c1.ReglasGram.Token;
import java_cup.runtime.*;
import com.mycompany.p2c1.ReglasGram.Funciones.*;
import com.mycompany.p2c1.ReglasGram.insert.symInsert.*;
import com.mycompany.p2c1.objetos.*;
import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.util.Set;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserInsert extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return symInsert.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserInsert() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserInsert(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserInsert(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\047\000\002\002\003\000\002\002\004\000\002\002" +
    "\003\000\002\002\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\004\004\000\002\005" +
    "\003\000\002\005\002\000\002\023\002\000\002\006\005" +
    "\000\002\007\004\000\002\010\005\000\002\011\004\000" +
    "\002\011\003\000\002\012\004\000\002\013\004\000\002" +
    "\014\003\000\002\014\003\000\002\015\004\000\002\015" +
    "\003\000\002\015\003\000\002\016\004\000\002\016\003" +
    "\000\002\017\005\000\002\020\005\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\022\003\000\002" +
    "\022\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\064\000\004\004\011\001\002\000\004\002\uffff\001" +
    "\002\000\010\003\ufff0\005\ufff0\013\ufff0\001\002\000\006" +
    "\002\ufff1\004\043\001\002\000\004\002\ufffe\001\002\000" +
    "\006\003\036\013\037\001\002\000\032\014\021\015\030" +
    "\016\027\017\023\020\017\021\025\022\015\023\020\024" +
    "\024\025\026\026\031\027\016\001\002\000\004\002\001" +
    "\001\002\000\004\002\014\001\002\000\004\002\000\001" +
    "\002\000\010\003\ufff8\005\ufff8\013\ufff8\001\002\000\010" +
    "\003\ufff4\005\ufff4\013\ufff4\001\002\000\010\003\ufffa\005" +
    "\ufffa\013\ufffa\001\002\000\010\003\ufff7\005\ufff7\013\ufff7" +
    "\001\002\000\030\003\034\015\030\016\027\017\023\020" +
    "\017\021\025\022\015\023\020\025\026\026\031\027\016" +
    "\001\002\000\010\003\uffee\005\uffee\013\uffee\001\002\000" +
    "\010\003\ufffb\005\ufffb\013\ufffb\001\002\000\006\003\uffe9" +
    "\013\uffe9\001\002\000\010\003\ufff9\005\ufff9\013\ufff9\001" +
    "\002\000\010\003\ufff6\005\ufff6\013\ufff6\001\002\000\010" +
    "\003\ufffc\005\ufffc\013\ufffc\001\002\000\010\003\ufffd\005" +
    "\ufffd\013\ufffd\001\002\000\010\003\ufff5\005\ufff5\013\ufff5" +
    "\001\002\000\004\002\uffed\001\002\000\004\013\035\001" +
    "\002\000\004\002\uffeb\001\002\000\004\002\uffec\001\002" +
    "\000\004\002\uffe7\001\002\000\004\002\uffe8\001\002\000" +
    "\004\002\uffea\001\002\000\004\002\ufff3\001\002\000\004" +
    "\002\ufff2\001\002\000\004\014\021\001\002\000\010\003" +
    "\050\005\047\013\051\001\002\000\010\003\061\010\060" +
    "\011\063\001\002\000\006\005\uffe2\013\uffe2\001\002\000" +
    "\004\006\056\001\002\000\006\002\uffe4\004\uffe4\001\002" +
    "\000\006\002\uffe5\004\uffe5\001\002\000\006\002\uffef\004" +
    "\uffef\001\002\000\006\005\047\013\055\001\002\000\006" +
    "\005\uffe3\013\uffe3\001\002\000\006\002\uffe6\004\uffe6\001" +
    "\002\000\004\007\057\001\002\000\010\003\uffe0\010\uffe0" +
    "\011\uffe0\001\002\000\006\003\uffdf\012\uffdf\001\002\000" +
    "\006\003\uffdd\012\uffdd\001\002\000\006\003\065\012\066" +
    "\001\002\000\006\003\uffde\012\uffde\001\002\000\006\005" +
    "\uffe1\013\uffe1\001\002\000\006\005\uffdb\013\uffdb\001\002" +
    "\000\006\005\uffdc\013\uffdc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\064\000\020\002\012\004\011\006\005\007\004\010" +
    "\003\012\006\013\007\001\001\000\002\001\001\000\004" +
    "\023\043\001\001\000\006\005\040\010\041\001\001\000" +
    "\002\001\001\000\004\014\037\001\001\000\004\003\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\032\011\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\015\051\016\052\017" +
    "\045\020\044\001\001\000\004\021\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\017\053\020\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserInsert$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserInsert$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserInsert$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	private List<ReportError> listaErrores;
	private String codigoHTML = "";
	private String losEstilos = "";
	private HashMap<String,Token> atributos= new HashMap();

	public ParserInsert(LexerInsert lex){
		super(lex);
		listaErrores = new ArrayList<ReportError>();
	}
	 @Override
	public void syntax_error(Symbol cur_token){
			Token token = (Token) cur_token.value;
			String nombreSimbolo = symbl_name_from_id(cur_token.sym);
			if(nombreSimbolo.equals("INVALID")){
				addError("Lexico",token,"No se esperaba: " + token.getLexema(),null);
			}else{
				addError("Sintactico",token,"No se esperaba: " + nombreSimbolo,null);
			}		

	}
	 @Override
	public void report_fatal_error(String message, Object info){
			String Elerror = "Ocurrio un error no recuperable al analizar: " + message + " -> {objeto: " + info + "}";

			if(info instanceof Symbol ){
				Symbol sim = (Symbol) info;
				Token token = (Token) sim.value;
				addError("Sintactico",token,message,null);
			}else{
				System.out.println("Error -- :  " + message);
			}
	}
	 @Override
	public void report_error(String message, Object info){
			System.out.println("Error desde el report_error: " + message);
	}
	 @Override
	public void unrecovered_syntax_error(Symbol cur_token){
		report_fatal_error("No se puede reparar y analizar el Error sintactico", cur_token);
	}

	private void addError(String tipoError, Token token,String descError, String solucion){
			ReportError reporte = new ReportError();
			reporte.setTipoError(tipoError);
			reporte.setColumna(token.getColumna());
			reporte.setLinea(token.getLinea());
			if (solucion == null) {
                reporte.setSolucion(listTokensEsperados());
            }else{
                reporte.setSolucion(solucion);
            }
			reporte.setDescripcion(descError);
			listaErrores.add(reporte);

	}
	private String listTokensEsperados(){
		String tokenEsperados = "";
		for (Integer expected_token_id : expected_token_ids()) {
            	if(!symbl_name_from_id(expected_token_id).equals("error")){
            		//String nameToken = nameTokenEsperado(symbl_name_from_id(expected_token_id));
            		String nameToken = symbl_name_from_id(expected_token_id);
            		if (nameToken == null){
            			tokenEsperados += "<p>"+symbl_name_from_id(expected_token_id) + "</p>";
            		}else{
            			tokenEsperados += "<p>"+nameToken + "</p>";
            		}            		
            	}                
            }
        return tokenEsperados;
	}

	public List getListaErrores(){
		return listaErrores;
	}
	 @Override
	protected int error_sync_size(){
		return 1;
	}
	private boolean isParametrosCss(String param){
		switch (param){
			case "background" : return true;
			case "color" : return true;
			case "font-size" : return true;
			case "font-family" : return true;
			case "text-align" : return true;
			default: return false;
		}
	}
	public String getCodigoHTML(){
		return codigoHTML;
	}
	private String nameTokenEsperado(String nameToken){
		switch (nameToken){
			case "MENQ" : return "<";
			case "CORI" : return "[";
			case "CORD" : return "]";
			case "IGUAL" : return "=";
			case "STRING" : return "string";
			case "STRING_WS" : return "string sin espacios";
			case "MAQ" : return ">";
			case "DIAG" : return "/";
			case "STRING_TOTAL" : return "cadena de texto";
			case "ID_VARIABLE" : return "nombre de una variable";
			case "NOMBRE_FUNCION" : return "nombre de funcion (PROCESS_(nombre de una funcion con letras a-z o A-Z))";
			case "LLAI" : return "{";
			case "LLAD" : return "}";
			case "DOS_PUNTOS" : return ":";
			case "COMA" : return ",";
			case "ADMIRACION" : return "!";
			case "SEMI" : return ";";
			case "BARRA90" : return "|";
			case "AND_1" : return "&";
			case "SUMA" : return "+";
			case "MENOS" : return "-";
			case "MULT" : return "*";
			case "GET_ELEMENT_BY_ID" : return "getElemenById";
			case "IGUALACION" : return "==";
			case "MEN_QUE" : return "<=";
			case "MAY_QUE" : return ">=";
			case "DIFERENTE" : return "!=";
			case "CHAR" : return "caracter";
			case "DECIMAL" : return "numero decimal";
			case "BOOLEAN" : return "true or false";
			case "INVALID" : return "caracter cualquiera";
			case "ID_ELEMENT" : return "string encerrado entre comillas simples";
			case "ENTERO": return "numero entero";
			case "PAI" : return "(";
			case "PAD": return ")";
			case "PARAMETRO": return "Algun Parametro aceptable Ejemplo:id";
            default: return nameToken;
		}
	}
	private String parametrosCss(String param){
			switch (param){
			case "href" : return "href";
			case "background" : return "background-color";
			case "color" : return "color";
			case "font-size" : return "font-size";
			case "font-family" : return "font-family";
			case "type" : return "type";
			case "id" : return "id";
			case "name" : return "name";
			case "cols" : return "cols";
			case "text-align" : return "text-align";
			 default: return param;
		}
	}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserInsert$actions {
  private final ParserInsert parser;

  /** Constructor */
  CUP$ParserInsert$actions(ParserInsert parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserInsert$do_action_part00000000(
    int                        CUP$ParserInsert$act_num,
    java_cup.runtime.lr_parser CUP$ParserInsert$parser,
    java.util.Stack            CUP$ParserInsert$stack,
    int                        CUP$ParserInsert$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserInsert$result;

      /* select the action based on the action number */
      switch (CUP$ParserInsert$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inicio ::= etq_generica 
            {
              Token RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).right;
		Token start_val = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		RESULT = start_val;
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserInsert$parser.done_parsing();
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= fin_etiqueta_g 
            {
              Token RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= etiqueta_br 
            {
              Token RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // c_etiqueta_g ::= C_SPAM 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		e.setNombreToken("span"); RESULT = e;
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("c_etiqueta_g",1, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // c_etiqueta_g ::= C_INPUT 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 e.setNombreToken("input"); RESULT = e;
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("c_etiqueta_g",1, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // c_etiqueta_g ::= C_TEXTAREA 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 e.setNombreToken("textarea"); RESULT = e;
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("c_etiqueta_g",1, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // c_etiqueta_g ::= C_SELECT 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 e.setNombreToken("select");  RESULT = e;
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("c_etiqueta_g",1, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // c_etiqueta_g ::= C_OPTION 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		  e.setNombreToken("option");RESULT = e;
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("c_etiqueta_g",1, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // c_etiqueta_g ::= C_DIV 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		  e.setNombreToken("div");RESULT = e;
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("c_etiqueta_g",1, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // c_etiqueta_g ::= C_IMG 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 e.setNombreToken("img"); RESULT = e;
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("c_etiqueta_g",1, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // c_etiqueta_g ::= C_BUTTON 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 e.setNombreToken("button"); RESULT = e;
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("c_etiqueta_g",1, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // c_etiqueta_g ::= C_H1 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		  e.setNombreToken("h1");RESULT = e;
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("c_etiqueta_g",1, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // c_etiqueta_g ::= C_P 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 e.setNombreToken("p"); RESULT = e;
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("c_etiqueta_g",1, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // etq_generica ::= etiqueta_g opcional_fin_etiqueta 
            {
              Token RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).right;
		Token e0 = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("etq_generica",2, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // opcional_fin_etiqueta ::= fin_etiqueta_g 
            {
              Token RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("opcional_fin_etiqueta",3, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // opcional_fin_etiqueta ::= 
            {
              Token RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("opcional_fin_etiqueta",3, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$0 ::= 
            {
              Token RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token e0 = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;

						losEstilos = "";
					
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("NT$0",17, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // etiqueta_g ::= inicio_g NT$0 parametros_etiquetas 
            {
              Token RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Token) ((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		int e0left = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).right;
		Token e0 = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		
						if(e != null){
							if(e.getNombreToken() == null){
								e.setNombreToken("");
							}
							if(e.getNombreToken().equals("input")){
								codigoHTML += "<"+e0.getNombreToken() + " " + e.getNombreToken() +" style=\\\"" + losEstilos + "\\\" >";
							}else{
								codigoHTML += "<"+e0.getNombreToken() + " " + e.getNombreToken() +" style=\\\"" + losEstilos + "\\\" >";
							}
						}
						 RESULT = e0;
					
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("etiqueta_g",4, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // inicio_g ::= MENQ c_etiqueta_g 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = e;
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("inicio_g",5, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // fin_etiqueta_g ::= MENQ DIAG cierre_g 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		
							if(e.getNombreToken().equals("input")){
								//no hacer nada
							}else{
								codigoHTML += "</"+e.getNombreToken() +">";
							}
							 RESULT = e;
						
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("fin_etiqueta_g",6, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // cierre_g ::= c_etiqueta_g MAQ 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		 RESULT = e;
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("cierre_g",7, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // cierre_g ::= error 
            {
              Token RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("cierre_g",7, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // etiqueta_br ::= inicio_br cierre_etiqueta 
            {
              Token RESULT =null;
		
						codigoHTML += "<br>";
					
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("etiqueta_br",8, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // inicio_br ::= MENQ C_BR 
            {
              Token RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("inicio_br",9, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // cierre_etiqueta ::= MAQ 
            {
              Token RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("cierre_etiqueta",10, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // cierre_etiqueta ::= error 
            {
              Token RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("cierre_etiqueta",10, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // parametros_etiquetas ::= varios_parametro_etiqueta MAQ 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		
								RESULT = e;
							
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parametros_etiquetas",11, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // parametros_etiquetas ::= MAQ 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		
								e.setNombreToken("");
								RESULT = e;
							
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parametros_etiquetas",11, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // parametros_etiquetas ::= error 
            {
              Token RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parametros_etiquetas",11, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // varios_parametro_etiqueta ::= varios_parametro_etiqueta parametro_etiqueta 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		
										if(e.getNombreToken() == null){
											e.setNombreToken(e1.getNombreToken());
										}else if(e1.getNombreToken() != null){
											e.setNombreToken(e.getNombreToken() + " " + e1.getNombreToken());
										}									
										RESULT = e;
									
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("varios_parametro_etiqueta",12, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // varios_parametro_etiqueta ::= parametro_etiqueta 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		
										RESULT = e;
									
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("varios_parametro_etiqueta",12, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // parametro_etiqueta ::= inicio_param_etiq string fin_param_etiq 
            {
              Token RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).right;
		Token e2 = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		
								if(isParametrosCss(e1.getLexema())){
									losEstilos += e2.getLexema() + ";";
								}else{
									e1.setNombreToken(e1.getNombreToken() + e2.getLexema() + "\\\"");
								}
								RESULT = e1;
							
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parametro_etiqueta",13, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // inicio_param_etiq ::= CORI PARAMETRO IGUAL 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		
								if(isParametrosCss(e.getLexema())){
									losEstilos += parametrosCss(e.getLexema()) + ":";
								}else{
									e.setNombreToken(parametrosCss(e.getLexema()) + "=\\\"");
								}								
								RESULT = e;
							
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("inicio_param_etiq",14, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // string ::= STRING 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = e;
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("string",15, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // string ::= STRING_WS 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		 RESULT = e;
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("string",15, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // string ::= error 
            {
              Token RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("string",15, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // fin_param_etiq ::= CORD 
            {
              Token RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("fin_param_etiq",16, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // fin_param_etiq ::= error 
            {
              Token RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("fin_param_etiq",16, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserInsert$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserInsert$do_action(
    int                        CUP$ParserInsert$act_num,
    java_cup.runtime.lr_parser CUP$ParserInsert$parser,
    java.util.Stack            CUP$ParserInsert$stack,
    int                        CUP$ParserInsert$top)
    throws java.lang.Exception
    {
              return CUP$ParserInsert$do_action_part00000000(
                               CUP$ParserInsert$act_num,
                               CUP$ParserInsert$parser,
                               CUP$ParserInsert$stack,
                               CUP$ParserInsert$top);
    }
}

}
